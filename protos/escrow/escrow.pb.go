// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protos/escrow/escrow.proto

package escrow

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TokenType int32

const (
	TokenType_BTT TokenType = 0
)

var TokenType_name = map[int32]string{
	0: "BTT",
}

var TokenType_value = map[string]int32{
	"BTT": 0,
}

func (x TokenType) String() string {
	return proto.EnumName(TokenType_name, int32(x))
}

func (TokenType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{0}
}

type Schedule int32

const (
	Schedule_MONTHLY   Schedule = 0
	Schedule_QUARTERLY Schedule = 1
	Schedule_ANNUALLY  Schedule = 2
)

var Schedule_name = map[int32]string{
	0: "MONTHLY",
	1: "QUARTERLY",
	2: "ANNUALLY",
}

var Schedule_value = map[string]int32{
	"MONTHLY":   0,
	"QUARTERLY": 1,
	"ANNUALLY":  2,
}

func (x Schedule) String() string {
	return proto.EnumName(Schedule_name, int32(x))
}

func (Schedule) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{1}
}

type EscrowStatus int32

const (
	EscrowStatus_INITIATED EscrowStatus = 0
	EscrowStatus_ACTIVE    EscrowStatus = 1
	EscrowStatus_CANCELED  EscrowStatus = 2
	EscrowStatus_CLOSED    EscrowStatus = 3
)

var EscrowStatus_name = map[int32]string{
	0: "INITIATED",
	1: "ACTIVE",
	2: "CANCELED",
	3: "CLOSED",
}

var EscrowStatus_value = map[string]int32{
	"INITIATED": 0,
	"ACTIVE":    1,
	"CANCELED":  2,
	"CLOSED":    3,
}

func (x EscrowStatus) String() string {
	return proto.EnumName(EscrowStatus_name, int32(x))
}

func (EscrowStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{2}
}

type ContractID struct {
	ContractId           []byte   `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	Address              []byte   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ContractID) Reset()         { *m = ContractID{} }
func (m *ContractID) String() string { return proto.CompactTextString(m) }
func (*ContractID) ProtoMessage()    {}
func (*ContractID) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{0}
}
func (m *ContractID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractID.Merge(m, src)
}
func (m *ContractID) XXX_Size() int {
	return m.Size()
}
func (m *ContractID) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractID.DiscardUnknown(m)
}

var xxx_messageInfo_ContractID proto.InternalMessageInfo

func (m *ContractID) GetContractId() []byte {
	if m != nil {
		return m.ContractId
	}
	return nil
}

func (m *ContractID) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (*ContractID) XXX_MessageName() string {
	return "escrow.ContractID"
}

type SignedContractID struct {
	Data                 *ContractID `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Signature            []byte      `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SignedContractID) Reset()         { *m = SignedContractID{} }
func (m *SignedContractID) String() string { return proto.CompactTextString(m) }
func (*SignedContractID) ProtoMessage()    {}
func (*SignedContractID) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{1}
}
func (m *SignedContractID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedContractID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedContractID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedContractID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedContractID.Merge(m, src)
}
func (m *SignedContractID) XXX_Size() int {
	return m.Size()
}
func (m *SignedContractID) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedContractID.DiscardUnknown(m)
}

var xxx_messageInfo_SignedContractID proto.InternalMessageInfo

func (m *SignedContractID) GetData() *ContractID {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SignedContractID) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (*SignedContractID) XXX_MessageName() string {
	return "escrow.SignedContractID"
}

type EscrowContract struct {
	ContractId           []byte    `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	BuyerAddress         []byte    `protobuf:"bytes,2,opt,name=buyer_address,json=buyerAddress,proto3" json:"buyer_address,omitempty"`
	SellerAddress        []byte    `protobuf:"bytes,3,opt,name=seller_address,json=sellerAddress,proto3" json:"seller_address,omitempty"`
	AuthAddress          []byte    `protobuf:"bytes,4,opt,name=auth_address,json=authAddress,proto3" json:"auth_address,omitempty"`
	Amount               int64     `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	CollateralAmount     int64     `protobuf:"varint,6,opt,name=collateral_amount,json=collateralAmount,proto3" json:"collateral_amount,omitempty"`
	WithholdAmount       int64     `protobuf:"varint,7,opt,name=withhold_amount,json=withholdAmount,proto3" json:"withhold_amount,omitempty"`
	TokenType            TokenType `protobuf:"varint,8,opt,name=token_type,json=tokenType,proto3,enum=escrow.TokenType" json:"token_type,omitempty"`
	PayoutSchedule       Schedule  `protobuf:"varint,9,opt,name=payout_schedule,json=payoutSchedule,proto3,enum=escrow.Schedule" json:"payout_schedule,omitempty"`
	NumPayouts           int32     `protobuf:"varint,10,opt,name=num_payouts,json=numPayouts,proto3" json:"num_payouts,omitempty"`
	Reference            []byte    `protobuf:"bytes,11,opt,name=reference,proto3" json:"reference,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *EscrowContract) Reset()         { *m = EscrowContract{} }
func (m *EscrowContract) String() string { return proto.CompactTextString(m) }
func (*EscrowContract) ProtoMessage()    {}
func (*EscrowContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{2}
}
func (m *EscrowContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EscrowContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EscrowContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EscrowContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EscrowContract.Merge(m, src)
}
func (m *EscrowContract) XXX_Size() int {
	return m.Size()
}
func (m *EscrowContract) XXX_DiscardUnknown() {
	xxx_messageInfo_EscrowContract.DiscardUnknown(m)
}

var xxx_messageInfo_EscrowContract proto.InternalMessageInfo

func (m *EscrowContract) GetContractId() []byte {
	if m != nil {
		return m.ContractId
	}
	return nil
}

func (m *EscrowContract) GetBuyerAddress() []byte {
	if m != nil {
		return m.BuyerAddress
	}
	return nil
}

func (m *EscrowContract) GetSellerAddress() []byte {
	if m != nil {
		return m.SellerAddress
	}
	return nil
}

func (m *EscrowContract) GetAuthAddress() []byte {
	if m != nil {
		return m.AuthAddress
	}
	return nil
}

func (m *EscrowContract) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *EscrowContract) GetCollateralAmount() int64 {
	if m != nil {
		return m.CollateralAmount
	}
	return 0
}

func (m *EscrowContract) GetWithholdAmount() int64 {
	if m != nil {
		return m.WithholdAmount
	}
	return 0
}

func (m *EscrowContract) GetTokenType() TokenType {
	if m != nil {
		return m.TokenType
	}
	return TokenType_BTT
}

func (m *EscrowContract) GetPayoutSchedule() Schedule {
	if m != nil {
		return m.PayoutSchedule
	}
	return Schedule_MONTHLY
}

func (m *EscrowContract) GetNumPayouts() int32 {
	if m != nil {
		return m.NumPayouts
	}
	return 0
}

func (m *EscrowContract) GetReference() []byte {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (*EscrowContract) XXX_MessageName() string {
	return "escrow.EscrowContract"
}

type SignedEscrowContract struct {
	Contract             *EscrowContract `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	BuyerSignature       []byte          `protobuf:"bytes,2,opt,name=buyer_signature,json=buyerSignature,proto3" json:"buyer_signature,omitempty"`
	SellerSignature      []byte          `protobuf:"bytes,3,opt,name=seller_signature,json=sellerSignature,proto3" json:"seller_signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SignedEscrowContract) Reset()         { *m = SignedEscrowContract{} }
func (m *SignedEscrowContract) String() string { return proto.CompactTextString(m) }
func (*SignedEscrowContract) ProtoMessage()    {}
func (*SignedEscrowContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{3}
}
func (m *SignedEscrowContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedEscrowContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedEscrowContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedEscrowContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedEscrowContract.Merge(m, src)
}
func (m *SignedEscrowContract) XXX_Size() int {
	return m.Size()
}
func (m *SignedEscrowContract) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedEscrowContract.DiscardUnknown(m)
}

var xxx_messageInfo_SignedEscrowContract proto.InternalMessageInfo

func (m *SignedEscrowContract) GetContract() *EscrowContract {
	if m != nil {
		return m.Contract
	}
	return nil
}

func (m *SignedEscrowContract) GetBuyerSignature() []byte {
	if m != nil {
		return m.BuyerSignature
	}
	return nil
}

func (m *SignedEscrowContract) GetSellerSignature() []byte {
	if m != nil {
		return m.SellerSignature
	}
	return nil
}

func (*SignedEscrowContract) XXX_MessageName() string {
	return "escrow.SignedEscrowContract"
}

type EscrowContractRequest struct {
	Contract             []*SignedEscrowContract `protobuf:"bytes,1,rep,name=contract,proto3" json:"contract,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *EscrowContractRequest) Reset()         { *m = EscrowContractRequest{} }
func (m *EscrowContractRequest) String() string { return proto.CompactTextString(m) }
func (*EscrowContractRequest) ProtoMessage()    {}
func (*EscrowContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{4}
}
func (m *EscrowContractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EscrowContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EscrowContractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EscrowContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EscrowContractRequest.Merge(m, src)
}
func (m *EscrowContractRequest) XXX_Size() int {
	return m.Size()
}
func (m *EscrowContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EscrowContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EscrowContractRequest proto.InternalMessageInfo

func (m *EscrowContractRequest) GetContract() []*SignedEscrowContract {
	if m != nil {
		return m.Contract
	}
	return nil
}

func (*EscrowContractRequest) XXX_MessageName() string {
	return "escrow.EscrowContractRequest"
}

type Escrow struct {
	ContractId           []byte   `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	EscrowId             int64    `protobuf:"varint,2,opt,name=escrow_id,json=escrowId,proto3" json:"escrow_id,omitempty"`
	FromAddress          []byte   `protobuf:"bytes,3,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	ToAddress            []byte   `protobuf:"bytes,4,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	Amount               int64    `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	CollateralAmount     int64    `protobuf:"varint,6,opt,name=collateral_amount,json=collateralAmount,proto3" json:"collateral_amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Escrow) Reset()         { *m = Escrow{} }
func (m *Escrow) String() string { return proto.CompactTextString(m) }
func (*Escrow) ProtoMessage()    {}
func (*Escrow) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{5}
}
func (m *Escrow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Escrow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Escrow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Escrow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Escrow.Merge(m, src)
}
func (m *Escrow) XXX_Size() int {
	return m.Size()
}
func (m *Escrow) XXX_DiscardUnknown() {
	xxx_messageInfo_Escrow.DiscardUnknown(m)
}

var xxx_messageInfo_Escrow proto.InternalMessageInfo

func (m *Escrow) GetContractId() []byte {
	if m != nil {
		return m.ContractId
	}
	return nil
}

func (m *Escrow) GetEscrowId() int64 {
	if m != nil {
		return m.EscrowId
	}
	return 0
}

func (m *Escrow) GetFromAddress() []byte {
	if m != nil {
		return m.FromAddress
	}
	return nil
}

func (m *Escrow) GetToAddress() []byte {
	if m != nil {
		return m.ToAddress
	}
	return nil
}

func (m *Escrow) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Escrow) GetCollateralAmount() int64 {
	if m != nil {
		return m.CollateralAmount
	}
	return 0
}

func (*Escrow) XXX_MessageName() string {
	return "escrow.Escrow"
}

type SubmitContractResult struct {
	PayinId              []byte     `protobuf:"bytes,1,opt,name=payin_id,json=payinId,proto3" json:"payin_id,omitempty"`
	Escrow               []*Escrow  `protobuf:"bytes,2,rep,name=escrow,proto3" json:"escrow,omitempty"`
	EscrowAddress        []byte     `protobuf:"bytes,3,opt,name=escrow_address,json=escrowAddress,proto3" json:"escrow_address,omitempty"`
	EscrowSignedTime     *time.Time `protobuf:"bytes,4,opt,name=escrow_signed_time,json=escrowSignedTime,proto3,stdtime" json:"escrow_signed_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SubmitContractResult) Reset()         { *m = SubmitContractResult{} }
func (m *SubmitContractResult) String() string { return proto.CompactTextString(m) }
func (*SubmitContractResult) ProtoMessage()    {}
func (*SubmitContractResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{6}
}
func (m *SubmitContractResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitContractResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitContractResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmitContractResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitContractResult.Merge(m, src)
}
func (m *SubmitContractResult) XXX_Size() int {
	return m.Size()
}
func (m *SubmitContractResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitContractResult.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitContractResult proto.InternalMessageInfo

func (m *SubmitContractResult) GetPayinId() []byte {
	if m != nil {
		return m.PayinId
	}
	return nil
}

func (m *SubmitContractResult) GetEscrow() []*Escrow {
	if m != nil {
		return m.Escrow
	}
	return nil
}

func (m *SubmitContractResult) GetEscrowAddress() []byte {
	if m != nil {
		return m.EscrowAddress
	}
	return nil
}

func (m *SubmitContractResult) GetEscrowSignedTime() *time.Time {
	if m != nil {
		return m.EscrowSignedTime
	}
	return nil
}

func (*SubmitContractResult) XXX_MessageName() string {
	return "escrow.SubmitContractResult"
}

type SignedSubmitContractResult struct {
	Result               *SubmitContractResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	EscrowSignature      []byte                `protobuf:"bytes,2,opt,name=escrow_signature,json=escrowSignature,proto3" json:"escrow_signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SignedSubmitContractResult) Reset()         { *m = SignedSubmitContractResult{} }
func (m *SignedSubmitContractResult) String() string { return proto.CompactTextString(m) }
func (*SignedSubmitContractResult) ProtoMessage()    {}
func (*SignedSubmitContractResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{7}
}
func (m *SignedSubmitContractResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedSubmitContractResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedSubmitContractResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedSubmitContractResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedSubmitContractResult.Merge(m, src)
}
func (m *SignedSubmitContractResult) XXX_Size() int {
	return m.Size()
}
func (m *SignedSubmitContractResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedSubmitContractResult.DiscardUnknown(m)
}

var xxx_messageInfo_SignedSubmitContractResult proto.InternalMessageInfo

func (m *SignedSubmitContractResult) GetResult() *SubmitContractResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *SignedSubmitContractResult) GetEscrowSignature() []byte {
	if m != nil {
		return m.EscrowSignature
	}
	return nil
}

func (*SignedSubmitContractResult) XXX_MessageName() string {
	return "escrow.SignedSubmitContractResult"
}

type PayinRquest struct {
	PayinId              []byte   `protobuf:"bytes,1,opt,name=payin_id,json=payinId,proto3" json:"payin_id,omitempty"`
	BuyerAddress         []byte   `protobuf:"bytes,2,opt,name=buyer_address,json=buyerAddress,proto3" json:"buyer_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayinRquest) Reset()         { *m = PayinRquest{} }
func (m *PayinRquest) String() string { return proto.CompactTextString(m) }
func (*PayinRquest) ProtoMessage()    {}
func (*PayinRquest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{8}
}
func (m *PayinRquest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayinRquest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayinRquest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayinRquest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayinRquest.Merge(m, src)
}
func (m *PayinRquest) XXX_Size() int {
	return m.Size()
}
func (m *PayinRquest) XXX_DiscardUnknown() {
	xxx_messageInfo_PayinRquest.DiscardUnknown(m)
}

var xxx_messageInfo_PayinRquest proto.InternalMessageInfo

func (m *PayinRquest) GetPayinId() []byte {
	if m != nil {
		return m.PayinId
	}
	return nil
}

func (m *PayinRquest) GetBuyerAddress() []byte {
	if m != nil {
		return m.BuyerAddress
	}
	return nil
}

func (*PayinRquest) XXX_MessageName() string {
	return "escrow.PayinRquest"
}

type SignedPayinRquest struct {
	Request              *PayinRquest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	BuyerSignature       []byte       `protobuf:"bytes,2,opt,name=buyer_signature,json=buyerSignature,proto3" json:"buyer_signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SignedPayinRquest) Reset()         { *m = SignedPayinRquest{} }
func (m *SignedPayinRquest) String() string { return proto.CompactTextString(m) }
func (*SignedPayinRquest) ProtoMessage()    {}
func (*SignedPayinRquest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{9}
}
func (m *SignedPayinRquest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedPayinRquest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedPayinRquest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedPayinRquest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedPayinRquest.Merge(m, src)
}
func (m *SignedPayinRquest) XXX_Size() int {
	return m.Size()
}
func (m *SignedPayinRquest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedPayinRquest.DiscardUnknown(m)
}

var xxx_messageInfo_SignedPayinRquest proto.InternalMessageInfo

func (m *SignedPayinRquest) GetRequest() *PayinRquest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *SignedPayinRquest) GetBuyerSignature() []byte {
	if m != nil {
		return m.BuyerSignature
	}
	return nil
}

func (*SignedPayinRquest) XXX_MessageName() string {
	return "escrow.SignedPayinRquest"
}

type PayinResult struct {
	PayinId              []byte     `protobuf:"bytes,1,opt,name=payin_id,json=payinId,proto3" json:"payin_id,omitempty"`
	Amount               int64      `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	SequenceId           int64      `protobuf:"varint,3,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	EscrowAddress        []byte     `protobuf:"bytes,4,opt,name=escrow_address,json=escrowAddress,proto3" json:"escrow_address,omitempty"`
	EscrowSignedTime     *time.Time `protobuf:"bytes,5,opt,name=escrow_signed_time,json=escrowSignedTime,proto3,stdtime" json:"escrow_signed_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PayinResult) Reset()         { *m = PayinResult{} }
func (m *PayinResult) String() string { return proto.CompactTextString(m) }
func (*PayinResult) ProtoMessage()    {}
func (*PayinResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{10}
}
func (m *PayinResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayinResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayinResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayinResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayinResult.Merge(m, src)
}
func (m *PayinResult) XXX_Size() int {
	return m.Size()
}
func (m *PayinResult) XXX_DiscardUnknown() {
	xxx_messageInfo_PayinResult.DiscardUnknown(m)
}

var xxx_messageInfo_PayinResult proto.InternalMessageInfo

func (m *PayinResult) GetPayinId() []byte {
	if m != nil {
		return m.PayinId
	}
	return nil
}

func (m *PayinResult) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *PayinResult) GetSequenceId() int64 {
	if m != nil {
		return m.SequenceId
	}
	return 0
}

func (m *PayinResult) GetEscrowAddress() []byte {
	if m != nil {
		return m.EscrowAddress
	}
	return nil
}

func (m *PayinResult) GetEscrowSignedTime() *time.Time {
	if m != nil {
		return m.EscrowSignedTime
	}
	return nil
}

func (*PayinResult) XXX_MessageName() string {
	return "escrow.PayinResult"
}

type SignedPayinResult struct {
	Result               *PayinResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	EscrowSignature      []byte       `protobuf:"bytes,2,opt,name=escrow_signature,json=escrowSignature,proto3" json:"escrow_signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SignedPayinResult) Reset()         { *m = SignedPayinResult{} }
func (m *SignedPayinResult) String() string { return proto.CompactTextString(m) }
func (*SignedPayinResult) ProtoMessage()    {}
func (*SignedPayinResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{11}
}
func (m *SignedPayinResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedPayinResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedPayinResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedPayinResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedPayinResult.Merge(m, src)
}
func (m *SignedPayinResult) XXX_Size() int {
	return m.Size()
}
func (m *SignedPayinResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedPayinResult.DiscardUnknown(m)
}

var xxx_messageInfo_SignedPayinResult proto.InternalMessageInfo

func (m *SignedPayinResult) GetResult() *PayinResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *SignedPayinResult) GetEscrowSignature() []byte {
	if m != nil {
		return m.EscrowSignature
	}
	return nil
}

func (*SignedPayinResult) XXX_MessageName() string {
	return "escrow.SignedPayinResult"
}

type PayinStatus struct {
	Paid                 bool       `protobuf:"varint,1,opt,name=paid,proto3" json:"paid,omitempty"`
	SequenceId           int64      `protobuf:"varint,2,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	EscrowAddress        []byte     `protobuf:"bytes,3,opt,name=escrow_address,json=escrowAddress,proto3" json:"escrow_address,omitempty"`
	EscrowSignedTime     *time.Time `protobuf:"bytes,4,opt,name=escrow_signed_time,json=escrowSignedTime,proto3,stdtime" json:"escrow_signed_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PayinStatus) Reset()         { *m = PayinStatus{} }
func (m *PayinStatus) String() string { return proto.CompactTextString(m) }
func (*PayinStatus) ProtoMessage()    {}
func (*PayinStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{12}
}
func (m *PayinStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayinStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayinStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayinStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayinStatus.Merge(m, src)
}
func (m *PayinStatus) XXX_Size() int {
	return m.Size()
}
func (m *PayinStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PayinStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PayinStatus proto.InternalMessageInfo

func (m *PayinStatus) GetPaid() bool {
	if m != nil {
		return m.Paid
	}
	return false
}

func (m *PayinStatus) GetSequenceId() int64 {
	if m != nil {
		return m.SequenceId
	}
	return 0
}

func (m *PayinStatus) GetEscrowAddress() []byte {
	if m != nil {
		return m.EscrowAddress
	}
	return nil
}

func (m *PayinStatus) GetEscrowSignedTime() *time.Time {
	if m != nil {
		return m.EscrowSignedTime
	}
	return nil
}

func (*PayinStatus) XXX_MessageName() string {
	return "escrow.PayinStatus"
}

type SignedPayinStatus struct {
	Status               *PayinStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	EscrowSignature      []byte       `protobuf:"bytes,2,opt,name=escrow_signature,json=escrowSignature,proto3" json:"escrow_signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SignedPayinStatus) Reset()         { *m = SignedPayinStatus{} }
func (m *SignedPayinStatus) String() string { return proto.CompactTextString(m) }
func (*SignedPayinStatus) ProtoMessage()    {}
func (*SignedPayinStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{13}
}
func (m *SignedPayinStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedPayinStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedPayinStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedPayinStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedPayinStatus.Merge(m, src)
}
func (m *SignedPayinStatus) XXX_Size() int {
	return m.Size()
}
func (m *SignedPayinStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedPayinStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SignedPayinStatus proto.InternalMessageInfo

func (m *SignedPayinStatus) GetStatus() *PayinStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SignedPayinStatus) GetEscrowSignature() []byte {
	if m != nil {
		return m.EscrowSignature
	}
	return nil
}

func (*SignedPayinStatus) XXX_MessageName() string {
	return "escrow.SignedPayinStatus"
}

type PayoutStatus struct {
	FromAddress          []byte       `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
	ToAddress            []byte       `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	AuthAddress          []byte       `protobuf:"bytes,3,opt,name=auth_address,json=authAddress,proto3" json:"auth_address,omitempty"`
	Status               EscrowStatus `protobuf:"varint,4,opt,name=status,proto3,enum=escrow.EscrowStatus" json:"status,omitempty"`
	Amount               int64        `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	Collateral           int64        `protobuf:"varint,6,opt,name=collateral,proto3" json:"collateral,omitempty"`
	Withhold             int64        `protobuf:"varint,7,opt,name=withhold,proto3" json:"withhold,omitempty"`
	PaidAmount           int64        `protobuf:"varint,8,opt,name=paid_amount,json=paidAmount,proto3" json:"paid_amount,omitempty"`
	NumPaid              int32        `protobuf:"varint,9,opt,name=num_paid,json=numPaid,proto3" json:"num_paid,omitempty"`
	LeftAmount           int64        `protobuf:"varint,10,opt,name=left_amount,json=leftAmount,proto3" json:"left_amount,omitempty"`
	NumLeft              int32        `protobuf:"varint,11,opt,name=num_left,json=numLeft,proto3" json:"num_left,omitempty"`
	NextAmount           int64        `protobuf:"varint,12,opt,name=next_amount,json=nextAmount,proto3" json:"next_amount,omitempty"`
	LastPayoutTime       *time.Time   `protobuf:"bytes,13,opt,name=last_payout_time,json=lastPayoutTime,proto3,stdtime" json:"last_payout_time,omitempty"`
	NextPayoutTime       *time.Time   `protobuf:"bytes,14,opt,name=next_payout_time,json=nextPayoutTime,proto3,stdtime" json:"next_payout_time,omitempty"`
	EscrowAddress        []byte       `protobuf:"bytes,15,opt,name=escrow_address,json=escrowAddress,proto3" json:"escrow_address,omitempty"`
	EscrowSignTime       *time.Time   `protobuf:"bytes,16,opt,name=escrow_sign_time,json=escrowSignTime,proto3,stdtime" json:"escrow_sign_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PayoutStatus) Reset()         { *m = PayoutStatus{} }
func (m *PayoutStatus) String() string { return proto.CompactTextString(m) }
func (*PayoutStatus) ProtoMessage()    {}
func (*PayoutStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{14}
}
func (m *PayoutStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayoutStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayoutStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayoutStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayoutStatus.Merge(m, src)
}
func (m *PayoutStatus) XXX_Size() int {
	return m.Size()
}
func (m *PayoutStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PayoutStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PayoutStatus proto.InternalMessageInfo

func (m *PayoutStatus) GetFromAddress() []byte {
	if m != nil {
		return m.FromAddress
	}
	return nil
}

func (m *PayoutStatus) GetToAddress() []byte {
	if m != nil {
		return m.ToAddress
	}
	return nil
}

func (m *PayoutStatus) GetAuthAddress() []byte {
	if m != nil {
		return m.AuthAddress
	}
	return nil
}

func (m *PayoutStatus) GetStatus() EscrowStatus {
	if m != nil {
		return m.Status
	}
	return EscrowStatus_INITIATED
}

func (m *PayoutStatus) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *PayoutStatus) GetCollateral() int64 {
	if m != nil {
		return m.Collateral
	}
	return 0
}

func (m *PayoutStatus) GetWithhold() int64 {
	if m != nil {
		return m.Withhold
	}
	return 0
}

func (m *PayoutStatus) GetPaidAmount() int64 {
	if m != nil {
		return m.PaidAmount
	}
	return 0
}

func (m *PayoutStatus) GetNumPaid() int32 {
	if m != nil {
		return m.NumPaid
	}
	return 0
}

func (m *PayoutStatus) GetLeftAmount() int64 {
	if m != nil {
		return m.LeftAmount
	}
	return 0
}

func (m *PayoutStatus) GetNumLeft() int32 {
	if m != nil {
		return m.NumLeft
	}
	return 0
}

func (m *PayoutStatus) GetNextAmount() int64 {
	if m != nil {
		return m.NextAmount
	}
	return 0
}

func (m *PayoutStatus) GetLastPayoutTime() *time.Time {
	if m != nil {
		return m.LastPayoutTime
	}
	return nil
}

func (m *PayoutStatus) GetNextPayoutTime() *time.Time {
	if m != nil {
		return m.NextPayoutTime
	}
	return nil
}

func (m *PayoutStatus) GetEscrowAddress() []byte {
	if m != nil {
		return m.EscrowAddress
	}
	return nil
}

func (m *PayoutStatus) GetEscrowSignTime() *time.Time {
	if m != nil {
		return m.EscrowSignTime
	}
	return nil
}

func (*PayoutStatus) XXX_MessageName() string {
	return "escrow.PayoutStatus"
}

type SignedPayoutStatus struct {
	Status               *PayoutStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	EscrowSignature      []byte        `protobuf:"bytes,2,opt,name=escrow_signature,json=escrowSignature,proto3" json:"escrow_signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SignedPayoutStatus) Reset()         { *m = SignedPayoutStatus{} }
func (m *SignedPayoutStatus) String() string { return proto.CompactTextString(m) }
func (*SignedPayoutStatus) ProtoMessage()    {}
func (*SignedPayoutStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{15}
}
func (m *SignedPayoutStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedPayoutStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedPayoutStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedPayoutStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedPayoutStatus.Merge(m, src)
}
func (m *SignedPayoutStatus) XXX_Size() int {
	return m.Size()
}
func (m *SignedPayoutStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedPayoutStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SignedPayoutStatus proto.InternalMessageInfo

func (m *SignedPayoutStatus) GetStatus() *PayoutStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SignedPayoutStatus) GetEscrowSignature() []byte {
	if m != nil {
		return m.EscrowSignature
	}
	return nil
}

func (*SignedPayoutStatus) XXX_MessageName() string {
	return "escrow.SignedPayoutStatus"
}

type CancelContractRequest struct {
	ContractId           [][]byte `protobuf:"bytes,1,rep,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	AuthAddress          []byte   `protobuf:"bytes,2,opt,name=auth_address,json=authAddress,proto3" json:"auth_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CancelContractRequest) Reset()         { *m = CancelContractRequest{} }
func (m *CancelContractRequest) String() string { return proto.CompactTextString(m) }
func (*CancelContractRequest) ProtoMessage()    {}
func (*CancelContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{16}
}
func (m *CancelContractRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelContractRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelContractRequest.Merge(m, src)
}
func (m *CancelContractRequest) XXX_Size() int {
	return m.Size()
}
func (m *CancelContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CancelContractRequest proto.InternalMessageInfo

func (m *CancelContractRequest) GetContractId() [][]byte {
	if m != nil {
		return m.ContractId
	}
	return nil
}

func (m *CancelContractRequest) GetAuthAddress() []byte {
	if m != nil {
		return m.AuthAddress
	}
	return nil
}

func (*CancelContractRequest) XXX_MessageName() string {
	return "escrow.CancelContractRequest"
}

type SignedCancelRequest struct {
	Request              *CancelContractRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	AuthSignature        []byte                 `protobuf:"bytes,2,opt,name=auth_signature,json=authSignature,proto3" json:"auth_signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *SignedCancelRequest) Reset()         { *m = SignedCancelRequest{} }
func (m *SignedCancelRequest) String() string { return proto.CompactTextString(m) }
func (*SignedCancelRequest) ProtoMessage()    {}
func (*SignedCancelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{17}
}
func (m *SignedCancelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedCancelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedCancelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedCancelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedCancelRequest.Merge(m, src)
}
func (m *SignedCancelRequest) XXX_Size() int {
	return m.Size()
}
func (m *SignedCancelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedCancelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignedCancelRequest proto.InternalMessageInfo

func (m *SignedCancelRequest) GetRequest() *CancelContractRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *SignedCancelRequest) GetAuthSignature() []byte {
	if m != nil {
		return m.AuthSignature
	}
	return nil
}

func (*SignedCancelRequest) XXX_MessageName() string {
	return "escrow.SignedCancelRequest"
}

type CancelContractResult struct {
	ContractId           []byte     `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	EscrowId             int64      `protobuf:"varint,2,opt,name=escrow_id,json=escrowId,proto3" json:"escrow_id,omitempty"`
	Canceled             bool       `protobuf:"varint,3,opt,name=canceled,proto3" json:"canceled,omitempty"`
	EscrowAddress        []byte     `protobuf:"bytes,4,opt,name=escrow_address,json=escrowAddress,proto3" json:"escrow_address,omitempty"`
	EscrowSignedTime     *time.Time `protobuf:"bytes,5,opt,name=escrow_signed_time,json=escrowSignedTime,proto3,stdtime" json:"escrow_signed_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CancelContractResult) Reset()         { *m = CancelContractResult{} }
func (m *CancelContractResult) String() string { return proto.CompactTextString(m) }
func (*CancelContractResult) ProtoMessage()    {}
func (*CancelContractResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{18}
}
func (m *CancelContractResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelContractResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelContractResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelContractResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelContractResult.Merge(m, src)
}
func (m *CancelContractResult) XXX_Size() int {
	return m.Size()
}
func (m *CancelContractResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelContractResult.DiscardUnknown(m)
}

var xxx_messageInfo_CancelContractResult proto.InternalMessageInfo

func (m *CancelContractResult) GetContractId() []byte {
	if m != nil {
		return m.ContractId
	}
	return nil
}

func (m *CancelContractResult) GetEscrowId() int64 {
	if m != nil {
		return m.EscrowId
	}
	return 0
}

func (m *CancelContractResult) GetCanceled() bool {
	if m != nil {
		return m.Canceled
	}
	return false
}

func (m *CancelContractResult) GetEscrowAddress() []byte {
	if m != nil {
		return m.EscrowAddress
	}
	return nil
}

func (m *CancelContractResult) GetEscrowSignedTime() *time.Time {
	if m != nil {
		return m.EscrowSignedTime
	}
	return nil
}

func (*CancelContractResult) XXX_MessageName() string {
	return "escrow.CancelContractResult"
}

type SignedCancelContractResult struct {
	Result               *CancelContractResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	EscrowSignature      []byte                `protobuf:"bytes,2,opt,name=escrow_signature,json=escrowSignature,proto3" json:"escrow_signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SignedCancelContractResult) Reset()         { *m = SignedCancelContractResult{} }
func (m *SignedCancelContractResult) String() string { return proto.CompactTextString(m) }
func (*SignedCancelContractResult) ProtoMessage()    {}
func (*SignedCancelContractResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_92a6463c7f7e20b5, []int{19}
}
func (m *SignedCancelContractResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedCancelContractResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedCancelContractResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedCancelContractResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedCancelContractResult.Merge(m, src)
}
func (m *SignedCancelContractResult) XXX_Size() int {
	return m.Size()
}
func (m *SignedCancelContractResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedCancelContractResult.DiscardUnknown(m)
}

var xxx_messageInfo_SignedCancelContractResult proto.InternalMessageInfo

func (m *SignedCancelContractResult) GetResult() *CancelContractResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *SignedCancelContractResult) GetEscrowSignature() []byte {
	if m != nil {
		return m.EscrowSignature
	}
	return nil
}

func (*SignedCancelContractResult) XXX_MessageName() string {
	return "escrow.SignedCancelContractResult"
}
func init() {
	proto.RegisterEnum("escrow.TokenType", TokenType_name, TokenType_value)
	golang_proto.RegisterEnum("escrow.TokenType", TokenType_name, TokenType_value)
	proto.RegisterEnum("escrow.Schedule", Schedule_name, Schedule_value)
	golang_proto.RegisterEnum("escrow.Schedule", Schedule_name, Schedule_value)
	proto.RegisterEnum("escrow.EscrowStatus", EscrowStatus_name, EscrowStatus_value)
	golang_proto.RegisterEnum("escrow.EscrowStatus", EscrowStatus_name, EscrowStatus_value)
	proto.RegisterType((*ContractID)(nil), "escrow.ContractID")
	golang_proto.RegisterType((*ContractID)(nil), "escrow.ContractID")
	proto.RegisterType((*SignedContractID)(nil), "escrow.SignedContractID")
	golang_proto.RegisterType((*SignedContractID)(nil), "escrow.SignedContractID")
	proto.RegisterType((*EscrowContract)(nil), "escrow.EscrowContract")
	golang_proto.RegisterType((*EscrowContract)(nil), "escrow.EscrowContract")
	proto.RegisterType((*SignedEscrowContract)(nil), "escrow.SignedEscrowContract")
	golang_proto.RegisterType((*SignedEscrowContract)(nil), "escrow.SignedEscrowContract")
	proto.RegisterType((*EscrowContractRequest)(nil), "escrow.EscrowContractRequest")
	golang_proto.RegisterType((*EscrowContractRequest)(nil), "escrow.EscrowContractRequest")
	proto.RegisterType((*Escrow)(nil), "escrow.Escrow")
	golang_proto.RegisterType((*Escrow)(nil), "escrow.Escrow")
	proto.RegisterType((*SubmitContractResult)(nil), "escrow.SubmitContractResult")
	golang_proto.RegisterType((*SubmitContractResult)(nil), "escrow.SubmitContractResult")
	proto.RegisterType((*SignedSubmitContractResult)(nil), "escrow.SignedSubmitContractResult")
	golang_proto.RegisterType((*SignedSubmitContractResult)(nil), "escrow.SignedSubmitContractResult")
	proto.RegisterType((*PayinRquest)(nil), "escrow.PayinRquest")
	golang_proto.RegisterType((*PayinRquest)(nil), "escrow.PayinRquest")
	proto.RegisterType((*SignedPayinRquest)(nil), "escrow.SignedPayinRquest")
	golang_proto.RegisterType((*SignedPayinRquest)(nil), "escrow.SignedPayinRquest")
	proto.RegisterType((*PayinResult)(nil), "escrow.PayinResult")
	golang_proto.RegisterType((*PayinResult)(nil), "escrow.PayinResult")
	proto.RegisterType((*SignedPayinResult)(nil), "escrow.SignedPayinResult")
	golang_proto.RegisterType((*SignedPayinResult)(nil), "escrow.SignedPayinResult")
	proto.RegisterType((*PayinStatus)(nil), "escrow.PayinStatus")
	golang_proto.RegisterType((*PayinStatus)(nil), "escrow.PayinStatus")
	proto.RegisterType((*SignedPayinStatus)(nil), "escrow.SignedPayinStatus")
	golang_proto.RegisterType((*SignedPayinStatus)(nil), "escrow.SignedPayinStatus")
	proto.RegisterType((*PayoutStatus)(nil), "escrow.PayoutStatus")
	golang_proto.RegisterType((*PayoutStatus)(nil), "escrow.PayoutStatus")
	proto.RegisterType((*SignedPayoutStatus)(nil), "escrow.SignedPayoutStatus")
	golang_proto.RegisterType((*SignedPayoutStatus)(nil), "escrow.SignedPayoutStatus")
	proto.RegisterType((*CancelContractRequest)(nil), "escrow.CancelContractRequest")
	golang_proto.RegisterType((*CancelContractRequest)(nil), "escrow.CancelContractRequest")
	proto.RegisterType((*SignedCancelRequest)(nil), "escrow.SignedCancelRequest")
	golang_proto.RegisterType((*SignedCancelRequest)(nil), "escrow.SignedCancelRequest")
	proto.RegisterType((*CancelContractResult)(nil), "escrow.CancelContractResult")
	golang_proto.RegisterType((*CancelContractResult)(nil), "escrow.CancelContractResult")
	proto.RegisterType((*SignedCancelContractResult)(nil), "escrow.SignedCancelContractResult")
	golang_proto.RegisterType((*SignedCancelContractResult)(nil), "escrow.SignedCancelContractResult")
}

func init() { proto.RegisterFile("protos/escrow/escrow.proto", fileDescriptor_92a6463c7f7e20b5) }
func init() { golang_proto.RegisterFile("protos/escrow/escrow.proto", fileDescriptor_92a6463c7f7e20b5) }

var fileDescriptor_92a6463c7f7e20b5 = []byte{
	// 1347 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0x4f, 0x6f, 0x1b, 0x55,
	0x10, 0xef, 0xda, 0x89, 0xbd, 0x1e, 0x3b, 0xf6, 0xf6, 0x35, 0xad, 0x5c, 0xb7, 0x75, 0xc2, 0xa2,
	0x96, 0xd0, 0x3f, 0x2e, 0x0a, 0x95, 0x80, 0x03, 0x42, 0x8e, 0x63, 0x15, 0x57, 0x6e, 0x9a, 0x6e,
	0x5c, 0x44, 0xe1, 0x60, 0x6d, 0xbc, 0xcf, 0x8e, 0xd5, 0xf5, 0xae, 0xd9, 0x7d, 0x4b, 0xf1, 0x01,
	0x89, 0x8f, 0xc0, 0x11, 0x2e, 0x7c, 0x0f, 0x38, 0x71, 0xec, 0x05, 0xa9, 0x47, 0x6e, 0xa0, 0xf6,
	0xc0, 0xd7, 0x40, 0xef, 0xdf, 0xfe, 0xcb, 0x86, 0x98, 0x80, 0xe0, 0xe4, 0x7d, 0xf3, 0x7e, 0x33,
	0xef, 0xcd, 0xcc, 0xef, 0xcd, 0x8c, 0xa1, 0x31, 0xf7, 0x5c, 0xe2, 0xfa, 0x77, 0xb1, 0x3f, 0xf2,
	0xdc, 0xe7, 0xe2, 0xa7, 0xc5, 0x84, 0xa8, 0xc0, 0x57, 0x8d, 0x3b, 0x93, 0x29, 0x39, 0x0a, 0x0e,
	0x5b, 0x23, 0x77, 0x76, 0x77, 0xe2, 0x4e, 0xdc, 0xbb, 0x6c, 0xfb, 0x30, 0x18, 0xb3, 0x15, 0x5b,
	0xb0, 0x2f, 0xae, 0xd6, 0xd8, 0x98, 0xb8, 0xee, 0xc4, 0xc6, 0x11, 0x8a, 0x4c, 0x67, 0xd8, 0x27,
	0xe6, 0x6c, 0xce, 0x01, 0xfa, 0x7d, 0x80, 0x8e, 0xeb, 0x10, 0xcf, 0x1c, 0x91, 0xde, 0x2e, 0xda,
	0x80, 0xf2, 0x48, 0xac, 0x86, 0x53, 0xab, 0xae, 0x6c, 0x2a, 0x5b, 0x15, 0x03, 0xa4, 0xa8, 0x67,
	0xa1, 0x3a, 0x14, 0x4d, 0xcb, 0xf2, 0xb0, 0xef, 0xd7, 0x73, 0x6c, 0x53, 0x2e, 0xf5, 0x4f, 0x41,
	0x3b, 0x98, 0x4e, 0x1c, 0x6c, 0xc5, 0xcc, 0xdd, 0x80, 0x15, 0xcb, 0x24, 0x26, 0xb3, 0x53, 0xde,
	0x46, 0x2d, 0xe1, 0x51, 0x84, 0x30, 0xd8, 0x3e, 0xba, 0x0a, 0x25, 0x7f, 0x3a, 0x71, 0x4c, 0x12,
	0x78, 0x58, 0xd8, 0x8d, 0x04, 0xfa, 0x4f, 0x79, 0xa8, 0x76, 0x99, 0xa6, 0x54, 0x3c, 0xfd, 0x9e,
	0x6f, 0xc2, 0xda, 0x61, 0xb0, 0xc0, 0xde, 0x30, 0x79, 0xdb, 0x0a, 0x13, 0xb6, 0xb9, 0x0c, 0x5d,
	0x87, 0xaa, 0x8f, 0x6d, 0x3b, 0x86, 0xca, 0x33, 0xd4, 0x1a, 0x97, 0x4a, 0xd8, 0x1b, 0x50, 0x31,
	0x03, 0x72, 0x14, 0x82, 0x56, 0x18, 0xa8, 0x4c, 0x65, 0x12, 0x72, 0x09, 0x0a, 0xe6, 0xcc, 0x0d,
	0x1c, 0x52, 0x5f, 0xdd, 0x54, 0xb6, 0xf2, 0x86, 0x58, 0xa1, 0x5b, 0x70, 0x7e, 0xe4, 0xda, 0xb6,
	0x49, 0xb0, 0x67, 0xda, 0x43, 0x01, 0x29, 0x30, 0x88, 0x16, 0x6d, 0xb4, 0x39, 0xf8, 0x2d, 0xa8,
	0x3d, 0x9f, 0x92, 0xa3, 0x23, 0xd7, 0xb6, 0x24, 0xb4, 0xc8, 0xa0, 0x55, 0x29, 0x16, 0xc0, 0x77,
	0x00, 0x88, 0xfb, 0x0c, 0x3b, 0x43, 0xb2, 0x98, 0xe3, 0xba, 0xba, 0xa9, 0x6c, 0x55, 0xb7, 0xcf,
	0xcb, 0xe0, 0x0e, 0xe8, 0xce, 0x60, 0x31, 0xc7, 0x46, 0x89, 0xc8, 0x4f, 0xf4, 0x01, 0xd4, 0xe6,
	0xe6, 0xc2, 0x0d, 0xc8, 0xd0, 0x1f, 0x1d, 0x61, 0x2b, 0xb0, 0x71, 0xbd, 0xc4, 0xd4, 0x34, 0xa9,
	0x76, 0x20, 0xe4, 0x46, 0x95, 0x03, 0xe5, 0x9a, 0x86, 0xda, 0x09, 0x66, 0x43, 0x2e, 0xf5, 0xeb,
	0xb0, 0xa9, 0x6c, 0xad, 0x1a, 0xe0, 0x04, 0xb3, 0x7d, 0x2e, 0xa1, 0xc9, 0xf3, 0xf0, 0x18, 0x7b,
	0xd8, 0x19, 0xe1, 0x7a, 0x99, 0x27, 0x2f, 0x14, 0xe8, 0x3f, 0x28, 0xb0, 0xce, 0x79, 0x91, 0x4a,
	0xe1, 0x36, 0xa8, 0x32, 0x5f, 0x82, 0x1f, 0x97, 0xe4, 0x5d, 0x92, 0x48, 0x23, 0xc4, 0xd1, 0x08,
	0xf1, 0xac, 0xa6, 0xd9, 0x52, 0x65, 0xe2, 0x03, 0x29, 0x45, 0x6f, 0x83, 0x26, 0x32, 0x1b, 0x21,
	0x79, 0x6e, 0x6b, 0x5c, 0x1e, 0x42, 0xf5, 0xc7, 0x70, 0x31, 0x75, 0x1e, 0xfe, 0x22, 0xc0, 0x3e,
	0x41, 0xef, 0x27, 0x2e, 0x98, 0xdf, 0x2a, 0x6f, 0x5f, 0x0d, 0x83, 0x95, 0xe1, 0x50, 0x74, 0x4d,
	0xfd, 0x17, 0x05, 0x0a, 0x7c, 0xf3, 0x74, 0xa2, 0x5e, 0x81, 0x12, 0x37, 0x4a, 0xb7, 0x73, 0x2c,
	0xdd, 0x2a, 0x17, 0xf4, 0x2c, 0xca, 0xbc, 0xb1, 0xe7, 0xce, 0x52, 0xf4, 0x2c, 0x53, 0x99, 0x64,
	0xde, 0x35, 0xca, 0x85, 0x14, 0x35, 0x4b, 0xc4, 0xfd, 0x37, 0x89, 0xa9, 0xbf, 0xa4, 0x39, 0x0c,
	0x0e, 0x67, 0x53, 0x12, 0xc5, 0xc8, 0x0f, 0x6c, 0x82, 0x2e, 0x83, 0x3a, 0x37, 0x17, 0x53, 0x27,
	0x72, 0xad, 0xc8, 0xd6, 0x3d, 0x0b, 0xdd, 0x00, 0x51, 0xb1, 0xea, 0x39, 0x16, 0xbb, 0x6a, 0x32,
	0xb9, 0x86, 0xd8, 0xa5, 0x6f, 0x50, 0xf8, 0x9f, 0x7a, 0x83, 0x5c, 0x2a, 0xfd, 0xd8, 0x03, 0x24,
	0x60, 0x3e, 0x8b, 0xfd, 0x90, 0xd6, 0x31, 0xe6, 0x6e, 0x79, 0xbb, 0xd1, 0xe2, 0x45, 0xae, 0x25,
	0x8b, 0x5c, 0x6b, 0x20, 0x8b, 0xdc, 0xce, 0xca, 0xb7, 0xbf, 0x6d, 0x28, 0x86, 0xc6, 0x75, 0x79,
	0xda, 0xe8, 0xa6, 0xfe, 0x35, 0x34, 0xf8, 0x2a, 0xd3, 0xaf, 0x7b, 0x50, 0xf0, 0xd8, 0x97, 0x60,
	0x66, 0x94, 0xf8, 0x0c, 0xb4, 0x21, 0xb0, 0x94, 0x74, 0xb1, 0x3b, 0xc6, 0xe9, 0x59, 0x8b, 0xce,
	0xe7, 0xa4, 0x7b, 0x08, 0xe5, 0x7d, 0x1a, 0x28, 0x83, 0x53, 0xed, 0x2f, 0xe2, 0xb8, 0x4c, 0x21,
	0xd3, 0x9f, 0xc1, 0x79, 0xee, 0x4d, 0xdc, 0xe8, 0x1d, 0x28, 0x7a, 0x9c, 0xca, 0xc2, 0x8b, 0x0b,
	0xd2, 0x8b, 0x18, 0xca, 0x90, 0x98, 0xa5, 0xdf, 0x96, 0xfe, 0xab, 0x22, 0x2f, 0x7f, 0x2a, 0x09,
	0x22, 0xf6, 0xe5, 0x12, 0xec, 0xdb, 0x80, 0xb2, 0x4f, 0x8f, 0x75, 0x46, 0x98, 0x6a, 0xe5, 0xd9,
	0x26, 0x48, 0x51, 0xcf, 0xca, 0x60, 0xc5, 0xca, 0xf2, 0xac, 0x58, 0x3d, 0x33, 0x2b, 0x52, 0x71,
	0xe4, 0xfe, 0xdd, 0x4a, 0x91, 0x21, 0x15, 0xc6, 0x33, 0x73, 0xe0, 0x47, 0x19, 0xc7, 0x03, 0x62,
	0x92, 0xc0, 0x47, 0x08, 0x56, 0xe6, 0xa6, 0x88, 0xa1, 0x6a, 0xb0, 0xef, 0x74, 0xa0, 0x72, 0x4b,
	0x04, 0xea, 0x3f, 0x79, 0x3e, 0xc9, 0x40, 0x09, 0x07, 0x6e, 0x41, 0xc1, 0x67, 0x5f, 0x99, 0x81,
	0xe2, 0x20, 0x43, 0x40, 0xfe, 0x4e, 0xa0, 0xbe, 0x5f, 0x85, 0x0a, 0x6f, 0x36, 0xe2, 0xa0, 0x74,
	0x59, 0x54, 0x4e, 0x2b, 0x8b, 0xb9, 0x74, 0x59, 0x4c, 0xb7, 0xf4, 0xfc, 0xf1, 0x96, 0x7e, 0x3b,
	0xf4, 0x66, 0x85, 0x75, 0xca, 0xf5, 0x64, 0x01, 0x4b, 0xb9, 0x73, 0x52, 0x9d, 0x6d, 0x02, 0x44,
	0xe5, 0x54, 0x14, 0xd8, 0x98, 0x04, 0x35, 0x40, 0x95, 0xcd, 0x5d, 0x34, 0xfb, 0x70, 0x4d, 0x93,
	0x4f, 0x49, 0x20, 0xab, 0xb3, 0xca, 0x95, 0xa9, 0x48, 0xcc, 0x01, 0x97, 0x41, 0xe5, 0xad, 0x79,
	0x6a, 0xb1, 0x76, 0xbe, 0x6a, 0x14, 0x59, 0x5f, 0xe6, 0xc4, 0xb1, 0xf1, 0x98, 0x48, 0x5d, 0xe0,
	0xba, 0x54, 0x94, 0xd4, 0xa5, 0x12, 0xd6, 0xb4, 0xb9, 0x6e, 0x1f, 0x8f, 0xd9, 0xeb, 0x74, 0xf0,
	0x57, 0xa1, 0x6e, 0x85, 0xeb, 0x52, 0x91, 0xd0, 0x7d, 0x00, 0x9a, 0x6d, 0xfa, 0x44, 0xcc, 0x04,
	0x9c, 0x4b, 0x6b, 0x4b, 0x72, 0xa9, 0x4a, 0x35, 0x79, 0x36, 0xe9, 0x16, 0xb5, 0xc5, 0x0e, 0x8b,
	0xdb, 0xaa, 0x2e, 0x6b, 0x8b, 0x6a, 0xc6, 0x6c, 0x1d, 0x7f, 0x0c, 0xb5, 0xac, 0xc7, 0xf0, 0x20,
	0x41, 0x3d, 0x7e, 0xa4, 0xb6, 0xec, 0x91, 0x11, 0x39, 0xd9, 0x43, 0x98, 0x01, 0x0a, 0x1f, 0x42,
	0x44, 0xd0, 0xdb, 0xa9, 0x97, 0xb0, 0x1e, 0x7b, 0x09, 0x21, 0xea, 0x2c, 0x4f, 0xe1, 0x73, 0xb8,
	0xd8, 0x31, 0x9d, 0x11, 0xb6, 0xd3, 0xc3, 0xca, 0xb1, 0x39, 0x23, 0x9f, 0x9a, 0x33, 0xd2, 0x8c,
	0xcf, 0x1d, 0x63, 0xbc, 0x1e, 0xc0, 0x05, 0x31, 0xc1, 0xb3, 0x23, 0xa4, 0xe9, 0xf7, 0xd2, 0x7d,
	0xe4, 0x5a, 0x38, 0xc7, 0x67, 0x5d, 0x25, 0xea, 0x28, 0xd7, 0xa1, 0xca, 0x8e, 0x4c, 0x7b, 0xb5,
	0x46, 0xa5, 0x91, 0x4f, 0x7f, 0x28, 0xb0, 0x9e, 0xb6, 0xc4, 0x6a, 0xe9, 0x3f, 0x9b, 0x9d, 0x1a,
	0xa0, 0x8e, 0x98, 0x55, 0xcc, 0x1b, 0x8c, 0x6a, 0x84, 0xeb, 0xff, 0xab, 0xbd, 0x84, 0x43, 0x47,
	0xa6, 0xbb, 0x27, 0x0e, 0x1d, 0x59, 0xe8, 0x33, 0x34, 0x9c, 0x9b, 0xeb, 0x50, 0x0a, 0xff, 0x1c,
	0xa0, 0x22, 0xe4, 0x77, 0x06, 0x03, 0xed, 0xdc, 0xcd, 0x7b, 0xa0, 0x86, 0xb3, 0x7e, 0x19, 0x8a,
	0x0f, 0x1f, 0xed, 0x0d, 0x3e, 0xee, 0x3f, 0xd5, 0xce, 0xa1, 0x35, 0x28, 0x3d, 0x7e, 0xd2, 0x36,
	0x06, 0x5d, 0xa3, 0xff, 0x54, 0x53, 0x50, 0x05, 0xd4, 0xf6, 0xde, 0xde, 0x93, 0x76, 0xbf, 0xff,
	0x54, 0xcb, 0xdd, 0xec, 0x40, 0x25, 0x5e, 0x07, 0x29, 0xb8, 0xb7, 0xd7, 0x1b, 0xf4, 0xda, 0x83,
	0xee, 0xae, 0x76, 0x0e, 0x01, 0x14, 0xda, 0x9d, 0x41, 0xef, 0x93, 0x2e, 0x57, 0xec, 0xb4, 0xf7,
	0x3a, 0xdd, 0x7e, 0x77, 0x57, 0xcb, 0xd1, 0x9d, 0x4e, 0xff, 0xd1, 0x41, 0x77, 0x57, 0xcb, 0x6f,
	0x7f, 0x93, 0x87, 0x35, 0x61, 0x05, 0x7b, 0x5f, 0x4e, 0x47, 0x18, 0x0d, 0xa0, 0x96, 0x1c, 0xb1,
	0x7c, 0x74, 0xed, 0x84, 0x7f, 0x05, 0x9c, 0x64, 0x0d, 0x3d, 0x39, 0x93, 0x67, 0x8e, 0x73, 0x1f,
	0xc2, 0xea, 0xbe, 0xb9, 0xe8, 0x39, 0xe8, 0x72, 0x12, 0x1c, 0x9b, 0x83, 0x1a, 0x99, 0x5b, 0x52,
	0xbd, 0xd0, 0xf3, 0x59, 0x55, 0xad, 0x27, 0x41, 0xd1, 0xff, 0xd8, 0x4c, 0x75, 0x11, 0x9a, 0xfb,
	0x50, 0xbb, 0x8f, 0x69, 0x99, 0x7a, 0x14, 0xd6, 0x87, 0x93, 0xed, 0x34, 0x8e, 0xd9, 0x89, 0xaa,
	0x8a, 0x01, 0xb5, 0x24, 0x15, 0x7c, 0x74, 0x25, 0x65, 0x28, 0xfe, 0x70, 0xd3, 0xa1, 0xc9, 0xa2,
	0xd1, 0xce, 0x47, 0x2f, 0x5e, 0x35, 0x95, 0x97, 0xaf, 0x9a, 0xca, 0xef, 0xaf, 0x9a, 0xca, 0x77,
	0xaf, 0x9b, 0xca, 0xcf, 0xaf, 0x9b, 0xca, 0x8b, 0xd7, 0x4d, 0x05, 0xaa, 0x53, 0xb7, 0x75, 0x48,
	0xc6, 0xbe, 0x30, 0xb2, 0x53, 0xe6, 0xf1, 0xdf, 0xa7, 0x74, 0xdf, 0x57, 0x3e, 0x13, 0xf3, 0xfb,
	0x61, 0x81, 0xf1, 0xff, 0xdd, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xe5, 0x33, 0xa2, 0xa3, 0xbc,
	0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EscrowServiceClient is the client API for EscrowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EscrowServiceClient interface {
	// buyer submit contracts to escrow after buyer and seller agreed contract
	// one contract is one buyer to one seller, and is one escrow in escrow service
	// buyer can submit multiple contracts in one request
	// return same number of results as request contracts
	SubmitContracts(ctx context.Context, in *EscrowContractRequest, opts ...grpc.CallOption) (*SignedSubmitContractResult, error)
	// after submit contract, buyer request to pay in
	// escrow will transfer contract amount from buyer wallet to escrow wallet
	PayIn(ctx context.Context, in *SignedPayinRquest, opts ...grpc.CallOption) (*SignedPayinResult, error)
	// seller use this to check if a contract is paid in
	IsPaid(ctx context.Context, in *SignedContractID, opts ...grpc.CallOption) (*SignedPayinStatus, error)
	// check escrow pay out to seller status of a contract
	GetPayOutStatus(ctx context.Context, in *SignedContractID, opts ...grpc.CallOption) (*SignedPayoutStatus, error)
	// auth request to cancel the contract
	// escrow will cancel the left payments to seller
	CancelContracts(ctx context.Context, in *SignedCancelRequest, opts ...grpc.CallOption) (*SignedCancelContractResult, error)
}

type escrowServiceClient struct {
	cc *grpc.ClientConn
}

func NewEscrowServiceClient(cc *grpc.ClientConn) EscrowServiceClient {
	return &escrowServiceClient{cc}
}

func (c *escrowServiceClient) SubmitContracts(ctx context.Context, in *EscrowContractRequest, opts ...grpc.CallOption) (*SignedSubmitContractResult, error) {
	out := new(SignedSubmitContractResult)
	err := c.cc.Invoke(ctx, "/escrow.EscrowService/SubmitContracts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *escrowServiceClient) PayIn(ctx context.Context, in *SignedPayinRquest, opts ...grpc.CallOption) (*SignedPayinResult, error) {
	out := new(SignedPayinResult)
	err := c.cc.Invoke(ctx, "/escrow.EscrowService/PayIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *escrowServiceClient) IsPaid(ctx context.Context, in *SignedContractID, opts ...grpc.CallOption) (*SignedPayinStatus, error) {
	out := new(SignedPayinStatus)
	err := c.cc.Invoke(ctx, "/escrow.EscrowService/IsPaid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *escrowServiceClient) GetPayOutStatus(ctx context.Context, in *SignedContractID, opts ...grpc.CallOption) (*SignedPayoutStatus, error) {
	out := new(SignedPayoutStatus)
	err := c.cc.Invoke(ctx, "/escrow.EscrowService/GetPayOutStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *escrowServiceClient) CancelContracts(ctx context.Context, in *SignedCancelRequest, opts ...grpc.CallOption) (*SignedCancelContractResult, error) {
	out := new(SignedCancelContractResult)
	err := c.cc.Invoke(ctx, "/escrow.EscrowService/CancelContracts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EscrowServiceServer is the server API for EscrowService service.
type EscrowServiceServer interface {
	// buyer submit contracts to escrow after buyer and seller agreed contract
	// one contract is one buyer to one seller, and is one escrow in escrow service
	// buyer can submit multiple contracts in one request
	// return same number of results as request contracts
	SubmitContracts(context.Context, *EscrowContractRequest) (*SignedSubmitContractResult, error)
	// after submit contract, buyer request to pay in
	// escrow will transfer contract amount from buyer wallet to escrow wallet
	PayIn(context.Context, *SignedPayinRquest) (*SignedPayinResult, error)
	// seller use this to check if a contract is paid in
	IsPaid(context.Context, *SignedContractID) (*SignedPayinStatus, error)
	// check escrow pay out to seller status of a contract
	GetPayOutStatus(context.Context, *SignedContractID) (*SignedPayoutStatus, error)
	// auth request to cancel the contract
	// escrow will cancel the left payments to seller
	CancelContracts(context.Context, *SignedCancelRequest) (*SignedCancelContractResult, error)
}

// UnimplementedEscrowServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEscrowServiceServer struct {
}

func (*UnimplementedEscrowServiceServer) SubmitContracts(ctx context.Context, req *EscrowContractRequest) (*SignedSubmitContractResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitContracts not implemented")
}
func (*UnimplementedEscrowServiceServer) PayIn(ctx context.Context, req *SignedPayinRquest) (*SignedPayinResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayIn not implemented")
}
func (*UnimplementedEscrowServiceServer) IsPaid(ctx context.Context, req *SignedContractID) (*SignedPayinStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPaid not implemented")
}
func (*UnimplementedEscrowServiceServer) GetPayOutStatus(ctx context.Context, req *SignedContractID) (*SignedPayoutStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayOutStatus not implemented")
}
func (*UnimplementedEscrowServiceServer) CancelContracts(ctx context.Context, req *SignedCancelRequest) (*SignedCancelContractResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelContracts not implemented")
}

func RegisterEscrowServiceServer(s *grpc.Server, srv EscrowServiceServer) {
	s.RegisterService(&_EscrowService_serviceDesc, srv)
}

func _EscrowService_SubmitContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EscrowContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscrowServiceServer).SubmitContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/escrow.EscrowService/SubmitContracts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscrowServiceServer).SubmitContracts(ctx, req.(*EscrowContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EscrowService_PayIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedPayinRquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscrowServiceServer).PayIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/escrow.EscrowService/PayIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscrowServiceServer).PayIn(ctx, req.(*SignedPayinRquest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EscrowService_IsPaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedContractID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscrowServiceServer).IsPaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/escrow.EscrowService/IsPaid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscrowServiceServer).IsPaid(ctx, req.(*SignedContractID))
	}
	return interceptor(ctx, in, info, handler)
}

func _EscrowService_GetPayOutStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedContractID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscrowServiceServer).GetPayOutStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/escrow.EscrowService/GetPayOutStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscrowServiceServer).GetPayOutStatus(ctx, req.(*SignedContractID))
	}
	return interceptor(ctx, in, info, handler)
}

func _EscrowService_CancelContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EscrowServiceServer).CancelContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/escrow.EscrowService/CancelContracts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EscrowServiceServer).CancelContracts(ctx, req.(*SignedCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EscrowService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "escrow.EscrowService",
	HandlerType: (*EscrowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitContracts",
			Handler:    _EscrowService_SubmitContracts_Handler,
		},
		{
			MethodName: "PayIn",
			Handler:    _EscrowService_PayIn_Handler,
		},
		{
			MethodName: "IsPaid",
			Handler:    _EscrowService_IsPaid_Handler,
		},
		{
			MethodName: "GetPayOutStatus",
			Handler:    _EscrowService_GetPayOutStatus_Handler,
		},
		{
			MethodName: "CancelContracts",
			Handler:    _EscrowService_CancelContracts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/escrow/escrow.proto",
}

func (m *ContractID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractId) > 0 {
		i -= len(m.ContractId)
		copy(dAtA[i:], m.ContractId)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.ContractId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignedContractID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedContractID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedContractID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEscrow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EscrowContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EscrowContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EscrowContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reference) > 0 {
		i -= len(m.Reference)
		copy(dAtA[i:], m.Reference)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.Reference)))
		i--
		dAtA[i] = 0x5a
	}
	if m.NumPayouts != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.NumPayouts))
		i--
		dAtA[i] = 0x50
	}
	if m.PayoutSchedule != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.PayoutSchedule))
		i--
		dAtA[i] = 0x48
	}
	if m.TokenType != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.TokenType))
		i--
		dAtA[i] = 0x40
	}
	if m.WithholdAmount != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.WithholdAmount))
		i--
		dAtA[i] = 0x38
	}
	if m.CollateralAmount != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.CollateralAmount))
		i--
		dAtA[i] = 0x30
	}
	if m.Amount != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.AuthAddress) > 0 {
		i -= len(m.AuthAddress)
		copy(dAtA[i:], m.AuthAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.AuthAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SellerAddress) > 0 {
		i -= len(m.SellerAddress)
		copy(dAtA[i:], m.SellerAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.SellerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BuyerAddress) > 0 {
		i -= len(m.BuyerAddress)
		copy(dAtA[i:], m.BuyerAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.BuyerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractId) > 0 {
		i -= len(m.ContractId)
		copy(dAtA[i:], m.ContractId)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.ContractId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignedEscrowContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedEscrowContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedEscrowContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SellerSignature) > 0 {
		i -= len(m.SellerSignature)
		copy(dAtA[i:], m.SellerSignature)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.SellerSignature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BuyerSignature) > 0 {
		i -= len(m.BuyerSignature)
		copy(dAtA[i:], m.BuyerSignature)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.BuyerSignature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Contract != nil {
		{
			size, err := m.Contract.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEscrow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EscrowContractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EscrowContractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EscrowContractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Contract) > 0 {
		for iNdEx := len(m.Contract) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contract[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEscrow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Escrow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Escrow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Escrow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CollateralAmount != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.CollateralAmount))
		i--
		dAtA[i] = 0x30
	}
	if m.Amount != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EscrowId != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.EscrowId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ContractId) > 0 {
		i -= len(m.ContractId)
		copy(dAtA[i:], m.ContractId)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.ContractId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubmitContractResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitContractResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmitContractResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EscrowSignedTime != nil {
		n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.EscrowSignedTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.EscrowSignedTime):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintEscrow(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EscrowAddress) > 0 {
		i -= len(m.EscrowAddress)
		copy(dAtA[i:], m.EscrowAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.EscrowAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Escrow) > 0 {
		for iNdEx := len(m.Escrow) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Escrow[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEscrow(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.PayinId) > 0 {
		i -= len(m.PayinId)
		copy(dAtA[i:], m.PayinId)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.PayinId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignedSubmitContractResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedSubmitContractResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedSubmitContractResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EscrowSignature) > 0 {
		i -= len(m.EscrowSignature)
		copy(dAtA[i:], m.EscrowSignature)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.EscrowSignature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEscrow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PayinRquest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayinRquest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayinRquest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BuyerAddress) > 0 {
		i -= len(m.BuyerAddress)
		copy(dAtA[i:], m.BuyerAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.BuyerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PayinId) > 0 {
		i -= len(m.PayinId)
		copy(dAtA[i:], m.PayinId)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.PayinId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignedPayinRquest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedPayinRquest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedPayinRquest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BuyerSignature) > 0 {
		i -= len(m.BuyerSignature)
		copy(dAtA[i:], m.BuyerSignature)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.BuyerSignature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEscrow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PayinResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayinResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayinResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EscrowSignedTime != nil {
		n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.EscrowSignedTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.EscrowSignedTime):])
		if err6 != nil {
			return 0, err6
		}
		i -= n6
		i = encodeVarintEscrow(dAtA, i, uint64(n6))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EscrowAddress) > 0 {
		i -= len(m.EscrowAddress)
		copy(dAtA[i:], m.EscrowAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.EscrowAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.SequenceId != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.SequenceId))
		i--
		dAtA[i] = 0x18
	}
	if m.Amount != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PayinId) > 0 {
		i -= len(m.PayinId)
		copy(dAtA[i:], m.PayinId)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.PayinId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignedPayinResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedPayinResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedPayinResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EscrowSignature) > 0 {
		i -= len(m.EscrowSignature)
		copy(dAtA[i:], m.EscrowSignature)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.EscrowSignature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEscrow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PayinStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayinStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayinStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EscrowSignedTime != nil {
		n8, err8 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.EscrowSignedTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.EscrowSignedTime):])
		if err8 != nil {
			return 0, err8
		}
		i -= n8
		i = encodeVarintEscrow(dAtA, i, uint64(n8))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EscrowAddress) > 0 {
		i -= len(m.EscrowAddress)
		copy(dAtA[i:], m.EscrowAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.EscrowAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SequenceId != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.SequenceId))
		i--
		dAtA[i] = 0x10
	}
	if m.Paid {
		i--
		if m.Paid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SignedPayinStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedPayinStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedPayinStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EscrowSignature) > 0 {
		i -= len(m.EscrowSignature)
		copy(dAtA[i:], m.EscrowSignature)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.EscrowSignature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEscrow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PayoutStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayoutStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayoutStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EscrowSignTime != nil {
		n10, err10 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.EscrowSignTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.EscrowSignTime):])
		if err10 != nil {
			return 0, err10
		}
		i -= n10
		i = encodeVarintEscrow(dAtA, i, uint64(n10))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.EscrowAddress) > 0 {
		i -= len(m.EscrowAddress)
		copy(dAtA[i:], m.EscrowAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.EscrowAddress)))
		i--
		dAtA[i] = 0x7a
	}
	if m.NextPayoutTime != nil {
		n11, err11 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.NextPayoutTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.NextPayoutTime):])
		if err11 != nil {
			return 0, err11
		}
		i -= n11
		i = encodeVarintEscrow(dAtA, i, uint64(n11))
		i--
		dAtA[i] = 0x72
	}
	if m.LastPayoutTime != nil {
		n12, err12 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.LastPayoutTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastPayoutTime):])
		if err12 != nil {
			return 0, err12
		}
		i -= n12
		i = encodeVarintEscrow(dAtA, i, uint64(n12))
		i--
		dAtA[i] = 0x6a
	}
	if m.NextAmount != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.NextAmount))
		i--
		dAtA[i] = 0x60
	}
	if m.NumLeft != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.NumLeft))
		i--
		dAtA[i] = 0x58
	}
	if m.LeftAmount != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.LeftAmount))
		i--
		dAtA[i] = 0x50
	}
	if m.NumPaid != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.NumPaid))
		i--
		dAtA[i] = 0x48
	}
	if m.PaidAmount != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.PaidAmount))
		i--
		dAtA[i] = 0x40
	}
	if m.Withhold != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.Withhold))
		i--
		dAtA[i] = 0x38
	}
	if m.Collateral != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.Collateral))
		i--
		dAtA[i] = 0x30
	}
	if m.Amount != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x28
	}
	if m.Status != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.AuthAddress) > 0 {
		i -= len(m.AuthAddress)
		copy(dAtA[i:], m.AuthAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.AuthAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignedPayoutStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedPayoutStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedPayoutStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EscrowSignature) > 0 {
		i -= len(m.EscrowSignature)
		copy(dAtA[i:], m.EscrowSignature)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.EscrowSignature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != nil {
		{
			size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEscrow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CancelContractRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelContractRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelContractRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AuthAddress) > 0 {
		i -= len(m.AuthAddress)
		copy(dAtA[i:], m.AuthAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.AuthAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractId) > 0 {
		for iNdEx := len(m.ContractId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ContractId[iNdEx])
			copy(dAtA[i:], m.ContractId[iNdEx])
			i = encodeVarintEscrow(dAtA, i, uint64(len(m.ContractId[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SignedCancelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedCancelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedCancelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AuthSignature) > 0 {
		i -= len(m.AuthSignature)
		copy(dAtA[i:], m.AuthSignature)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.AuthSignature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Request != nil {
		{
			size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEscrow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CancelContractResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelContractResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelContractResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EscrowSignedTime != nil {
		n15, err15 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.EscrowSignedTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.EscrowSignedTime):])
		if err15 != nil {
			return 0, err15
		}
		i -= n15
		i = encodeVarintEscrow(dAtA, i, uint64(n15))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EscrowAddress) > 0 {
		i -= len(m.EscrowAddress)
		copy(dAtA[i:], m.EscrowAddress)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.EscrowAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.Canceled {
		i--
		if m.Canceled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.EscrowId != 0 {
		i = encodeVarintEscrow(dAtA, i, uint64(m.EscrowId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ContractId) > 0 {
		i -= len(m.ContractId)
		copy(dAtA[i:], m.ContractId)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.ContractId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignedCancelContractResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedCancelContractResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedCancelContractResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EscrowSignature) > 0 {
		i -= len(m.EscrowSignature)
		copy(dAtA[i:], m.EscrowSignature)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.EscrowSignature)))
		i--
		dAtA[i] = 0x12
	}
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEscrow(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEscrow(dAtA []byte, offset int, v uint64) int {
	offset -= sovEscrow(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ContractID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractId)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedContractID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EscrowContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractId)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.BuyerAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.SellerAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.AuthAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovEscrow(uint64(m.Amount))
	}
	if m.CollateralAmount != 0 {
		n += 1 + sovEscrow(uint64(m.CollateralAmount))
	}
	if m.WithholdAmount != 0 {
		n += 1 + sovEscrow(uint64(m.WithholdAmount))
	}
	if m.TokenType != 0 {
		n += 1 + sovEscrow(uint64(m.TokenType))
	}
	if m.PayoutSchedule != 0 {
		n += 1 + sovEscrow(uint64(m.PayoutSchedule))
	}
	if m.NumPayouts != 0 {
		n += 1 + sovEscrow(uint64(m.NumPayouts))
	}
	l = len(m.Reference)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedEscrowContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Contract != nil {
		l = m.Contract.Size()
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.BuyerSignature)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.SellerSignature)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EscrowContractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Contract) > 0 {
		for _, e := range m.Contract {
			l = e.Size()
			n += 1 + l + sovEscrow(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Escrow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractId)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.EscrowId != 0 {
		n += 1 + sovEscrow(uint64(m.EscrowId))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovEscrow(uint64(m.Amount))
	}
	if m.CollateralAmount != 0 {
		n += 1 + sovEscrow(uint64(m.CollateralAmount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubmitContractResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PayinId)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if len(m.Escrow) > 0 {
		for _, e := range m.Escrow {
			l = e.Size()
			n += 1 + l + sovEscrow(uint64(l))
		}
	}
	l = len(m.EscrowAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.EscrowSignedTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.EscrowSignedTime)
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedSubmitContractResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.EscrowSignature)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayinRquest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PayinId)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.BuyerAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedPayinRquest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.BuyerSignature)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayinResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PayinId)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovEscrow(uint64(m.Amount))
	}
	if m.SequenceId != 0 {
		n += 1 + sovEscrow(uint64(m.SequenceId))
	}
	l = len(m.EscrowAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.EscrowSignedTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.EscrowSignedTime)
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedPayinResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.EscrowSignature)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayinStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Paid {
		n += 2
	}
	if m.SequenceId != 0 {
		n += 1 + sovEscrow(uint64(m.SequenceId))
	}
	l = len(m.EscrowAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.EscrowSignedTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.EscrowSignedTime)
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedPayinStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.EscrowSignature)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayoutStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.AuthAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovEscrow(uint64(m.Status))
	}
	if m.Amount != 0 {
		n += 1 + sovEscrow(uint64(m.Amount))
	}
	if m.Collateral != 0 {
		n += 1 + sovEscrow(uint64(m.Collateral))
	}
	if m.Withhold != 0 {
		n += 1 + sovEscrow(uint64(m.Withhold))
	}
	if m.PaidAmount != 0 {
		n += 1 + sovEscrow(uint64(m.PaidAmount))
	}
	if m.NumPaid != 0 {
		n += 1 + sovEscrow(uint64(m.NumPaid))
	}
	if m.LeftAmount != 0 {
		n += 1 + sovEscrow(uint64(m.LeftAmount))
	}
	if m.NumLeft != 0 {
		n += 1 + sovEscrow(uint64(m.NumLeft))
	}
	if m.NextAmount != 0 {
		n += 1 + sovEscrow(uint64(m.NextAmount))
	}
	if m.LastPayoutTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.LastPayoutTime)
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.NextPayoutTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.NextPayoutTime)
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.EscrowAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.EscrowSignTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.EscrowSignTime)
		n += 2 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedPayoutStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.EscrowSignature)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CancelContractRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ContractId) > 0 {
		for _, b := range m.ContractId {
			l = len(b)
			n += 1 + l + sovEscrow(uint64(l))
		}
	}
	l = len(m.AuthAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedCancelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.AuthSignature)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CancelContractResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractId)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.EscrowId != 0 {
		n += 1 + sovEscrow(uint64(m.EscrowId))
	}
	if m.Canceled {
		n += 2
	}
	l = len(m.EscrowAddress)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.EscrowSignedTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.EscrowSignedTime)
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedCancelContractResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.EscrowSignature)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEscrow(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEscrow(x uint64) (n int) {
	return sovEscrow(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ContractID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractId = append(m.ContractId[:0], dAtA[iNdEx:postIndex]...)
			if m.ContractId == nil {
				m.ContractId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedContractID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedContractID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedContractID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &ContractID{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EscrowContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EscrowContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EscrowContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractId = append(m.ContractId[:0], dAtA[iNdEx:postIndex]...)
			if m.ContractId == nil {
				m.ContractId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerAddress = append(m.BuyerAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.BuyerAddress == nil {
				m.BuyerAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerAddress = append(m.SellerAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.SellerAddress == nil {
				m.SellerAddress = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthAddress = append(m.AuthAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.AuthAddress == nil {
				m.AuthAddress = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralAmount", wireType)
			}
			m.CollateralAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollateralAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithholdAmount", wireType)
			}
			m.WithholdAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithholdAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenType", wireType)
			}
			m.TokenType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenType |= TokenType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayoutSchedule", wireType)
			}
			m.PayoutSchedule = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayoutSchedule |= Schedule(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumPayouts", wireType)
			}
			m.NumPayouts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumPayouts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reference", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reference = append(m.Reference[:0], dAtA[iNdEx:postIndex]...)
			if m.Reference == nil {
				m.Reference = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedEscrowContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedEscrowContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedEscrowContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contract == nil {
				m.Contract = &EscrowContract{}
			}
			if err := m.Contract.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerSignature = append(m.BuyerSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.BuyerSignature == nil {
				m.BuyerSignature = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellerSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellerSignature = append(m.SellerSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.SellerSignature == nil {
				m.SellerSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EscrowContractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EscrowContractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EscrowContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = append(m.Contract, &SignedEscrowContract{})
			if err := m.Contract[len(m.Contract)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Escrow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Escrow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Escrow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractId = append(m.ContractId[:0], dAtA[iNdEx:postIndex]...)
			if m.ContractId == nil {
				m.ContractId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowId", wireType)
			}
			m.EscrowId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EscrowId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = append(m.FromAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.FromAddress == nil {
				m.FromAddress = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = append(m.ToAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.ToAddress == nil {
				m.ToAddress = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralAmount", wireType)
			}
			m.CollateralAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollateralAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitContractResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitContractResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitContractResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayinId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayinId = append(m.PayinId[:0], dAtA[iNdEx:postIndex]...)
			if m.PayinId == nil {
				m.PayinId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Escrow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Escrow = append(m.Escrow, &Escrow{})
			if err := m.Escrow[len(m.Escrow)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowAddress = append(m.EscrowAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.EscrowAddress == nil {
				m.EscrowAddress = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowSignedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EscrowSignedTime == nil {
				m.EscrowSignedTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.EscrowSignedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedSubmitContractResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedSubmitContractResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedSubmitContractResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &SubmitContractResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowSignature = append(m.EscrowSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.EscrowSignature == nil {
				m.EscrowSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayinRquest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayinRquest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayinRquest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayinId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayinId = append(m.PayinId[:0], dAtA[iNdEx:postIndex]...)
			if m.PayinId == nil {
				m.PayinId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerAddress = append(m.BuyerAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.BuyerAddress == nil {
				m.BuyerAddress = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedPayinRquest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedPayinRquest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedPayinRquest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &PayinRquest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyerSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyerSignature = append(m.BuyerSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.BuyerSignature == nil {
				m.BuyerSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayinResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayinResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayinResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayinId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayinId = append(m.PayinId[:0], dAtA[iNdEx:postIndex]...)
			if m.PayinId == nil {
				m.PayinId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceId", wireType)
			}
			m.SequenceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowAddress = append(m.EscrowAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.EscrowAddress == nil {
				m.EscrowAddress = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowSignedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EscrowSignedTime == nil {
				m.EscrowSignedTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.EscrowSignedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedPayinResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedPayinResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedPayinResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &PayinResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowSignature = append(m.EscrowSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.EscrowSignature == nil {
				m.EscrowSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayinStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayinStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayinStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Paid = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceId", wireType)
			}
			m.SequenceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowAddress = append(m.EscrowAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.EscrowAddress == nil {
				m.EscrowAddress = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowSignedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EscrowSignedTime == nil {
				m.EscrowSignedTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.EscrowSignedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedPayinStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedPayinStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedPayinStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &PayinStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowSignature = append(m.EscrowSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.EscrowSignature == nil {
				m.EscrowSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayoutStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayoutStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayoutStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = append(m.FromAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.FromAddress == nil {
				m.FromAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = append(m.ToAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.ToAddress == nil {
				m.ToAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthAddress = append(m.AuthAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.AuthAddress == nil {
				m.AuthAddress = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= EscrowStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			m.Collateral = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Collateral |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withhold", wireType)
			}
			m.Withhold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Withhold |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaidAmount", wireType)
			}
			m.PaidAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaidAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumPaid", wireType)
			}
			m.NumPaid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumPaid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftAmount", wireType)
			}
			m.LeftAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumLeft", wireType)
			}
			m.NumLeft = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumLeft |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextAmount", wireType)
			}
			m.NextAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPayoutTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastPayoutTime == nil {
				m.LastPayoutTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.LastPayoutTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPayoutTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextPayoutTime == nil {
				m.NextPayoutTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.NextPayoutTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowAddress = append(m.EscrowAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.EscrowAddress == nil {
				m.EscrowAddress = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowSignTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EscrowSignTime == nil {
				m.EscrowSignTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.EscrowSignTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedPayoutStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedPayoutStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedPayoutStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &PayoutStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowSignature = append(m.EscrowSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.EscrowSignature == nil {
				m.EscrowSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelContractRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelContractRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelContractRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractId = append(m.ContractId, make([]byte, postIndex-iNdEx))
			copy(m.ContractId[len(m.ContractId)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthAddress = append(m.AuthAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.AuthAddress == nil {
				m.AuthAddress = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedCancelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedCancelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedCancelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &CancelContractRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthSignature = append(m.AuthSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.AuthSignature == nil {
				m.AuthSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelContractResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelContractResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelContractResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractId = append(m.ContractId[:0], dAtA[iNdEx:postIndex]...)
			if m.ContractId == nil {
				m.ContractId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowId", wireType)
			}
			m.EscrowId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EscrowId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Canceled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Canceled = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowAddress = append(m.EscrowAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.EscrowAddress == nil {
				m.EscrowAddress = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowSignedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EscrowSignedTime == nil {
				m.EscrowSignedTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.EscrowSignedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedCancelContractResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedCancelContractResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedCancelContractResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &CancelContractResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowSignature = append(m.EscrowSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.EscrowSignature == nil {
				m.EscrowSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEscrow(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEscrow
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEscrow
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEscrow
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEscrow        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEscrow          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEscrow = fmt.Errorf("proto: unexpected end of group")
)
