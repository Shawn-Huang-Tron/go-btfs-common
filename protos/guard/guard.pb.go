// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protos/guard/guard.proto

package guard

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	_ "github.com/tron-us/protobuf/gogoproto"
	proto "github.com/tron-us/protobuf/proto"
	github_com_tron_us_protobuf_types "github.com/tron-us/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ResponseCode int32

const (
	ResponseCode_SUCCESS                ResponseCode = 0
	ResponseCode_SIGNATURE_FORMAT_ERROR ResponseCode = 1
	ResponseCode_COMPUTE_ADDRESS_ERROR  ResponseCode = 2
	ResponseCode_OTHER_ERROR            ResponseCode = 20
)

var ResponseCode_name = map[int32]string{
	0:  "SUCCESS",
	1:  "SIGNATURE_FORMAT_ERROR",
	2:  "COMPUTE_ADDRESS_ERROR",
	20: "OTHER_ERROR",
}

var ResponseCode_value = map[string]int32{
	"SUCCESS":                0,
	"SIGNATURE_FORMAT_ERROR": 1,
	"COMPUTE_ADDRESS_ERROR":  2,
	"OTHER_ERROR":            20,
}

func (x ResponseCode) String() string {
	return proto.EnumName(ResponseCode_name, int32(x))
}

func (ResponseCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ad5b6eccdc9ebee8, []int{0}
}

type ContractMeta_Schedule int32

const (
	ContractMeta_MONTHLY   ContractMeta_Schedule = 0
	ContractMeta_QUARTERLY ContractMeta_Schedule = 1
	ContractMeta_ANNUALLY  ContractMeta_Schedule = 2
)

var ContractMeta_Schedule_name = map[int32]string{
	0: "MONTHLY",
	1: "QUARTERLY",
	2: "ANNUALLY",
}

var ContractMeta_Schedule_value = map[string]int32{
	"MONTHLY":   0,
	"QUARTERLY": 1,
	"ANNUALLY":  2,
}

func (x ContractMeta_Schedule) String() string {
	return proto.EnumName(ContractMeta_Schedule_name, int32(x))
}

func (ContractMeta_Schedule) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ad5b6eccdc9ebee8, []int{1, 0}
}

type Contract_ContractState int32

const (
	Contract_DRAFT    Contract_ContractState = 0
	Contract_SIGNED   Contract_ContractState = 1
	Contract_UPLOADED Contract_ContractState = 2
	Contract_LOST     Contract_ContractState = 3
	Contract_CANCELED Contract_ContractState = 4
	Contract_CLOSED   Contract_ContractState = 5
	Contract_RENEWED  Contract_ContractState = 6
)

var Contract_ContractState_name = map[int32]string{
	0: "DRAFT",
	1: "SIGNED",
	2: "UPLOADED",
	3: "LOST",
	4: "CANCELED",
	5: "CLOSED",
	6: "RENEWED",
}

var Contract_ContractState_value = map[string]int32{
	"DRAFT":    0,
	"SIGNED":   1,
	"UPLOADED": 2,
	"LOST":     3,
	"CANCELED": 4,
	"CLOSED":   5,
	"RENEWED":  6,
}

func (x Contract_ContractState) String() string {
	return proto.EnumName(Contract_ContractState_name, int32(x))
}

func (Contract_ContractState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ad5b6eccdc9ebee8, []int{2, 0}
}

type FileStoreStatus_MetaState int32

const (
	FileStoreStatus_DRAFT        FileStoreStatus_MetaState = 0
	FileStoreStatus_UPLOADING    FileStoreStatus_MetaState = 1
	FileStoreStatus_RUNNING      FileStoreStatus_MetaState = 2
	FileStoreStatus_PARTIAL_LOST FileStoreStatus_MetaState = 3
	FileStoreStatus_LOST         FileStoreStatus_MetaState = 4
	FileStoreStatus_DONE         FileStoreStatus_MetaState = 5
	FileStoreStatus_CANCELED     FileStoreStatus_MetaState = 6
)

var FileStoreStatus_MetaState_name = map[int32]string{
	0: "DRAFT",
	1: "UPLOADING",
	2: "RUNNING",
	3: "PARTIAL_LOST",
	4: "LOST",
	5: "DONE",
	6: "CANCELED",
}

var FileStoreStatus_MetaState_value = map[string]int32{
	"DRAFT":        0,
	"UPLOADING":    1,
	"RUNNING":      2,
	"PARTIAL_LOST": 3,
	"LOST":         4,
	"DONE":         5,
	"CANCELED":     6,
}

func (x FileStoreStatus_MetaState) String() string {
	return proto.EnumName(FileStoreStatus_MetaState_name, int32(x))
}

func (FileStoreStatus_MetaState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ad5b6eccdc9ebee8, []int{4, 0}
}

type FileStoreStatus_RentalState int32

const (
	FileStoreStatus_NEW         FileStoreStatus_RentalState = 0
	FileStoreStatus_PARTIAL_NEW FileStoreStatus_RentalState = 1
	FileStoreStatus_EXPIRED     FileStoreStatus_RentalState = 2
	FileStoreStatus_RENEW       FileStoreStatus_RentalState = 3
)

var FileStoreStatus_RentalState_name = map[int32]string{
	0: "NEW",
	1: "PARTIAL_NEW",
	2: "EXPIRED",
	3: "RENEW",
}

var FileStoreStatus_RentalState_value = map[string]int32{
	"NEW":         0,
	"PARTIAL_NEW": 1,
	"EXPIRED":     2,
	"RENEW":       3,
}

func (x FileStoreStatus_RentalState) String() string {
	return proto.EnumName(FileStoreStatus_RentalState_name, int32(x))
}

func (FileStoreStatus_RentalState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ad5b6eccdc9ebee8, []int{4, 1}
}

type Log struct {
	ChangeTime           time.Time `protobuf:"bytes,1,opt,name=change_time,json=changeTime,proto3,stdtime" json:"change_time" pg:"change_time"`
	OriginatorPid        string    `protobuf:"bytes,2,opt,name=originator_pid,json=originatorPid,proto3" json:"originator_pid,omitempty" pg:"originator_pid"`
	Change               string    `protobuf:"bytes,3,opt,name=change,proto3" json:"change,omitempty" pg:"change"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-" pg:"-"`
	XXX_unrecognized     []byte    `json:"-" pg:"-"`
	XXX_sizecache        int32     `json:"-" pg:"-"`
}

func (m *Log) Reset()         { *m = Log{} }
func (m *Log) String() string { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()    {}
func (*Log) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad5b6eccdc9ebee8, []int{0}
}
func (m *Log) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Log) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Log.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Log) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Log.Merge(m, src)
}
func (m *Log) XXX_Size() int {
	return m.Size()
}
func (m *Log) XXX_DiscardUnknown() {
	xxx_messageInfo_Log.DiscardUnknown(m)
}

var xxx_messageInfo_Log proto.InternalMessageInfo

func (m *Log) GetChangeTime() time.Time {
	if m != nil {
		return m.ChangeTime
	}
	return time.Time{}
}

func (m *Log) GetOriginatorPid() string {
	if m != nil {
		return m.OriginatorPid
	}
	return ""
}

func (m *Log) GetChange() string {
	if m != nil {
		return m.Change
	}
	return ""
}

func (*Log) XXX_MessageName() string {
	return "guard.Log"
}

//the relationship of the objects from Guard's view
// FileStoreMeta (1:n) Contract (1:n) payout
//contract is the signed document between the renter and host for one shard's storage
// the contract information contains buyer, seller, escrow, guard , storage shard's information, rent duration, amount, payment method(periodically and times)
//ContractMeta is the information which will not be changed after proposal
//Contract technically is the contract execution record, it contains the contractMeta and state information
type ContractMeta struct {
	//Contract proposed by renter, will not be changed after renter proposed
	ContractId           string                `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty" pg:"contract_id"`
	RenterPid            string                `protobuf:"bytes,2,opt,name=renter_pid,json=renterPid,proto3" json:"renter_pid,omitempty" pg:"renter_pid"`
	HostPid              string                `protobuf:"bytes,3,opt,name=host_pid,json=hostPid,proto3" json:"host_pid,omitempty" pg:"host_pid"`
	ShardHash            string                `protobuf:"bytes,4,opt,name=shard_hash,json=shardHash,proto3" json:"shard_hash,omitempty" pg:"shard_hash"`
	ShardIndex           int32                 `protobuf:"varint,5,opt,name=shard_index,json=shardIndex,proto3" json:"shard_index,omitempty" pg:"shard_index"`
	ShardFileSize        int64                 `protobuf:"varint,6,opt,name=shard_file_size,json=shardFileSize,proto3" json:"shard_file_size,omitempty" pg:"shard_file_size"`
	FileHash             string                `protobuf:"bytes,7,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty" pg:"file_hash"`
	RentStart            time.Time             `protobuf:"bytes,8,opt,name=rent_start,json=rentStart,proto3,stdtime" json:"rent_start" pg:"rent_start"`
	RentEnd              time.Time             `protobuf:"bytes,9,opt,name=rent_end,json=rentEnd,proto3,stdtime" json:"rent_end" pg:"rent_end"`
	GuardPid             string                `protobuf:"bytes,10,opt,name=guard_pid,json=guardPid,proto3" json:"guard_pid,omitempty" pg:"guard_pid"`
	EscrowPid            string                `protobuf:"bytes,11,opt,name=escrow_pid,json=escrowPid,proto3" json:"escrow_pid,omitempty" pg:"escrow_pid"`
	Price                int64                 `protobuf:"varint,12,opt,name=price,proto3" json:"price,omitempty" pg:"price"`
	Amount               int64                 `protobuf:"varint,13,opt,name=amount,proto3" json:"amount,omitempty" pg:"amount"`
	CollateralAmount     int64                 `protobuf:"varint,14,opt,name=collateral_amount,json=collateralAmount,proto3" json:"collateral_amount,omitempty" pg:"collateral_amount"`
	PayoutSchedule       ContractMeta_Schedule `protobuf:"varint,15,opt,name=payout_schedule,json=payoutSchedule,proto3,enum=guard.ContractMeta_Schedule" json:"payout_schedule,omitempty" pg:"payout_schedule"`
	NumPayouts           int32                 `protobuf:"varint,16,opt,name=num_payouts,json=numPayouts,proto3" json:"num_payouts,omitempty" pg:"num_payouts"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-" pg:"-"`
	XXX_unrecognized     []byte                `json:"-" pg:"-"`
	XXX_sizecache        int32                 `json:"-" pg:"-"`
}

func (m *ContractMeta) Reset()         { *m = ContractMeta{} }
func (m *ContractMeta) String() string { return proto.CompactTextString(m) }
func (*ContractMeta) ProtoMessage()    {}
func (*ContractMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad5b6eccdc9ebee8, []int{1}
}
func (m *ContractMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractMeta.Merge(m, src)
}
func (m *ContractMeta) XXX_Size() int {
	return m.Size()
}
func (m *ContractMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractMeta.DiscardUnknown(m)
}

var xxx_messageInfo_ContractMeta proto.InternalMessageInfo

func (m *ContractMeta) GetContractId() string {
	if m != nil {
		return m.ContractId
	}
	return ""
}

func (m *ContractMeta) GetRenterPid() string {
	if m != nil {
		return m.RenterPid
	}
	return ""
}

func (m *ContractMeta) GetHostPid() string {
	if m != nil {
		return m.HostPid
	}
	return ""
}

func (m *ContractMeta) GetShardHash() string {
	if m != nil {
		return m.ShardHash
	}
	return ""
}

func (m *ContractMeta) GetShardIndex() int32 {
	if m != nil {
		return m.ShardIndex
	}
	return 0
}

func (m *ContractMeta) GetShardFileSize() int64 {
	if m != nil {
		return m.ShardFileSize
	}
	return 0
}

func (m *ContractMeta) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *ContractMeta) GetRentStart() time.Time {
	if m != nil {
		return m.RentStart
	}
	return time.Time{}
}

func (m *ContractMeta) GetRentEnd() time.Time {
	if m != nil {
		return m.RentEnd
	}
	return time.Time{}
}

func (m *ContractMeta) GetGuardPid() string {
	if m != nil {
		return m.GuardPid
	}
	return ""
}

func (m *ContractMeta) GetEscrowPid() string {
	if m != nil {
		return m.EscrowPid
	}
	return ""
}

func (m *ContractMeta) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *ContractMeta) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *ContractMeta) GetCollateralAmount() int64 {
	if m != nil {
		return m.CollateralAmount
	}
	return 0
}

func (m *ContractMeta) GetPayoutSchedule() ContractMeta_Schedule {
	if m != nil {
		return m.PayoutSchedule
	}
	return ContractMeta_MONTHLY
}

func (m *ContractMeta) GetNumPayouts() int32 {
	if m != nil {
		return m.NumPayouts
	}
	return 0
}

func (*ContractMeta) XXX_MessageName() string {
	return "guard.ContractMeta"
}

type Contract struct {
	//the contract executor record, changed frequently after proposal
	ContractMeta         `protobuf:"bytes,1,opt,name=contract,proto3,embedded=contract" json:"contract" pg:"contract"`
	State                Contract_ContractState `protobuf:"varint,2,opt,name=state,proto3,enum=guard.Contract_ContractState" json:"state,omitempty" pg:"state"`
	RenterSignature      []byte                 `protobuf:"bytes,3,opt,name=renter_signature,json=renterSignature,proto3" json:"renter_signature,omitempty" pg:"renter_signature"`
	HostSignature        []byte                 `protobuf:"bytes,4,opt,name=host_signature,json=hostSignature,proto3" json:"host_signature,omitempty" pg:"host_signature"`
	EscrowSignedTime     time.Time              `protobuf:"bytes,5,opt,name=escrow_signed_time,json=escrowSignedTime,proto3,stdtime" json:"escrow_signed_time" pg:"escrow_signed_time"`
	EscrowSignature      []byte                 `protobuf:"bytes,6,opt,name=escrow_signature,json=escrowSignature,proto3" json:"escrow_signature,omitempty" pg:"escrow_signature"`
	ChangeLog            []*Log                 `protobuf:"bytes,7,rep,name=change_log,json=changeLog,proto3" json:"change_log,omitempty" pg:"change_log"`
	LastModifyTime       time.Time              `protobuf:"bytes,8,opt,name=last_modify_time,json=lastModifyTime,proto3,stdtime" json:"last_modify_time" pg:"last_modify_time"`
	GuardSignature       []byte                 `protobuf:"bytes,9,opt,name=guard_signature,json=guardSignature,proto3" json:"guard_signature,omitempty" pg:"guard_signature"`
	PreparerPid          string                 `protobuf:"bytes,10,opt,name=preparer_pid,json=preparerPid,proto3" json:"preparer_pid,omitempty" pg:"preparer_pid"`
	PreparerSignature    []byte                 `protobuf:"bytes,11,opt,name=preparer_signature,json=preparerSignature,proto3" json:"preparer_signature,omitempty" pg:"preparer_signature"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-" pg:"-"`
	XXX_unrecognized     []byte                 `json:"-" pg:"-"`
	XXX_sizecache        int32                  `json:"-" pg:"-"`
}

func (m *Contract) Reset()         { *m = Contract{} }
func (m *Contract) String() string { return proto.CompactTextString(m) }
func (*Contract) ProtoMessage()    {}
func (*Contract) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad5b6eccdc9ebee8, []int{2}
}
func (m *Contract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Contract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Contract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Contract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Contract.Merge(m, src)
}
func (m *Contract) XXX_Size() int {
	return m.Size()
}
func (m *Contract) XXX_DiscardUnknown() {
	xxx_messageInfo_Contract.DiscardUnknown(m)
}

var xxx_messageInfo_Contract proto.InternalMessageInfo

func (m *Contract) GetState() Contract_ContractState {
	if m != nil {
		return m.State
	}
	return Contract_DRAFT
}

func (m *Contract) GetRenterSignature() []byte {
	if m != nil {
		return m.RenterSignature
	}
	return nil
}

func (m *Contract) GetHostSignature() []byte {
	if m != nil {
		return m.HostSignature
	}
	return nil
}

func (m *Contract) GetEscrowSignedTime() time.Time {
	if m != nil {
		return m.EscrowSignedTime
	}
	return time.Time{}
}

func (m *Contract) GetEscrowSignature() []byte {
	if m != nil {
		return m.EscrowSignature
	}
	return nil
}

func (m *Contract) GetChangeLog() []*Log {
	if m != nil {
		return m.ChangeLog
	}
	return nil
}

func (m *Contract) GetLastModifyTime() time.Time {
	if m != nil {
		return m.LastModifyTime
	}
	return time.Time{}
}

func (m *Contract) GetGuardSignature() []byte {
	if m != nil {
		return m.GuardSignature
	}
	return nil
}

func (m *Contract) GetPreparerPid() string {
	if m != nil {
		return m.PreparerPid
	}
	return ""
}

func (m *Contract) GetPreparerSignature() []byte {
	if m != nil {
		return m.PreparerSignature
	}
	return nil
}

func (*Contract) XXX_MessageName() string {
	return "guard.Contract"
}

type FileStoreMeta struct {
	//file store meta prepared by renter, will not changed after proposal
	RenterPid            string    `protobuf:"bytes,1,opt,name=renter_pid,json=renterPid,proto3" json:"renter_pid,omitempty" pg:"renter_pid"`
	FileHash             string    `protobuf:"bytes,2,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty" pg:"file_hash"`
	FileSize             int64     `protobuf:"varint,3,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty" pg:"file_size"`
	RentStart            time.Time `protobuf:"bytes,4,opt,name=rent_start,json=rentStart,proto3,stdtime" json:"rent_start" pg:"rent_start"`
	RentEnd              time.Time `protobuf:"bytes,5,opt,name=rent_end,json=rentEnd,proto3,stdtime" json:"rent_end" pg:"rent_end"`
	CheckFrequency       int32     `protobuf:"varint,6,opt,name=check_frequency,json=checkFrequency,proto3" json:"check_frequency,omitempty" pg:"check_frequency"`
	GuardFee             int64     `protobuf:"varint,7,opt,name=guard_fee,json=guardFee,proto3" json:"guard_fee,omitempty" pg:"guard_fee"`
	EscrowFee            int64     `protobuf:"varint,8,opt,name=escrow_fee,json=escrowFee,proto3" json:"escrow_fee,omitempty" pg:"escrow_fee"`
	ShardCount           int32     `protobuf:"varint,9,opt,name=shard_count,json=shardCount,proto3" json:"shard_count,omitempty" pg:"shard_count"`
	MinimumShards        int32     `protobuf:"varint,10,opt,name=minimum_shards,json=minimumShards,proto3" json:"minimum_shards,omitempty" pg:"minimum_shards"`
	RecoverThreshold     int32     `protobuf:"varint,11,opt,name=recover_threshold,json=recoverThreshold,proto3" json:"recover_threshold,omitempty" pg:"recover_threshold"`
	EscrowPid            string    `protobuf:"bytes,12,opt,name=escrow_pid,json=escrowPid,proto3" json:"escrow_pid,omitempty" pg:"escrow_pid"`
	GuardPid             string    `protobuf:"bytes,13,opt,name=guard_pid,json=guardPid,proto3" json:"guard_pid,omitempty" pg:"guard_pid"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-" pg:"-"`
	XXX_unrecognized     []byte    `json:"-" pg:"-"`
	XXX_sizecache        int32     `json:"-" pg:"-"`
}

func (m *FileStoreMeta) Reset()         { *m = FileStoreMeta{} }
func (m *FileStoreMeta) String() string { return proto.CompactTextString(m) }
func (*FileStoreMeta) ProtoMessage()    {}
func (*FileStoreMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad5b6eccdc9ebee8, []int{3}
}
func (m *FileStoreMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileStoreMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileStoreMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileStoreMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileStoreMeta.Merge(m, src)
}
func (m *FileStoreMeta) XXX_Size() int {
	return m.Size()
}
func (m *FileStoreMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_FileStoreMeta.DiscardUnknown(m)
}

var xxx_messageInfo_FileStoreMeta proto.InternalMessageInfo

func (m *FileStoreMeta) GetRenterPid() string {
	if m != nil {
		return m.RenterPid
	}
	return ""
}

func (m *FileStoreMeta) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *FileStoreMeta) GetFileSize() int64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *FileStoreMeta) GetRentStart() time.Time {
	if m != nil {
		return m.RentStart
	}
	return time.Time{}
}

func (m *FileStoreMeta) GetRentEnd() time.Time {
	if m != nil {
		return m.RentEnd
	}
	return time.Time{}
}

func (m *FileStoreMeta) GetCheckFrequency() int32 {
	if m != nil {
		return m.CheckFrequency
	}
	return 0
}

func (m *FileStoreMeta) GetGuardFee() int64 {
	if m != nil {
		return m.GuardFee
	}
	return 0
}

func (m *FileStoreMeta) GetEscrowFee() int64 {
	if m != nil {
		return m.EscrowFee
	}
	return 0
}

func (m *FileStoreMeta) GetShardCount() int32 {
	if m != nil {
		return m.ShardCount
	}
	return 0
}

func (m *FileStoreMeta) GetMinimumShards() int32 {
	if m != nil {
		return m.MinimumShards
	}
	return 0
}

func (m *FileStoreMeta) GetRecoverThreshold() int32 {
	if m != nil {
		return m.RecoverThreshold
	}
	return 0
}

func (m *FileStoreMeta) GetEscrowPid() string {
	if m != nil {
		return m.EscrowPid
	}
	return ""
}

func (m *FileStoreMeta) GetGuardPid() string {
	if m != nil {
		return m.GuardPid
	}
	return ""
}

func (*FileStoreMeta) XXX_MessageName() string {
	return "guard.FileStoreMeta"
}

type FileStoreStatus struct {
	FileStoreMeta        `protobuf:"bytes,1,opt,name=file_store_meta,json=fileStoreMeta,proto3,embedded=file_store_meta" json:"file_store_meta" pg:"file_store_meta"`
	State                FileStoreStatus_MetaState   `protobuf:"varint,2,opt,name=state,proto3,enum=guard.FileStoreStatus_MetaState" json:"state,omitempty" pg:"state"`
	Contracts            []Contract                  `protobuf:"bytes,3,rep,name=contracts,proto3" json:"contracts" pg:"contracts"`
	RenterSignature      []byte                      `protobuf:"bytes,4,opt,name=renter_signature,json=renterSignature,proto3" json:"renter_signature,omitempty" pg:"renter_signature"`
	GuardReceiveTime     time.Time                   `protobuf:"bytes,5,opt,name=guard_receive_time,json=guardReceiveTime,proto3,stdtime" json:"guard_receive_time" pg:"guard_receive_time"`
	ChangeLog            []*Log                      `protobuf:"bytes,6,rep,name=change_log,json=changeLog,proto3" json:"change_log,omitempty" pg:"change_log"`
	CurrentTime          time.Time                   `protobuf:"bytes,7,opt,name=current_time,json=currentTime,proto3,stdtime" json:"current_time" pg:"current_time"`
	GuardSignature       []byte                      `protobuf:"bytes,8,opt,name=guard_signature,json=guardSignature,proto3" json:"guard_signature,omitempty" pg:"guard_signature"`
	RentalState          FileStoreStatus_RentalState `protobuf:"varint,9,opt,name=rental_state,json=rentalState,proto3,enum=guard.FileStoreStatus_RentalState" json:"rental_state,omitempty" pg:"rental_state"`
	PreparerPid          string                      `protobuf:"bytes,10,opt,name=preparer_pid,json=preparerPid,proto3" json:"preparer_pid,omitempty" pg:"preparer_pid"`
	PreparerSignature    []byte                      `protobuf:"bytes,11,opt,name=preparer_signature,json=preparerSignature,proto3" json:"preparer_signature,omitempty" pg:"preparer_signature"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-" pg:"-"`
	XXX_unrecognized     []byte                      `json:"-" pg:"-"`
	XXX_sizecache        int32                       `json:"-" pg:"-"`
}

func (m *FileStoreStatus) Reset()         { *m = FileStoreStatus{} }
func (m *FileStoreStatus) String() string { return proto.CompactTextString(m) }
func (*FileStoreStatus) ProtoMessage()    {}
func (*FileStoreStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad5b6eccdc9ebee8, []int{4}
}
func (m *FileStoreStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileStoreStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileStoreStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileStoreStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileStoreStatus.Merge(m, src)
}
func (m *FileStoreStatus) XXX_Size() int {
	return m.Size()
}
func (m *FileStoreStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_FileStoreStatus.DiscardUnknown(m)
}

var xxx_messageInfo_FileStoreStatus proto.InternalMessageInfo

func (m *FileStoreStatus) GetState() FileStoreStatus_MetaState {
	if m != nil {
		return m.State
	}
	return FileStoreStatus_DRAFT
}

func (m *FileStoreStatus) GetContracts() []Contract {
	if m != nil {
		return m.Contracts
	}
	return nil
}

func (m *FileStoreStatus) GetRenterSignature() []byte {
	if m != nil {
		return m.RenterSignature
	}
	return nil
}

func (m *FileStoreStatus) GetGuardReceiveTime() time.Time {
	if m != nil {
		return m.GuardReceiveTime
	}
	return time.Time{}
}

func (m *FileStoreStatus) GetChangeLog() []*Log {
	if m != nil {
		return m.ChangeLog
	}
	return nil
}

func (m *FileStoreStatus) GetCurrentTime() time.Time {
	if m != nil {
		return m.CurrentTime
	}
	return time.Time{}
}

func (m *FileStoreStatus) GetGuardSignature() []byte {
	if m != nil {
		return m.GuardSignature
	}
	return nil
}

func (m *FileStoreStatus) GetRentalState() FileStoreStatus_RentalState {
	if m != nil {
		return m.RentalState
	}
	return FileStoreStatus_NEW
}

func (m *FileStoreStatus) GetPreparerPid() string {
	if m != nil {
		return m.PreparerPid
	}
	return ""
}

func (m *FileStoreStatus) GetPreparerSignature() []byte {
	if m != nil {
		return m.PreparerSignature
	}
	return nil
}

func (*FileStoreStatus) XXX_MessageName() string {
	return "guard.FileStoreStatus"
}

type ChallengeQuestion struct {
	ShardHash            string   `protobuf:"bytes,1,opt,name=shard_hash,json=shardHash,proto3" json:"shard_hash,omitempty" pg:"shard_hash"`
	HostPid              string   `protobuf:"bytes,2,opt,name=host_pid,json=hostPid,proto3" json:"host_pid,omitempty" pg:"host_pid"`
	ChunkIndex           int32    `protobuf:"varint,3,opt,name=chunk_index,json=chunkIndex,proto3" json:"chunk_index,omitempty" pg:"chunk_index"`
	Nonce                string   `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty" pg:"nonce"`
	ExpectAnswer         string   `protobuf:"bytes,5,opt,name=expect_answer,json=expectAnswer,proto3" json:"expect_answer,omitempty" pg:"expect_answer"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" pg:"-"`
	XXX_unrecognized     []byte   `json:"-" pg:"-"`
	XXX_sizecache        int32    `json:"-" pg:"-"`
}

func (m *ChallengeQuestion) Reset()         { *m = ChallengeQuestion{} }
func (m *ChallengeQuestion) String() string { return proto.CompactTextString(m) }
func (*ChallengeQuestion) ProtoMessage()    {}
func (*ChallengeQuestion) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad5b6eccdc9ebee8, []int{5}
}
func (m *ChallengeQuestion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeQuestion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeQuestion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeQuestion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeQuestion.Merge(m, src)
}
func (m *ChallengeQuestion) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeQuestion) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeQuestion.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeQuestion proto.InternalMessageInfo

func (m *ChallengeQuestion) GetShardHash() string {
	if m != nil {
		return m.ShardHash
	}
	return ""
}

func (m *ChallengeQuestion) GetHostPid() string {
	if m != nil {
		return m.HostPid
	}
	return ""
}

func (m *ChallengeQuestion) GetChunkIndex() int32 {
	if m != nil {
		return m.ChunkIndex
	}
	return 0
}

func (m *ChallengeQuestion) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *ChallengeQuestion) GetExpectAnswer() string {
	if m != nil {
		return m.ExpectAnswer
	}
	return ""
}

func (*ChallengeQuestion) XXX_MessageName() string {
	return "guard.ChallengeQuestion"
}

type ProofOfReplicateChallenge struct {
	ChallengeQuestion    `protobuf:"bytes,1,opt,name=question,proto3,embedded=question" json:"question" pg:"question"`
	ChallengeTime        time.Time `protobuf:"bytes,2,opt,name=challenge_time,json=challengeTime,proto3,stdtime" json:"challenge_time" pg:"challenge_time"`
	GuardPid             string    `protobuf:"bytes,3,opt,name=guard_pid,json=guardPid,proto3" json:"guard_pid,omitempty" pg:"guard_pid"`
	GuardSignature       []byte    `protobuf:"bytes,4,opt,name=guard_signature,json=guardSignature,proto3" json:"guard_signature,omitempty" pg:"guard_signature"`
	HostAnswer           string    `protobuf:"bytes,5,opt,name=host_answer,json=hostAnswer,proto3" json:"host_answer,omitempty" pg:"host_answer"`
	HostSignTime         time.Time `protobuf:"bytes,6,opt,name=host_sign_time,json=hostSignTime,proto3,stdtime" json:"host_sign_time" pg:"host_sign_time"`
	HostSignature        []byte    `protobuf:"bytes,7,opt,name=host_signature,json=hostSignature,proto3" json:"host_signature,omitempty" pg:"host_signature"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-" pg:"-"`
	XXX_unrecognized     []byte    `json:"-" pg:"-"`
	XXX_sizecache        int32     `json:"-" pg:"-"`
}

func (m *ProofOfReplicateChallenge) Reset()         { *m = ProofOfReplicateChallenge{} }
func (m *ProofOfReplicateChallenge) String() string { return proto.CompactTextString(m) }
func (*ProofOfReplicateChallenge) ProtoMessage()    {}
func (*ProofOfReplicateChallenge) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad5b6eccdc9ebee8, []int{6}
}
func (m *ProofOfReplicateChallenge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProofOfReplicateChallenge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProofOfReplicateChallenge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProofOfReplicateChallenge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProofOfReplicateChallenge.Merge(m, src)
}
func (m *ProofOfReplicateChallenge) XXX_Size() int {
	return m.Size()
}
func (m *ProofOfReplicateChallenge) XXX_DiscardUnknown() {
	xxx_messageInfo_ProofOfReplicateChallenge.DiscardUnknown(m)
}

var xxx_messageInfo_ProofOfReplicateChallenge proto.InternalMessageInfo

func (m *ProofOfReplicateChallenge) GetChallengeTime() time.Time {
	if m != nil {
		return m.ChallengeTime
	}
	return time.Time{}
}

func (m *ProofOfReplicateChallenge) GetGuardPid() string {
	if m != nil {
		return m.GuardPid
	}
	return ""
}

func (m *ProofOfReplicateChallenge) GetGuardSignature() []byte {
	if m != nil {
		return m.GuardSignature
	}
	return nil
}

func (m *ProofOfReplicateChallenge) GetHostAnswer() string {
	if m != nil {
		return m.HostAnswer
	}
	return ""
}

func (m *ProofOfReplicateChallenge) GetHostSignTime() time.Time {
	if m != nil {
		return m.HostSignTime
	}
	return time.Time{}
}

func (m *ProofOfReplicateChallenge) GetHostSignature() []byte {
	if m != nil {
		return m.HostSignature
	}
	return nil
}

func (*ProofOfReplicateChallenge) XXX_MessageName() string {
	return "guard.ProofOfReplicateChallenge"
}

type FileChallengeQuestions struct {
	FileHash             string                    `protobuf:"bytes,1,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty" pg:"file_hash"`
	ShardQuestions       []ShardChallengeQuestions `protobuf:"bytes,2,rep,name=shard_questions,json=shardQuestions,proto3" json:"shard_questions" pg:"shard_questions"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-" pg:"-"`
	XXX_unrecognized     []byte                    `json:"-" pg:"-"`
	XXX_sizecache        int32                     `json:"-" pg:"-"`
}

func (m *FileChallengeQuestions) Reset()         { *m = FileChallengeQuestions{} }
func (m *FileChallengeQuestions) String() string { return proto.CompactTextString(m) }
func (*FileChallengeQuestions) ProtoMessage()    {}
func (*FileChallengeQuestions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad5b6eccdc9ebee8, []int{7}
}
func (m *FileChallengeQuestions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileChallengeQuestions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileChallengeQuestions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileChallengeQuestions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileChallengeQuestions.Merge(m, src)
}
func (m *FileChallengeQuestions) XXX_Size() int {
	return m.Size()
}
func (m *FileChallengeQuestions) XXX_DiscardUnknown() {
	xxx_messageInfo_FileChallengeQuestions.DiscardUnknown(m)
}

var xxx_messageInfo_FileChallengeQuestions proto.InternalMessageInfo

func (m *FileChallengeQuestions) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *FileChallengeQuestions) GetShardQuestions() []ShardChallengeQuestions {
	if m != nil {
		return m.ShardQuestions
	}
	return nil
}

func (*FileChallengeQuestions) XXX_MessageName() string {
	return "guard.FileChallengeQuestions"
}

type ShardChallengeQuestions struct {
	FileHash             string              `protobuf:"bytes,1,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty" pg:"file_hash"`
	ShardHash            string              `protobuf:"bytes,2,opt,name=shard_hash,json=shardHash,proto3" json:"shard_hash,omitempty" pg:"shard_hash"`
	PreparerPid          string              `protobuf:"bytes,3,opt,name=preparer_pid,json=preparerPid,proto3" json:"preparer_pid,omitempty" pg:"preparer_pid"`
	QuestionCount        int32               `protobuf:"varint,4,opt,name=question_count,json=questionCount,proto3" json:"question_count,omitempty" pg:"question_count"`
	Questions            []ChallengeQuestion `protobuf:"bytes,5,rep,name=questions,proto3" json:"questions" pg:"questions"`
	PrepareTime          time.Time           `protobuf:"bytes,6,opt,name=prepare_time,json=prepareTime,proto3,stdtime" json:"prepare_time" pg:"prepare_time"`
	PreparerSignature    []byte              `protobuf:"bytes,7,opt,name=preparer_signature,json=preparerSignature,proto3" json:"preparer_signature,omitempty" pg:"preparer_signature"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-" pg:"-"`
	XXX_unrecognized     []byte              `json:"-" pg:"-"`
	XXX_sizecache        int32               `json:"-" pg:"-"`
}

func (m *ShardChallengeQuestions) Reset()         { *m = ShardChallengeQuestions{} }
func (m *ShardChallengeQuestions) String() string { return proto.CompactTextString(m) }
func (*ShardChallengeQuestions) ProtoMessage()    {}
func (*ShardChallengeQuestions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad5b6eccdc9ebee8, []int{8}
}
func (m *ShardChallengeQuestions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardChallengeQuestions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardChallengeQuestions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardChallengeQuestions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardChallengeQuestions.Merge(m, src)
}
func (m *ShardChallengeQuestions) XXX_Size() int {
	return m.Size()
}
func (m *ShardChallengeQuestions) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardChallengeQuestions.DiscardUnknown(m)
}

var xxx_messageInfo_ShardChallengeQuestions proto.InternalMessageInfo

func (m *ShardChallengeQuestions) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *ShardChallengeQuestions) GetShardHash() string {
	if m != nil {
		return m.ShardHash
	}
	return ""
}

func (m *ShardChallengeQuestions) GetPreparerPid() string {
	if m != nil {
		return m.PreparerPid
	}
	return ""
}

func (m *ShardChallengeQuestions) GetQuestionCount() int32 {
	if m != nil {
		return m.QuestionCount
	}
	return 0
}

func (m *ShardChallengeQuestions) GetQuestions() []ChallengeQuestion {
	if m != nil {
		return m.Questions
	}
	return nil
}

func (m *ShardChallengeQuestions) GetPrepareTime() time.Time {
	if m != nil {
		return m.PrepareTime
	}
	return time.Time{}
}

func (m *ShardChallengeQuestions) GetPreparerSignature() []byte {
	if m != nil {
		return m.PreparerSignature
	}
	return nil
}

func (*ShardChallengeQuestions) XXX_MessageName() string {
	return "guard.ShardChallengeQuestions"
}

type CheckFileStoreMetaRequest struct {
	FileHash             string    `protobuf:"bytes,1,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty" pg:"file_hash"`
	RenterPid            string    `protobuf:"bytes,2,opt,name=renter_pid,json=renterPid,proto3" json:"renter_pid,omitempty" pg:"renter_pid"`
	RequesterPid         string    `protobuf:"bytes,3,opt,name=requester_pid,json=requesterPid,proto3" json:"requester_pid,omitempty" pg:"requester_pid"`
	RequestTime          time.Time `protobuf:"bytes,4,opt,name=request_time,json=requestTime,proto3,stdtime" json:"request_time" pg:"request_time"`
	Signature            []byte    `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty" pg:"signature"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-" pg:"-"`
	XXX_unrecognized     []byte    `json:"-" pg:"-"`
	XXX_sizecache        int32     `json:"-" pg:"-"`
}

func (m *CheckFileStoreMetaRequest) Reset()         { *m = CheckFileStoreMetaRequest{} }
func (m *CheckFileStoreMetaRequest) String() string { return proto.CompactTextString(m) }
func (*CheckFileStoreMetaRequest) ProtoMessage()    {}
func (*CheckFileStoreMetaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad5b6eccdc9ebee8, []int{9}
}
func (m *CheckFileStoreMetaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckFileStoreMetaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckFileStoreMetaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckFileStoreMetaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckFileStoreMetaRequest.Merge(m, src)
}
func (m *CheckFileStoreMetaRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckFileStoreMetaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckFileStoreMetaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckFileStoreMetaRequest proto.InternalMessageInfo

func (m *CheckFileStoreMetaRequest) GetFileHash() string {
	if m != nil {
		return m.FileHash
	}
	return ""
}

func (m *CheckFileStoreMetaRequest) GetRenterPid() string {
	if m != nil {
		return m.RenterPid
	}
	return ""
}

func (m *CheckFileStoreMetaRequest) GetRequesterPid() string {
	if m != nil {
		return m.RequesterPid
	}
	return ""
}

func (m *CheckFileStoreMetaRequest) GetRequestTime() time.Time {
	if m != nil {
		return m.RequestTime
	}
	return time.Time{}
}

func (m *CheckFileStoreMetaRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (*CheckFileStoreMetaRequest) XXX_MessageName() string {
	return "guard.CheckFileStoreMetaRequest"
}

type Result struct {
	Code                 ResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=guard.ResponseCode" json:"code,omitempty" pg:"code"`
	Message              string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty" pg:"message"`
	ResponseTime         time.Time    `protobuf:"bytes,3,opt,name=response_time,json=responseTime,proto3,stdtime" json:"response_time" pg:"response_time"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" pg:"-"`
	XXX_unrecognized     []byte       `json:"-" pg:"-"`
	XXX_sizecache        int32        `json:"-" pg:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad5b6eccdc9ebee8, []int{10}
}
func (m *Result) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Result.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return m.Size()
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetCode() ResponseCode {
	if m != nil {
		return m.Code
	}
	return ResponseCode_SUCCESS
}

func (m *Result) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Result) GetResponseTime() time.Time {
	if m != nil {
		return m.ResponseTime
	}
	return time.Time{}
}

func (*Result) XXX_MessageName() string {
	return "guard.Result"
}
func init() {
	proto.RegisterEnum("guard.ResponseCode", ResponseCode_name, ResponseCode_value)
	golang_proto.RegisterEnum("guard.ResponseCode", ResponseCode_name, ResponseCode_value)
	proto.RegisterEnum("guard.ContractMeta_Schedule", ContractMeta_Schedule_name, ContractMeta_Schedule_value)
	golang_proto.RegisterEnum("guard.ContractMeta_Schedule", ContractMeta_Schedule_name, ContractMeta_Schedule_value)
	proto.RegisterEnum("guard.Contract_ContractState", Contract_ContractState_name, Contract_ContractState_value)
	golang_proto.RegisterEnum("guard.Contract_ContractState", Contract_ContractState_name, Contract_ContractState_value)
	proto.RegisterEnum("guard.FileStoreStatus_MetaState", FileStoreStatus_MetaState_name, FileStoreStatus_MetaState_value)
	golang_proto.RegisterEnum("guard.FileStoreStatus_MetaState", FileStoreStatus_MetaState_name, FileStoreStatus_MetaState_value)
	proto.RegisterEnum("guard.FileStoreStatus_RentalState", FileStoreStatus_RentalState_name, FileStoreStatus_RentalState_value)
	golang_proto.RegisterEnum("guard.FileStoreStatus_RentalState", FileStoreStatus_RentalState_name, FileStoreStatus_RentalState_value)
	proto.RegisterType((*Log)(nil), "guard.Log")
	golang_proto.RegisterType((*Log)(nil), "guard.Log")
	proto.RegisterType((*ContractMeta)(nil), "guard.ContractMeta")
	golang_proto.RegisterType((*ContractMeta)(nil), "guard.ContractMeta")
	proto.RegisterType((*Contract)(nil), "guard.Contract")
	golang_proto.RegisterType((*Contract)(nil), "guard.Contract")
	proto.RegisterType((*FileStoreMeta)(nil), "guard.FileStoreMeta")
	golang_proto.RegisterType((*FileStoreMeta)(nil), "guard.FileStoreMeta")
	proto.RegisterType((*FileStoreStatus)(nil), "guard.FileStoreStatus")
	golang_proto.RegisterType((*FileStoreStatus)(nil), "guard.FileStoreStatus")
	proto.RegisterType((*ChallengeQuestion)(nil), "guard.ChallengeQuestion")
	golang_proto.RegisterType((*ChallengeQuestion)(nil), "guard.ChallengeQuestion")
	proto.RegisterType((*ProofOfReplicateChallenge)(nil), "guard.ProofOfReplicateChallenge")
	golang_proto.RegisterType((*ProofOfReplicateChallenge)(nil), "guard.ProofOfReplicateChallenge")
	proto.RegisterType((*FileChallengeQuestions)(nil), "guard.FileChallengeQuestions")
	golang_proto.RegisterType((*FileChallengeQuestions)(nil), "guard.FileChallengeQuestions")
	proto.RegisterType((*ShardChallengeQuestions)(nil), "guard.ShardChallengeQuestions")
	golang_proto.RegisterType((*ShardChallengeQuestions)(nil), "guard.ShardChallengeQuestions")
	proto.RegisterType((*CheckFileStoreMetaRequest)(nil), "guard.CheckFileStoreMetaRequest")
	golang_proto.RegisterType((*CheckFileStoreMetaRequest)(nil), "guard.CheckFileStoreMetaRequest")
	proto.RegisterType((*Result)(nil), "guard.Result")
	golang_proto.RegisterType((*Result)(nil), "guard.Result")
}

func init() { proto.RegisterFile("protos/guard/guard.proto", fileDescriptor_ad5b6eccdc9ebee8) }
func init() { golang_proto.RegisterFile("protos/guard/guard.proto", fileDescriptor_ad5b6eccdc9ebee8) }

var fileDescriptor_ad5b6eccdc9ebee8 = []byte{
	// 1807 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x4f, 0x6f, 0x1b, 0xc7,
	0x15, 0xd7, 0x92, 0x5c, 0x92, 0xfb, 0xf8, 0x6f, 0x3d, 0x71, 0xdd, 0xb5, 0x1a, 0x4b, 0x2a, 0x03,
	0xd7, 0x72, 0x8b, 0xd0, 0x85, 0x5c, 0x14, 0x28, 0xe0, 0x36, 0xa0, 0xc9, 0x95, 0xac, 0x96, 0x22,
	0x99, 0x21, 0x85, 0xd4, 0xbd, 0x2c, 0x56, 0xcb, 0x21, 0xb9, 0x08, 0xb9, 0xcb, 0xec, 0x1f, 0x27,
	0xce, 0xb1, 0xc8, 0xad, 0x97, 0x9e, 0x8a, 0x7e, 0x80, 0x1e, 0x9a, 0x6f, 0xd1, 0xa3, 0x8f, 0xb9,
	0xf4, 0x54, 0x20, 0x2d, 0xac, 0x2f, 0x52, 0xcc, 0x9b, 0x59, 0x92, 0x4b, 0x51, 0x2e, 0x98, 0x22,
	0x17, 0x81, 0xf3, 0x7b, 0xef, 0xcd, 0xbc, 0x79, 0x7f, 0x7e, 0xf3, 0x56, 0x60, 0x2c, 0x02, 0x3f,
	0xf2, 0xc3, 0x27, 0x93, 0xd8, 0x0e, 0x46, 0xe2, 0x6f, 0x03, 0x21, 0xa2, 0xe2, 0x62, 0xff, 0xe7,
	0x13, 0x37, 0x9a, 0xc6, 0x57, 0x0d, 0xc7, 0x9f, 0x3f, 0x89, 0x02, 0xdf, 0xfb, 0x30, 0x0e, 0x9f,
	0xa0, 0xc2, 0x55, 0x3c, 0x7e, 0x32, 0xf1, 0x27, 0x3e, 0x2e, 0xf0, 0x97, 0x30, 0xdc, 0x3f, 0x9c,
	0xf8, 0xfe, 0x64, 0xc6, 0x56, 0x5a, 0x91, 0x3b, 0x67, 0x61, 0x64, 0xcf, 0x17, 0x42, 0xa1, 0xfe,
	0x27, 0x05, 0xb2, 0x1d, 0x7f, 0x42, 0x4c, 0x28, 0x39, 0x53, 0xdb, 0x9b, 0x30, 0x8b, 0x6b, 0x18,
	0xca, 0x91, 0x72, 0x5c, 0x3a, 0xd9, 0x6f, 0x08, 0xf3, 0x46, 0x62, 0xde, 0x18, 0x26, 0xe6, 0xcf,
	0x8b, 0x6f, 0xbe, 0x3d, 0xdc, 0xfb, 0xf3, 0xbf, 0x0f, 0x15, 0x0a, 0xc2, 0x90, 0x8b, 0xc8, 0x43,
	0xa8, 0xfa, 0x81, 0x3b, 0x71, 0x3d, 0x3b, 0xf2, 0x03, 0x6b, 0xe1, 0x8e, 0x8c, 0xcc, 0x91, 0x72,
	0xac, 0xd1, 0xca, 0x0a, 0xed, 0xbb, 0x23, 0x72, 0x0f, 0xf2, 0xc2, 0xc8, 0xc8, 0xa2, 0x58, 0xae,
	0xea, 0x5f, 0xab, 0x50, 0x6e, 0xf9, 0x5e, 0x14, 0xd8, 0x4e, 0x74, 0xc1, 0x22, 0x9b, 0x1c, 0x42,
	0xc9, 0x91, 0x6b, 0xcb, 0x1d, 0xa1, 0x5b, 0x1a, 0x85, 0x04, 0x3a, 0x1f, 0x91, 0x07, 0x00, 0x01,
	0xf3, 0x22, 0xb6, 0x7e, 0x98, 0x26, 0x10, 0x7e, 0xd0, 0x7d, 0x28, 0x4e, 0xfd, 0x30, 0x42, 0xa1,
	0x38, 0xaa, 0xc0, 0xd7, 0x5c, 0xf4, 0x00, 0x20, 0x9c, 0xda, 0xc1, 0xc8, 0x9a, 0xda, 0xe1, 0xd4,
	0xc8, 0x09, 0x4b, 0x44, 0x5e, 0xd8, 0xe1, 0x94, 0x9f, 0x2c, 0xc4, 0xae, 0x37, 0x62, 0x5f, 0x18,
	0xea, 0x91, 0x72, 0xac, 0x52, 0x61, 0x71, 0xce, 0x11, 0xf2, 0x13, 0xa8, 0x09, 0x85, 0xb1, 0x3b,
	0x63, 0x56, 0xe8, 0x7e, 0xc9, 0x8c, 0xfc, 0x91, 0x72, 0x9c, 0xa5, 0x15, 0x84, 0x4f, 0xdd, 0x19,
	0x1b, 0xb8, 0x5f, 0x32, 0xf2, 0x23, 0xd0, 0x50, 0x03, 0x8f, 0x29, 0xe0, 0x31, 0x45, 0x0e, 0xe0,
	0x29, 0x2d, 0xe1, 0xbe, 0x15, 0x46, 0x76, 0x10, 0x19, 0xc5, 0x1d, 0xa2, 0x8e, 0x97, 0x1c, 0x70,
	0x33, 0xf2, 0x11, 0x14, 0x71, 0x13, 0xe6, 0x8d, 0x0c, 0x6d, 0x87, 0x2d, 0x0a, 0xdc, 0xca, 0xf4,
	0x46, 0xdc, 0x45, 0x2c, 0x30, 0x0c, 0x13, 0x08, 0x17, 0x11, 0x90, 0x71, 0x62, 0xa1, 0x13, 0xf8,
	0x9f, 0xa3, 0xb4, 0x24, 0xe2, 0x24, 0x10, 0x2e, 0xbe, 0x0b, 0xea, 0x22, 0x70, 0x1d, 0x66, 0x94,
	0xf1, 0xf2, 0x62, 0xc1, 0x13, 0x6c, 0xcf, 0xfd, 0xd8, 0x8b, 0x8c, 0x0a, 0xc2, 0x72, 0x45, 0x7e,
	0x06, 0x77, 0x1c, 0x7f, 0x36, 0xb3, 0x23, 0x16, 0xd8, 0x33, 0x4b, 0xaa, 0x54, 0x51, 0x45, 0x5f,
	0x09, 0x9a, 0x42, 0xd9, 0x84, 0xda, 0xc2, 0x7e, 0xed, 0xc7, 0x91, 0x15, 0x3a, 0x53, 0x36, 0x8a,
	0x67, 0xcc, 0xa8, 0x1d, 0x29, 0xc7, 0xd5, 0x93, 0xf7, 0x1b, 0xa2, 0x39, 0xd6, 0x4b, 0xa5, 0x31,
	0x90, 0x3a, 0xb4, 0x2a, 0x8c, 0x92, 0x35, 0xcf, 0xa4, 0x17, 0xcf, 0x2d, 0x81, 0x86, 0x86, 0x2e,
	0x32, 0xe9, 0xc5, 0xf3, 0xbe, 0x40, 0xea, 0xbf, 0x80, 0xe2, 0x52, 0xb9, 0x04, 0x85, 0x8b, 0x5e,
	0x77, 0xf8, 0xa2, 0xf3, 0x52, 0xdf, 0x23, 0x15, 0xd0, 0x3e, 0xbe, 0x6c, 0xd2, 0xa1, 0x49, 0x3b,
	0x2f, 0x75, 0x85, 0x94, 0xa1, 0xd8, 0xec, 0x76, 0x2f, 0x9b, 0x9d, 0xce, 0x4b, 0x3d, 0x53, 0xff,
	0xbb, 0x0a, 0xc5, 0xc4, 0x01, 0xf2, 0x2b, 0x28, 0x26, 0x45, 0x29, 0x7b, 0xe7, 0xbd, 0x2d, 0x3e,
	0x8a, 0xd8, 0x7f, 0xf3, 0xed, 0xa1, 0x42, 0x97, 0xea, 0xe4, 0x29, 0xa8, 0x61, 0x64, 0x47, 0x0c,
	0x8b, 0xb7, 0x7a, 0xf2, 0x60, 0xc3, 0x6e, 0xf9, 0x63, 0xc0, 0x95, 0xa8, 0xd0, 0x25, 0x8f, 0x41,
	0x97, 0x65, 0x1f, 0xba, 0x13, 0xcf, 0x8e, 0xe2, 0x40, 0xb4, 0x52, 0x99, 0xd6, 0x04, 0x3e, 0x48,
	0x60, 0xde, 0x92, 0xd8, 0x02, 0x2b, 0xc5, 0x1c, 0x2a, 0x56, 0x38, 0xba, 0x52, 0xa3, 0x40, 0x64,
	0x9a, 0xb9, 0x22, 0x1b, 0x09, 0x1e, 0x50, 0x77, 0x28, 0x27, 0x5d, 0xd8, 0x0f, 0xd0, 0x1c, 0xd9,
	0xe0, 0x31, 0xe8, 0x6b, 0x7b, 0x8a, 0xc3, 0xf3, 0xc2, 0xcb, 0x95, 0xae, 0x38, 0xfe, 0x31, 0x48,
	0x1a, 0xb1, 0x66, 0xfe, 0xc4, 0x28, 0x1c, 0x65, 0x8f, 0x4b, 0x27, 0x20, 0x43, 0xd1, 0xf1, 0x27,
	0x54, 0x13, 0x52, 0x4e, 0x55, 0x5d, 0xd0, 0x67, 0x76, 0x18, 0x59, 0x73, 0x7f, 0xe4, 0x8e, 0x5f,
	0x0b, 0x3f, 0x77, 0xe9, 0x9c, 0x2a, 0xb7, 0xbe, 0x40, 0x63, 0xf4, 0xf2, 0x11, 0xd4, 0x44, 0xf5,
	0xaf, 0x9c, 0xd4, 0xd0, 0xc9, 0x2a, 0xc2, 0x2b, 0x1f, 0x7f, 0x0c, 0xe5, 0x45, 0xc0, 0x16, 0x76,
	0x20, 0xd9, 0x46, 0x74, 0x4a, 0x29, 0xc1, 0x78, 0x37, 0x7c, 0x08, 0x64, 0xa9, 0xb2, 0xda, 0xae,
	0x84, 0xdb, 0xdd, 0x49, 0x24, 0xcb, 0x1d, 0xeb, 0x0c, 0x2a, 0xa9, 0xf4, 0x12, 0x0d, 0xd4, 0x36,
	0x6d, 0x9e, 0x0e, 0xf5, 0x3d, 0x02, 0x90, 0x1f, 0x9c, 0x9f, 0x75, 0xcd, 0xb6, 0xa8, 0xbc, 0xcb,
	0x7e, 0xa7, 0xd7, 0x6c, 0x9b, 0x6d, 0x3d, 0x43, 0x8a, 0x90, 0xeb, 0xf4, 0x06, 0x43, 0x3d, 0xcb,
	0xf1, 0x56, 0xb3, 0xdb, 0x32, 0x3b, 0x66, 0x5b, 0xcf, 0x71, 0x8b, 0x56, 0xa7, 0x37, 0x30, 0xdb,
	0xba, 0xca, 0xeb, 0x98, 0x9a, 0x5d, 0xf3, 0x13, 0xb3, 0xad, 0xe7, 0xeb, 0x5f, 0xe5, 0xa0, 0x82,
	0x7c, 0x14, 0xf9, 0x01, 0x43, 0x5e, 0x4d, 0xd3, 0xa6, 0xb2, 0x49, 0x9b, 0x29, 0xce, 0xca, 0x6c,
	0x70, 0x56, 0x22, 0x44, 0xca, 0xcb, 0x62, 0xef, 0xa2, 0x10, 0xd9, 0x2e, 0x4d, 0x68, 0xb9, 0xff,
	0x9f, 0xd0, 0xd4, 0xef, 0x42, 0x68, 0x8f, 0xa0, 0xe6, 0x4c, 0x99, 0xf3, 0xa9, 0x35, 0x0e, 0xd8,
	0x67, 0x31, 0xf3, 0x9c, 0xd7, 0x58, 0x77, 0x2a, 0xad, 0x22, 0x7c, 0x9a, 0xa0, 0x2b, 0xe6, 0x1b,
	0x33, 0x86, 0xe4, 0x9c, 0x95, 0xcc, 0x77, 0xca, 0xd8, 0x1a, 0xf3, 0x71, 0x69, 0x11, 0xa5, 0x92,
	0xf9, 0xb8, 0x78, 0xf9, 0x42, 0x38, 0xc8, 0x62, 0xda, 0xda, 0x0b, 0xd1, 0x42, 0xfe, 0x7a, 0x08,
	0xd5, 0xb9, 0xeb, 0xb9, 0xf3, 0x78, 0x6e, 0x21, 0x1a, 0x62, 0xc5, 0xa8, 0xb4, 0x22, 0xd1, 0x01,
	0x82, 0x9c, 0x13, 0x03, 0xe6, 0xf8, 0xaf, 0x58, 0x60, 0x45, 0xd3, 0x80, 0x85, 0x53, 0x7f, 0x26,
	0x78, 0x56, 0xa5, 0xba, 0x14, 0x0c, 0x13, 0x7c, 0x83, 0x8d, 0xcb, 0x9b, 0x6c, 0x9c, 0x62, 0xf2,
	0x4a, 0x9a, 0xc9, 0xeb, 0x7f, 0xcb, 0x43, 0x6d, 0x59, 0x06, 0xbc, 0xde, 0xe2, 0x90, 0x9c, 0x42,
	0x4d, 0x24, 0x93, 0x63, 0xd6, 0x9c, 0x45, 0xb6, 0xe4, 0xaf, 0xbb, 0xb2, 0xf9, 0x52, 0x75, 0xb3,
	0x46, 0x60, 0x95, 0x71, 0xaa, 0xa0, 0x7e, 0x99, 0x66, 0xb1, 0xa3, 0x4d, 0x6b, 0x71, 0x5c, 0x83,
	0xeb, 0xa6, 0x88, 0xec, 0x29, 0x68, 0x09, 0x13, 0x86, 0x46, 0x16, 0xdb, 0xbe, 0xb6, 0xc1, 0x80,
	0xcf, 0x73, 0xfc, 0x50, 0xba, 0xd2, 0xdb, 0xca, 0x7e, 0xb9, 0xed, 0xec, 0x47, 0x81, 0x88, 0x80,
	0x04, 0xcc, 0x61, 0xee, 0x2b, 0xf6, 0x1d, 0x68, 0x0d, 0xed, 0xa9, 0x30, 0x97, 0xb4, 0xb6, 0xce,
	0x55, 0xf9, 0x77, 0x71, 0xd5, 0x19, 0x94, 0x9d, 0x38, 0xc0, 0x62, 0xc6, 0x83, 0x0b, 0x3b, 0x1c,
	0x5c, 0x92, 0x96, 0xb7, 0x91, 0x54, 0x71, 0x2b, 0x49, 0x99, 0x50, 0xe6, 0x46, 0xf6, 0xcc, 0x12,
	0xf9, 0xd0, 0x30, 0x1f, 0xf5, 0x5b, 0xf2, 0x41, 0x51, 0x55, 0x64, 0xa4, 0x14, 0xac, 0x16, 0xdf,
	0x03, 0xd7, 0x8d, 0x41, 0x5b, 0x66, 0x7f, 0x9d, 0xe7, 0x2a, 0xa0, 0x09, 0x6e, 0x3b, 0xef, 0x9e,
	0xe9, 0x0a, 0x12, 0xd7, 0x65, 0xb7, 0xcb, 0x17, 0x19, 0xa2, 0x43, 0xb9, 0xdf, 0xa4, 0xc3, 0xf3,
	0x66, 0xc7, 0x92, 0x8c, 0x97, 0x70, 0x5f, 0x8e, 0xff, 0x6a, 0xf7, 0xba, 0xa6, 0xae, 0xa6, 0x58,
	0x30, 0x5f, 0xff, 0x08, 0x4a, 0x6b, 0xb7, 0x22, 0x05, 0xc8, 0x76, 0xcd, 0x4f, 0xf4, 0x3d, 0x52,
	0x83, 0x52, 0xb2, 0x17, 0x07, 0xf0, 0x24, 0xf3, 0xf7, 0xfd, 0x73, 0x8a, 0x9c, 0xaa, 0x81, 0x8a,
	0x7c, 0xa9, 0x67, 0xeb, 0x5f, 0x2b, 0x70, 0xa7, 0x35, 0xb5, 0x67, 0x33, 0xe6, 0x4d, 0xd8, 0xc7,
	0x31, 0x0b, 0x23, 0xd7, 0xf7, 0x36, 0xc6, 0x45, 0x65, 0x73, 0x5c, 0x5c, 0x1f, 0x34, 0x33, 0xe9,
	0x41, 0x93, 0xcf, 0xb0, 0xd3, 0xd8, 0xfb, 0x54, 0x4e, 0x92, 0x59, 0xc1, 0x13, 0x08, 0x89, 0x49,
	0xf2, 0x2e, 0xa8, 0x9e, 0xef, 0x39, 0x4c, 0x0e, 0xa1, 0x62, 0x41, 0x3e, 0x80, 0x0a, 0xfb, 0x62,
	0xc1, 0x9c, 0xc8, 0xb2, 0xbd, 0xf0, 0x73, 0x16, 0x60, 0xd1, 0x6a, 0xb4, 0x2c, 0xc0, 0x26, 0x62,
	0xf5, 0x3f, 0x66, 0xe1, 0x7e, 0x3f, 0xf0, 0xfd, 0x71, 0x6f, 0x4c, 0xd9, 0x62, 0xe6, 0x3a, 0x76,
	0xc4, 0x96, 0xbe, 0x93, 0xdf, 0x40, 0xf1, 0x33, 0xe9, 0xbf, 0xec, 0x6a, 0x23, 0xe9, 0xad, 0xcd,
	0xfb, 0xad, 0x8f, 0x26, 0x89, 0x0d, 0xf9, 0x1d, 0x54, 0x9d, 0x44, 0x51, 0xd4, 0x6f, 0x66, 0x87,
	0xfa, 0xad, 0x2c, 0x6d, 0xb1, 0x82, 0x53, 0xd4, 0x94, 0xdd, 0x18, 0x32, 0xb7, 0x94, 0x77, 0x6e,
	0x6b, 0x79, 0x1f, 0x42, 0x09, 0xe3, 0x9c, 0x8a, 0x09, 0x70, 0x48, 0x44, 0x84, 0xfc, 0x76, 0x6d,
	0xdc, 0x11, 0x3e, 0xe7, 0x77, 0xf0, 0xb9, 0x9c, 0x0c, 0x45, 0xc9, 0xd7, 0xcc, 0xc6, 0xe8, 0x54,
	0xd8, 0x32, 0x3a, 0xd5, 0xbf, 0x52, 0xe0, 0x1e, 0x6f, 0xac, 0x1b, 0x41, 0x0d, 0xd3, 0x0f, 0xa9,
	0xb2, 0xf1, 0x90, 0x5e, 0x24, 0x5f, 0x10, 0x49, 0xc0, 0x43, 0x23, 0x83, 0x64, 0x72, 0x20, 0xb3,
	0x84, 0x0f, 0xc4, 0xcd, 0x5d, 0x25, 0x21, 0x56, 0xd1, 0x78, 0x89, 0xd6, 0xff, 0x99, 0x81, 0x1f,
	0xde, 0x62, 0xf1, 0x6e, 0x3f, 0xd2, 0xa5, 0x9d, 0xd9, 0x2c, 0xed, 0x4d, 0x2a, 0xc8, 0xde, 0xa4,
	0x82, 0x87, 0x50, 0x4d, 0xee, 0x20, 0x5f, 0xc3, 0x9c, 0x78, 0xe9, 0x12, 0x54, 0x3c, 0x88, 0xcf,
	0x40, 0x5b, 0x5d, 0x55, 0xc5, 0xab, 0xde, 0x5e, 0x90, 0x92, 0xf5, 0x97, 0x06, 0x9c, 0x4b, 0xe5,
	0x99, 0xbb, 0xe7, 0x35, 0xf1, 0x16, 0xd3, 0xba, 0x9d, 0xb8, 0x0a, 0xb7, 0x11, 0xd7, 0xb5, 0x02,
	0xf7, 0x5b, 0x38, 0x36, 0xac, 0xbf, 0x78, 0x94, 0xa1, 0x67, 0xff, 0x33, 0xb2, 0xef, 0xfa, 0x3a,
	0xfd, 0x00, 0x2a, 0x81, 0xd8, 0x26, 0x15, 0xda, 0xf2, 0x12, 0xe4, 0x4a, 0x67, 0x90, 0xac, 0xc5,
	0xb5, 0x77, 0x99, 0xa9, 0x4a, 0xd2, 0x12, 0xaf, 0xfd, 0x3e, 0x68, 0xab, 0xdb, 0xaa, 0x78, 0xdb,
	0x15, 0x50, 0xff, 0x8b, 0x02, 0x79, 0xca, 0xc2, 0x78, 0x16, 0x91, 0x47, 0x90, 0x73, 0xfc, 0x91,
	0xf8, 0x27, 0x40, 0x75, 0xf9, 0x21, 0x43, 0x59, 0xb8, 0xf0, 0xbd, 0x90, 0xb5, 0xfc, 0x11, 0xa3,
	0xa8, 0x40, 0x0c, 0x28, 0xcc, 0x59, 0x18, 0xda, 0x13, 0x96, 0x70, 0x9e, 0x5c, 0x92, 0x73, 0x7e,
	0x33, 0xa1, 0x2f, 0xbc, 0xce, 0xee, 0xd2, 0x84, 0x89, 0x29, 0x17, 0xfe, 0xd4, 0x81, 0xf2, 0xfa,
	0xd1, 0x9c, 0xb6, 0x07, 0x97, 0xad, 0x96, 0x39, 0x18, 0xe8, 0x7b, 0x64, 0x1f, 0xee, 0xf1, 0x21,
	0xb9, 0x39, 0xbc, 0xa4, 0xa6, 0x75, 0xda, 0xa3, 0x17, 0xcd, 0xa1, 0x65, 0x52, 0xda, 0xa3, 0xba,
	0x42, 0xee, 0xc3, 0x0f, 0x5a, 0xbd, 0x8b, 0xfe, 0xe5, 0xd0, 0xb4, 0x9a, 0xed, 0x36, 0x35, 0x07,
	0x03, 0x29, 0xca, 0xf0, 0xb7, 0xa0, 0x37, 0x7c, 0x61, 0x52, 0x09, 0xdc, 0x3d, 0xf9, 0x97, 0x02,
	0xe5, 0x33, 0x64, 0x1a, 0x16, 0xbc, 0xe2, 0x1f, 0xb0, 0xcf, 0xe0, 0xbd, 0x41, 0x7c, 0x35, 0x77,
	0xa3, 0xf4, 0xdc, 0x7c, 0x6f, 0xfb, 0x3b, 0xba, 0x5f, 0x59, 0x05, 0x89, 0x47, 0xf0, 0xd7, 0x50,
	0x19, 0x30, 0x6f, 0xd5, 0x9b, 0xe4, 0xc1, 0x9a, 0xdd, 0xcd, 0xf6, 0xdc, 0x34, 0xef, 0x02, 0xb9,
	0x59, 0x70, 0xe4, 0x68, 0xd9, 0x2a, 0xb7, 0xd4, 0xe2, 0xfe, 0x2d, 0xde, 0x3d, 0x7f, 0xf6, 0xe6,
	0xed, 0x81, 0xf2, 0xcd, 0xdb, 0x03, 0xe5, 0x3f, 0x6f, 0x0f, 0x94, 0xbf, 0x5e, 0x1f, 0x28, 0xff,
	0xb8, 0x3e, 0x50, 0xde, 0x5c, 0x1f, 0x28, 0x50, 0x71, 0xfd, 0xc6, 0x55, 0x34, 0x0e, 0x85, 0xe1,
	0x73, 0xc0, 0x18, 0xf4, 0x79, 0x72, 0xfa, 0xca, 0x1f, 0xc4, 0x7f, 0x9d, 0xae, 0xf2, 0x98, 0xac,
	0xa7, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x51, 0xfa, 0x97, 0xce, 0x9f, 0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GuardServiceClient is the client API for GuardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GuardServiceClient interface {
	SubmitFileStoreMeta(ctx context.Context, in *FileStoreStatus, opts ...grpc.CallOption) (*Result, error)
	SendQuestions(ctx context.Context, in *FileChallengeQuestions, opts ...grpc.CallOption) (*Result, error)
	CheckFileStoreMeta(ctx context.Context, in *CheckFileStoreMetaRequest, opts ...grpc.CallOption) (*FileStoreStatus, error)
}

type guardServiceClient struct {
	cc *grpc.ClientConn
}

func NewGuardServiceClient(cc *grpc.ClientConn) GuardServiceClient {
	return &guardServiceClient{cc}
}

func (c *guardServiceClient) SubmitFileStoreMeta(ctx context.Context, in *FileStoreStatus, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/guard.GuardService/SubmitFileStoreMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guardServiceClient) SendQuestions(ctx context.Context, in *FileChallengeQuestions, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/guard.GuardService/SendQuestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guardServiceClient) CheckFileStoreMeta(ctx context.Context, in *CheckFileStoreMetaRequest, opts ...grpc.CallOption) (*FileStoreStatus, error) {
	out := new(FileStoreStatus)
	err := c.cc.Invoke(ctx, "/guard.GuardService/CheckFileStoreMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GuardServiceServer is the server API for GuardService service.
type GuardServiceServer interface {
	SubmitFileStoreMeta(context.Context, *FileStoreStatus) (*Result, error)
	SendQuestions(context.Context, *FileChallengeQuestions) (*Result, error)
	CheckFileStoreMeta(context.Context, *CheckFileStoreMetaRequest) (*FileStoreStatus, error)
}

// UnimplementedGuardServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGuardServiceServer struct {
}

func (*UnimplementedGuardServiceServer) SubmitFileStoreMeta(ctx context.Context, req *FileStoreStatus) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitFileStoreMeta not implemented")
}
func (*UnimplementedGuardServiceServer) SendQuestions(ctx context.Context, req *FileChallengeQuestions) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendQuestions not implemented")
}
func (*UnimplementedGuardServiceServer) CheckFileStoreMeta(ctx context.Context, req *CheckFileStoreMetaRequest) (*FileStoreStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckFileStoreMeta not implemented")
}

func RegisterGuardServiceServer(s *grpc.Server, srv GuardServiceServer) {
	s.RegisterService(&_GuardService_serviceDesc, srv)
}

func _GuardService_SubmitFileStoreMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileStoreStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuardServiceServer).SubmitFileStoreMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guard.GuardService/SubmitFileStoreMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuardServiceServer).SubmitFileStoreMeta(ctx, req.(*FileStoreStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuardService_SendQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileChallengeQuestions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuardServiceServer).SendQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guard.GuardService/SendQuestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuardServiceServer).SendQuestions(ctx, req.(*FileChallengeQuestions))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuardService_CheckFileStoreMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckFileStoreMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuardServiceServer).CheckFileStoreMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/guard.GuardService/CheckFileStoreMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuardServiceServer).CheckFileStoreMeta(ctx, req.(*CheckFileStoreMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GuardService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "guard.GuardService",
	HandlerType: (*GuardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitFileStoreMeta",
			Handler:    _GuardService_SubmitFileStoreMeta_Handler,
		},
		{
			MethodName: "SendQuestions",
			Handler:    _GuardService_SendQuestions_Handler,
		},
		{
			MethodName: "CheckFileStoreMeta",
			Handler:    _GuardService_CheckFileStoreMeta_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/guard/guard.proto",
}

func (m *Log) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Log) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Log) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Change) > 0 {
		i -= len(m.Change)
		copy(dAtA[i:], m.Change)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.Change)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OriginatorPid) > 0 {
		i -= len(m.OriginatorPid)
		copy(dAtA[i:], m.OriginatorPid)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.OriginatorPid)))
		i--
		dAtA[i] = 0x12
	}
	n1, err1 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.ChangeTime, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.ChangeTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintGuard(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ContractMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NumPayouts != 0 {
		i = encodeVarintGuard(dAtA, i, uint64(m.NumPayouts))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.PayoutSchedule != 0 {
		i = encodeVarintGuard(dAtA, i, uint64(m.PayoutSchedule))
		i--
		dAtA[i] = 0x78
	}
	if m.CollateralAmount != 0 {
		i = encodeVarintGuard(dAtA, i, uint64(m.CollateralAmount))
		i--
		dAtA[i] = 0x70
	}
	if m.Amount != 0 {
		i = encodeVarintGuard(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x68
	}
	if m.Price != 0 {
		i = encodeVarintGuard(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x60
	}
	if len(m.EscrowPid) > 0 {
		i -= len(m.EscrowPid)
		copy(dAtA[i:], m.EscrowPid)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.EscrowPid)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.GuardPid) > 0 {
		i -= len(m.GuardPid)
		copy(dAtA[i:], m.GuardPid)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.GuardPid)))
		i--
		dAtA[i] = 0x52
	}
	n2, err2 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.RentEnd, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.RentEnd):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintGuard(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x4a
	n3, err3 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.RentStart, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.RentStart):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintGuard(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x42
	if len(m.FileHash) > 0 {
		i -= len(m.FileHash)
		copy(dAtA[i:], m.FileHash)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.FileHash)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ShardFileSize != 0 {
		i = encodeVarintGuard(dAtA, i, uint64(m.ShardFileSize))
		i--
		dAtA[i] = 0x30
	}
	if m.ShardIndex != 0 {
		i = encodeVarintGuard(dAtA, i, uint64(m.ShardIndex))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ShardHash) > 0 {
		i -= len(m.ShardHash)
		copy(dAtA[i:], m.ShardHash)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.ShardHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.HostPid) > 0 {
		i -= len(m.HostPid)
		copy(dAtA[i:], m.HostPid)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.HostPid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RenterPid) > 0 {
		i -= len(m.RenterPid)
		copy(dAtA[i:], m.RenterPid)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.RenterPid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractId) > 0 {
		i -= len(m.ContractId)
		copy(dAtA[i:], m.ContractId)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.ContractId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Contract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Contract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Contract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PreparerSignature) > 0 {
		i -= len(m.PreparerSignature)
		copy(dAtA[i:], m.PreparerSignature)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.PreparerSignature)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.PreparerPid) > 0 {
		i -= len(m.PreparerPid)
		copy(dAtA[i:], m.PreparerPid)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.PreparerPid)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.GuardSignature) > 0 {
		i -= len(m.GuardSignature)
		copy(dAtA[i:], m.GuardSignature)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.GuardSignature)))
		i--
		dAtA[i] = 0x4a
	}
	n4, err4 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.LastModifyTime, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.LastModifyTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintGuard(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x42
	if len(m.ChangeLog) > 0 {
		for iNdEx := len(m.ChangeLog) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChangeLog[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGuard(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.EscrowSignature) > 0 {
		i -= len(m.EscrowSignature)
		copy(dAtA[i:], m.EscrowSignature)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.EscrowSignature)))
		i--
		dAtA[i] = 0x32
	}
	n5, err5 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.EscrowSignedTime, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.EscrowSignedTime):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintGuard(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x2a
	if len(m.HostSignature) > 0 {
		i -= len(m.HostSignature)
		copy(dAtA[i:], m.HostSignature)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.HostSignature)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RenterSignature) > 0 {
		i -= len(m.RenterSignature)
		copy(dAtA[i:], m.RenterSignature)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.RenterSignature)))
		i--
		dAtA[i] = 0x1a
	}
	if m.State != 0 {
		i = encodeVarintGuard(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.ContractMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGuard(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FileStoreMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileStoreMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileStoreMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GuardPid) > 0 {
		i -= len(m.GuardPid)
		copy(dAtA[i:], m.GuardPid)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.GuardPid)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.EscrowPid) > 0 {
		i -= len(m.EscrowPid)
		copy(dAtA[i:], m.EscrowPid)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.EscrowPid)))
		i--
		dAtA[i] = 0x62
	}
	if m.RecoverThreshold != 0 {
		i = encodeVarintGuard(dAtA, i, uint64(m.RecoverThreshold))
		i--
		dAtA[i] = 0x58
	}
	if m.MinimumShards != 0 {
		i = encodeVarintGuard(dAtA, i, uint64(m.MinimumShards))
		i--
		dAtA[i] = 0x50
	}
	if m.ShardCount != 0 {
		i = encodeVarintGuard(dAtA, i, uint64(m.ShardCount))
		i--
		dAtA[i] = 0x48
	}
	if m.EscrowFee != 0 {
		i = encodeVarintGuard(dAtA, i, uint64(m.EscrowFee))
		i--
		dAtA[i] = 0x40
	}
	if m.GuardFee != 0 {
		i = encodeVarintGuard(dAtA, i, uint64(m.GuardFee))
		i--
		dAtA[i] = 0x38
	}
	if m.CheckFrequency != 0 {
		i = encodeVarintGuard(dAtA, i, uint64(m.CheckFrequency))
		i--
		dAtA[i] = 0x30
	}
	n7, err7 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.RentEnd, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.RentEnd):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintGuard(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x2a
	n8, err8 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.RentStart, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.RentStart):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintGuard(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0x22
	if m.FileSize != 0 {
		i = encodeVarintGuard(dAtA, i, uint64(m.FileSize))
		i--
		dAtA[i] = 0x18
	}
	if len(m.FileHash) > 0 {
		i -= len(m.FileHash)
		copy(dAtA[i:], m.FileHash)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.FileHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RenterPid) > 0 {
		i -= len(m.RenterPid)
		copy(dAtA[i:], m.RenterPid)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.RenterPid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FileStoreStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileStoreStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileStoreStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PreparerSignature) > 0 {
		i -= len(m.PreparerSignature)
		copy(dAtA[i:], m.PreparerSignature)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.PreparerSignature)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.PreparerPid) > 0 {
		i -= len(m.PreparerPid)
		copy(dAtA[i:], m.PreparerPid)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.PreparerPid)))
		i--
		dAtA[i] = 0x52
	}
	if m.RentalState != 0 {
		i = encodeVarintGuard(dAtA, i, uint64(m.RentalState))
		i--
		dAtA[i] = 0x48
	}
	if len(m.GuardSignature) > 0 {
		i -= len(m.GuardSignature)
		copy(dAtA[i:], m.GuardSignature)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.GuardSignature)))
		i--
		dAtA[i] = 0x42
	}
	n9, err9 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.CurrentTime, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.CurrentTime):])
	if err9 != nil {
		return 0, err9
	}
	i -= n9
	i = encodeVarintGuard(dAtA, i, uint64(n9))
	i--
	dAtA[i] = 0x3a
	if len(m.ChangeLog) > 0 {
		for iNdEx := len(m.ChangeLog) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChangeLog[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGuard(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	n10, err10 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.GuardReceiveTime, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.GuardReceiveTime):])
	if err10 != nil {
		return 0, err10
	}
	i -= n10
	i = encodeVarintGuard(dAtA, i, uint64(n10))
	i--
	dAtA[i] = 0x2a
	if len(m.RenterSignature) > 0 {
		i -= len(m.RenterSignature)
		copy(dAtA[i:], m.RenterSignature)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.RenterSignature)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Contracts) > 0 {
		for iNdEx := len(m.Contracts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contracts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGuard(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.State != 0 {
		i = encodeVarintGuard(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.FileStoreMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGuard(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ChallengeQuestion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeQuestion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeQuestion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExpectAnswer) > 0 {
		i -= len(m.ExpectAnswer)
		copy(dAtA[i:], m.ExpectAnswer)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.ExpectAnswer)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x22
	}
	if m.ChunkIndex != 0 {
		i = encodeVarintGuard(dAtA, i, uint64(m.ChunkIndex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.HostPid) > 0 {
		i -= len(m.HostPid)
		copy(dAtA[i:], m.HostPid)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.HostPid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ShardHash) > 0 {
		i -= len(m.ShardHash)
		copy(dAtA[i:], m.ShardHash)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.ShardHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProofOfReplicateChallenge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProofOfReplicateChallenge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProofOfReplicateChallenge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.HostSignature) > 0 {
		i -= len(m.HostSignature)
		copy(dAtA[i:], m.HostSignature)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.HostSignature)))
		i--
		dAtA[i] = 0x3a
	}
	n12, err12 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.HostSignTime, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.HostSignTime):])
	if err12 != nil {
		return 0, err12
	}
	i -= n12
	i = encodeVarintGuard(dAtA, i, uint64(n12))
	i--
	dAtA[i] = 0x32
	if len(m.HostAnswer) > 0 {
		i -= len(m.HostAnswer)
		copy(dAtA[i:], m.HostAnswer)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.HostAnswer)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GuardSignature) > 0 {
		i -= len(m.GuardSignature)
		copy(dAtA[i:], m.GuardSignature)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.GuardSignature)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GuardPid) > 0 {
		i -= len(m.GuardPid)
		copy(dAtA[i:], m.GuardPid)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.GuardPid)))
		i--
		dAtA[i] = 0x1a
	}
	n13, err13 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.ChallengeTime, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.ChallengeTime):])
	if err13 != nil {
		return 0, err13
	}
	i -= n13
	i = encodeVarintGuard(dAtA, i, uint64(n13))
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ChallengeQuestion.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGuard(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FileChallengeQuestions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileChallengeQuestions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileChallengeQuestions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ShardQuestions) > 0 {
		for iNdEx := len(m.ShardQuestions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ShardQuestions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGuard(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.FileHash) > 0 {
		i -= len(m.FileHash)
		copy(dAtA[i:], m.FileHash)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.FileHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShardChallengeQuestions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardChallengeQuestions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardChallengeQuestions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PreparerSignature) > 0 {
		i -= len(m.PreparerSignature)
		copy(dAtA[i:], m.PreparerSignature)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.PreparerSignature)))
		i--
		dAtA[i] = 0x3a
	}
	n15, err15 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.PrepareTime, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.PrepareTime):])
	if err15 != nil {
		return 0, err15
	}
	i -= n15
	i = encodeVarintGuard(dAtA, i, uint64(n15))
	i--
	dAtA[i] = 0x32
	if len(m.Questions) > 0 {
		for iNdEx := len(m.Questions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Questions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGuard(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.QuestionCount != 0 {
		i = encodeVarintGuard(dAtA, i, uint64(m.QuestionCount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PreparerPid) > 0 {
		i -= len(m.PreparerPid)
		copy(dAtA[i:], m.PreparerPid)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.PreparerPid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ShardHash) > 0 {
		i -= len(m.ShardHash)
		copy(dAtA[i:], m.ShardHash)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.ShardHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FileHash) > 0 {
		i -= len(m.FileHash)
		copy(dAtA[i:], m.FileHash)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.FileHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CheckFileStoreMetaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckFileStoreMetaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckFileStoreMetaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	n16, err16 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.RequestTime, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.RequestTime):])
	if err16 != nil {
		return 0, err16
	}
	i -= n16
	i = encodeVarintGuard(dAtA, i, uint64(n16))
	i--
	dAtA[i] = 0x22
	if len(m.RequesterPid) > 0 {
		i -= len(m.RequesterPid)
		copy(dAtA[i:], m.RequesterPid)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.RequesterPid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RenterPid) > 0 {
		i -= len(m.RenterPid)
		copy(dAtA[i:], m.RenterPid)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.RenterPid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FileHash) > 0 {
		i -= len(m.FileHash)
		copy(dAtA[i:], m.FileHash)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.FileHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Result) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Result) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Result) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	n17, err17 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.ResponseTime, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.ResponseTime):])
	if err17 != nil {
		return 0, err17
	}
	i -= n17
	i = encodeVarintGuard(dAtA, i, uint64(n17))
	i--
	dAtA[i] = 0x1a
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintGuard(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintGuard(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGuard(dAtA []byte, offset int, v uint64) int {
	offset -= sovGuard(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Log) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.ChangeTime)
	n += 1 + l + sovGuard(uint64(l))
	l = len(m.OriginatorPid)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	l = len(m.Change)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ContractMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractId)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	l = len(m.RenterPid)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	l = len(m.HostPid)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	l = len(m.ShardHash)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	if m.ShardIndex != 0 {
		n += 1 + sovGuard(uint64(m.ShardIndex))
	}
	if m.ShardFileSize != 0 {
		n += 1 + sovGuard(uint64(m.ShardFileSize))
	}
	l = len(m.FileHash)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.RentStart)
	n += 1 + l + sovGuard(uint64(l))
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.RentEnd)
	n += 1 + l + sovGuard(uint64(l))
	l = len(m.GuardPid)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	l = len(m.EscrowPid)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovGuard(uint64(m.Price))
	}
	if m.Amount != 0 {
		n += 1 + sovGuard(uint64(m.Amount))
	}
	if m.CollateralAmount != 0 {
		n += 1 + sovGuard(uint64(m.CollateralAmount))
	}
	if m.PayoutSchedule != 0 {
		n += 1 + sovGuard(uint64(m.PayoutSchedule))
	}
	if m.NumPayouts != 0 {
		n += 2 + sovGuard(uint64(m.NumPayouts))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Contract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ContractMeta.Size()
	n += 1 + l + sovGuard(uint64(l))
	if m.State != 0 {
		n += 1 + sovGuard(uint64(m.State))
	}
	l = len(m.RenterSignature)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	l = len(m.HostSignature)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.EscrowSignedTime)
	n += 1 + l + sovGuard(uint64(l))
	l = len(m.EscrowSignature)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	if len(m.ChangeLog) > 0 {
		for _, e := range m.ChangeLog {
			l = e.Size()
			n += 1 + l + sovGuard(uint64(l))
		}
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.LastModifyTime)
	n += 1 + l + sovGuard(uint64(l))
	l = len(m.GuardSignature)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	l = len(m.PreparerPid)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	l = len(m.PreparerSignature)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FileStoreMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RenterPid)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	l = len(m.FileHash)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	if m.FileSize != 0 {
		n += 1 + sovGuard(uint64(m.FileSize))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.RentStart)
	n += 1 + l + sovGuard(uint64(l))
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.RentEnd)
	n += 1 + l + sovGuard(uint64(l))
	if m.CheckFrequency != 0 {
		n += 1 + sovGuard(uint64(m.CheckFrequency))
	}
	if m.GuardFee != 0 {
		n += 1 + sovGuard(uint64(m.GuardFee))
	}
	if m.EscrowFee != 0 {
		n += 1 + sovGuard(uint64(m.EscrowFee))
	}
	if m.ShardCount != 0 {
		n += 1 + sovGuard(uint64(m.ShardCount))
	}
	if m.MinimumShards != 0 {
		n += 1 + sovGuard(uint64(m.MinimumShards))
	}
	if m.RecoverThreshold != 0 {
		n += 1 + sovGuard(uint64(m.RecoverThreshold))
	}
	l = len(m.EscrowPid)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	l = len(m.GuardPid)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FileStoreStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FileStoreMeta.Size()
	n += 1 + l + sovGuard(uint64(l))
	if m.State != 0 {
		n += 1 + sovGuard(uint64(m.State))
	}
	if len(m.Contracts) > 0 {
		for _, e := range m.Contracts {
			l = e.Size()
			n += 1 + l + sovGuard(uint64(l))
		}
	}
	l = len(m.RenterSignature)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.GuardReceiveTime)
	n += 1 + l + sovGuard(uint64(l))
	if len(m.ChangeLog) > 0 {
		for _, e := range m.ChangeLog {
			l = e.Size()
			n += 1 + l + sovGuard(uint64(l))
		}
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.CurrentTime)
	n += 1 + l + sovGuard(uint64(l))
	l = len(m.GuardSignature)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	if m.RentalState != 0 {
		n += 1 + sovGuard(uint64(m.RentalState))
	}
	l = len(m.PreparerPid)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	l = len(m.PreparerSignature)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChallengeQuestion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ShardHash)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	l = len(m.HostPid)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	if m.ChunkIndex != 0 {
		n += 1 + sovGuard(uint64(m.ChunkIndex))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	l = len(m.ExpectAnswer)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProofOfReplicateChallenge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ChallengeQuestion.Size()
	n += 1 + l + sovGuard(uint64(l))
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.ChallengeTime)
	n += 1 + l + sovGuard(uint64(l))
	l = len(m.GuardPid)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	l = len(m.GuardSignature)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	l = len(m.HostAnswer)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.HostSignTime)
	n += 1 + l + sovGuard(uint64(l))
	l = len(m.HostSignature)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FileChallengeQuestions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileHash)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	if len(m.ShardQuestions) > 0 {
		for _, e := range m.ShardQuestions {
			l = e.Size()
			n += 1 + l + sovGuard(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardChallengeQuestions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileHash)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	l = len(m.ShardHash)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	l = len(m.PreparerPid)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	if m.QuestionCount != 0 {
		n += 1 + sovGuard(uint64(m.QuestionCount))
	}
	if len(m.Questions) > 0 {
		for _, e := range m.Questions {
			l = e.Size()
			n += 1 + l + sovGuard(uint64(l))
		}
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.PrepareTime)
	n += 1 + l + sovGuard(uint64(l))
	l = len(m.PreparerSignature)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckFileStoreMetaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileHash)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	l = len(m.RenterPid)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	l = len(m.RequesterPid)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.RequestTime)
	n += 1 + l + sovGuard(uint64(l))
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Result) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovGuard(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.ResponseTime)
	n += 1 + l + sovGuard(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovGuard(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGuard(x uint64) (n int) {
	return sovGuard(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Log) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Log: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Log: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.ChangeTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginatorPid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginatorPid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Change", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Change = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenterPid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RenterPid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostPid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostPid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardIndex", wireType)
			}
			m.ShardIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardFileSize", wireType)
			}
			m.ShardFileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardFileSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RentStart", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.RentStart, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RentEnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.RentEnd, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuardPid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuardPid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowPid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowPid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralAmount", wireType)
			}
			m.CollateralAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollateralAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayoutSchedule", wireType)
			}
			m.PayoutSchedule = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayoutSchedule |= ContractMeta_Schedule(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumPayouts", wireType)
			}
			m.NumPayouts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumPayouts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Contract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Contract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Contract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ContractMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= Contract_ContractState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenterSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RenterSignature = append(m.RenterSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.RenterSignature == nil {
				m.RenterSignature = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostSignature = append(m.HostSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.HostSignature == nil {
				m.HostSignature = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowSignedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.EscrowSignedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowSignature = append(m.EscrowSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.EscrowSignature == nil {
				m.EscrowSignature = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChangeLog = append(m.ChangeLog, &Log{})
			if err := m.ChangeLog[len(m.ChangeLog)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastModifyTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.LastModifyTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuardSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuardSignature = append(m.GuardSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.GuardSignature == nil {
				m.GuardSignature = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreparerPid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreparerPid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreparerSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreparerSignature = append(m.PreparerSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.PreparerSignature == nil {
				m.PreparerSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileStoreMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileStoreMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileStoreMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenterPid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RenterPid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RentStart", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.RentStart, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RentEnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.RentEnd, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckFrequency", wireType)
			}
			m.CheckFrequency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckFrequency |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuardFee", wireType)
			}
			m.GuardFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuardFee |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowFee", wireType)
			}
			m.EscrowFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EscrowFee |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardCount", wireType)
			}
			m.ShardCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumShards", wireType)
			}
			m.MinimumShards = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinimumShards |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoverThreshold", wireType)
			}
			m.RecoverThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecoverThreshold |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowPid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowPid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuardPid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuardPid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileStoreStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileStoreStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileStoreStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileStoreMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FileStoreMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= FileStoreStatus_MetaState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contracts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contracts = append(m.Contracts, Contract{})
			if err := m.Contracts[len(m.Contracts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenterSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RenterSignature = append(m.RenterSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.RenterSignature == nil {
				m.RenterSignature = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuardReceiveTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.GuardReceiveTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChangeLog = append(m.ChangeLog, &Log{})
			if err := m.ChangeLog[len(m.ChangeLog)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.CurrentTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuardSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuardSignature = append(m.GuardSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.GuardSignature == nil {
				m.GuardSignature = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RentalState", wireType)
			}
			m.RentalState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RentalState |= FileStoreStatus_RentalState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreparerPid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreparerPid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreparerSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreparerSignature = append(m.PreparerSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.PreparerSignature == nil {
				m.PreparerSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeQuestion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeQuestion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeQuestion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostPid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostPid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkIndex", wireType)
			}
			m.ChunkIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectAnswer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectAnswer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProofOfReplicateChallenge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProofOfReplicateChallenge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProofOfReplicateChallenge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeQuestion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ChallengeQuestion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.ChallengeTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuardPid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuardPid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuardSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuardSignature = append(m.GuardSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.GuardSignature == nil {
				m.GuardSignature = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostAnswer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostAnswer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostSignTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.HostSignTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostSignature = append(m.HostSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.HostSignature == nil {
				m.HostSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileChallengeQuestions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileChallengeQuestions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileChallengeQuestions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardQuestions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardQuestions = append(m.ShardQuestions, ShardChallengeQuestions{})
			if err := m.ShardQuestions[len(m.ShardQuestions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardChallengeQuestions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardChallengeQuestions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardChallengeQuestions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreparerPid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreparerPid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestionCount", wireType)
			}
			m.QuestionCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuestionCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Questions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Questions = append(m.Questions, ChallengeQuestion{})
			if err := m.Questions[len(m.Questions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrepareTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.PrepareTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreparerSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreparerSignature = append(m.PreparerSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.PreparerSignature == nil {
				m.PreparerSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckFileStoreMetaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckFileStoreMetaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckFileStoreMetaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenterPid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RenterPid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequesterPid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequesterPid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.RequestTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Result) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Result: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Result: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ResponseCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuard
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.ResponseTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuard
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGuard(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGuard
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGuard
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGuard
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGuard
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGuard        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGuard          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGuard = fmt.Errorf("proto: unexpected end of group")
)
