// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protos/hub/hub.proto

package hub

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	node "github.com/tron-us/go-btfs-common/protos/node"
	_ "github.com/tron-us/protobuf/gogoproto"
	proto "github.com/tron-us/protobuf/proto"
	github_com_tron_us_protobuf_types "github.com/tron-us/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ResponseCode int32

const (
	ResponseCode_SUCCESS                ResponseCode = 0
	ResponseCode_SIGNATURE_FORMAT_ERROR ResponseCode = 1
	ResponseCode_COMPUTE_ADDRESS_ERROR  ResponseCode = 2
	ResponseCode_OTHER_ERROR            ResponseCode = 20
)

var ResponseCode_name = map[int32]string{
	0:  "SUCCESS",
	1:  "SIGNATURE_FORMAT_ERROR",
	2:  "COMPUTE_ADDRESS_ERROR",
	20: "OTHER_ERROR",
}

var ResponseCode_value = map[string]int32{
	"SUCCESS":                0,
	"SIGNATURE_FORMAT_ERROR": 1,
	"COMPUTE_ADDRESS_ERROR":  2,
	"OTHER_ERROR":            20,
}

func (x ResponseCode) String() string {
	return proto.EnumName(ResponseCode_name, int32(x))
}

func (ResponseCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c704b5990190a69f, []int{0}
}

type SettingsReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" pg:"id"`
	RespSize             int32    `protobuf:"varint,2,opt,name=resp_size,json=respSize,proto3" json:"resp_size,omitempty" pg:"resp_size"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" pg:"-"`
	XXX_unrecognized     []byte   `json:"-" pg:"-"`
	XXX_sizecache        int32    `json:"-" pg:"-"`
}

func (m *SettingsReq) Reset()         { *m = SettingsReq{} }
func (m *SettingsReq) String() string { return proto.CompactTextString(m) }
func (*SettingsReq) ProtoMessage()    {}
func (*SettingsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c704b5990190a69f, []int{0}
}
func (m *SettingsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SettingsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SettingsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SettingsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettingsReq.Merge(m, src)
}
func (m *SettingsReq) XXX_Size() int {
	return m.Size()
}
func (m *SettingsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SettingsReq.DiscardUnknown(m)
}

var xxx_messageInfo_SettingsReq proto.InternalMessageInfo

func (m *SettingsReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SettingsReq) GetRespSize() int32 {
	if m != nil {
		return m.RespSize
	}
	return 0
}

func (*SettingsReq) XXX_MessageName() string {
	return "hub.SettingsReq"
}

type SettingsResp struct {
	Code                 ResponseCode  `protobuf:"varint,1,opt,name=code,proto3,enum=hub.ResponseCode" json:"code,omitempty" pg:"code"`
	Message              string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty" pg:"message"`
	ResponseTime         time.Time     `protobuf:"bytes,3,opt,name=response_time,json=responseTime,proto3,stdtime" json:"response_time" pg:"response_time"`
	SettingsData         *SettingsData `protobuf:"bytes,4,opt,name=settings_data,json=settingsData,proto3" json:"settings_data,omitempty" pg:"settings_data"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-" pg:"-"`
	XXX_unrecognized     []byte        `json:"-" pg:"-"`
	XXX_sizecache        int32         `json:"-" pg:"-"`
}

func (m *SettingsResp) Reset()         { *m = SettingsResp{} }
func (m *SettingsResp) String() string { return proto.CompactTextString(m) }
func (*SettingsResp) ProtoMessage()    {}
func (*SettingsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c704b5990190a69f, []int{1}
}
func (m *SettingsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SettingsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SettingsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SettingsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettingsResp.Merge(m, src)
}
func (m *SettingsResp) XXX_Size() int {
	return m.Size()
}
func (m *SettingsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SettingsResp.DiscardUnknown(m)
}

var xxx_messageInfo_SettingsResp proto.InternalMessageInfo

func (m *SettingsResp) GetCode() ResponseCode {
	if m != nil {
		return m.Code
	}
	return ResponseCode_SUCCESS
}

func (m *SettingsResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SettingsResp) GetResponseTime() time.Time {
	if m != nil {
		return m.ResponseTime
	}
	return time.Time{}
}

func (m *SettingsResp) GetSettingsData() *SettingsData {
	if m != nil {
		return m.SettingsData
	}
	return nil
}

func (*SettingsResp) XXX_MessageName() string {
	return "hub.SettingsResp"
}

type SettingsData struct {
	StoragePriceAsk      float64  `protobuf:"fixed64,1,opt,name=storage_price_ask,json=storagePriceAsk,proto3" json:"storage_price_ask,omitempty" pg:"storage_price_ask"`
	BandwidthPriceAsk    float64  `protobuf:"fixed64,2,opt,name=bandwidth_price_ask,json=bandwidthPriceAsk,proto3" json:"bandwidth_price_ask,omitempty" pg:"bandwidth_price_ask"`
	StorageTimeMin       float64  `protobuf:"fixed64,3,opt,name=storage_time_min,json=storageTimeMin,proto3" json:"storage_time_min,omitempty" pg:"storage_time_min"`
	BandwidthLimit       float64  `protobuf:"fixed64,4,opt,name=bandwidth_limit,json=bandwidthLimit,proto3" json:"bandwidth_limit,omitempty" pg:"bandwidth_limit"`
	CollateralStake      float64  `protobuf:"fixed64,5,opt,name=collateral_stake,json=collateralStake,proto3" json:"collateral_stake,omitempty" pg:"collateral_stake"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" pg:"-"`
	XXX_unrecognized     []byte   `json:"-" pg:"-"`
	XXX_sizecache        int32    `json:"-" pg:"-"`
}

func (m *SettingsData) Reset()         { *m = SettingsData{} }
func (m *SettingsData) String() string { return proto.CompactTextString(m) }
func (*SettingsData) ProtoMessage()    {}
func (*SettingsData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c704b5990190a69f, []int{2}
}
func (m *SettingsData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SettingsData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SettingsData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SettingsData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettingsData.Merge(m, src)
}
func (m *SettingsData) XXX_Size() int {
	return m.Size()
}
func (m *SettingsData) XXX_DiscardUnknown() {
	xxx_messageInfo_SettingsData.DiscardUnknown(m)
}

var xxx_messageInfo_SettingsData proto.InternalMessageInfo

func (m *SettingsData) GetStoragePriceAsk() float64 {
	if m != nil {
		return m.StoragePriceAsk
	}
	return 0
}

func (m *SettingsData) GetBandwidthPriceAsk() float64 {
	if m != nil {
		return m.BandwidthPriceAsk
	}
	return 0
}

func (m *SettingsData) GetStorageTimeMin() float64 {
	if m != nil {
		return m.StorageTimeMin
	}
	return 0
}

func (m *SettingsData) GetBandwidthLimit() float64 {
	if m != nil {
		return m.BandwidthLimit
	}
	return 0
}

func (m *SettingsData) GetCollateralStake() float64 {
	if m != nil {
		return m.CollateralStake
	}
	return 0
}

func (*SettingsData) XXX_MessageName() string {
	return "hub.SettingsData"
}

type HostsReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" pg:"id"`
	RespSize             int32    `protobuf:"varint,2,opt,name=resp_size,json=respSize,proto3" json:"resp_size,omitempty" pg:"resp_size"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" pg:"-"`
	XXX_unrecognized     []byte   `json:"-" pg:"-"`
	XXX_sizecache        int32    `json:"-" pg:"-"`
}

func (m *HostsReq) Reset()         { *m = HostsReq{} }
func (m *HostsReq) String() string { return proto.CompactTextString(m) }
func (*HostsReq) ProtoMessage()    {}
func (*HostsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c704b5990190a69f, []int{3}
}
func (m *HostsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostsReq.Merge(m, src)
}
func (m *HostsReq) XXX_Size() int {
	return m.Size()
}
func (m *HostsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HostsReq.DiscardUnknown(m)
}

var xxx_messageInfo_HostsReq proto.InternalMessageInfo

func (m *HostsReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *HostsReq) GetRespSize() int32 {
	if m != nil {
		return m.RespSize
	}
	return 0
}

func (*HostsReq) XXX_MessageName() string {
	return "hub.HostsReq"
}

type HostsResp struct {
	Code                 ResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=hub.ResponseCode" json:"code,omitempty" pg:"code"`
	Message              string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty" pg:"message"`
	Hosts                *HostsData   `protobuf:"bytes,3,opt,name=hosts,proto3" json:"hosts,omitempty" pg:"hosts"`
	RespSize             int32        `protobuf:"varint,4,opt,name=resp_size,json=respSize,proto3" json:"resp_size,omitempty" pg:"resp_size"`
	Mode                 string       `protobuf:"bytes,5,opt,name=mode,proto3" json:"mode,omitempty" pg:"mode"`
	ResponseTime         time.Time    `protobuf:"bytes,6,opt,name=response_time,json=responseTime,proto3,stdtime" json:"response_time" pg:"response_time"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" pg:"-"`
	XXX_unrecognized     []byte       `json:"-" pg:"-"`
	XXX_sizecache        int32        `json:"-" pg:"-"`
}

func (m *HostsResp) Reset()         { *m = HostsResp{} }
func (m *HostsResp) String() string { return proto.CompactTextString(m) }
func (*HostsResp) ProtoMessage()    {}
func (*HostsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c704b5990190a69f, []int{4}
}
func (m *HostsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostsResp.Merge(m, src)
}
func (m *HostsResp) XXX_Size() int {
	return m.Size()
}
func (m *HostsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_HostsResp.DiscardUnknown(m)
}

var xxx_messageInfo_HostsResp proto.InternalMessageInfo

func (m *HostsResp) GetCode() ResponseCode {
	if m != nil {
		return m.Code
	}
	return ResponseCode_SUCCESS
}

func (m *HostsResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *HostsResp) GetHosts() *HostsData {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func (m *HostsResp) GetRespSize() int32 {
	if m != nil {
		return m.RespSize
	}
	return 0
}

func (m *HostsResp) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *HostsResp) GetResponseTime() time.Time {
	if m != nil {
		return m.ResponseTime
	}
	return time.Time{}
}

func (*HostsResp) XXX_MessageName() string {
	return "hub.HostsResp"
}

type HostsData struct {
	Hosts                []*Host  `protobuf:"bytes,1,rep,name=hosts,proto3" json:"hosts,omitempty" pg:"hosts"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" pg:"-"`
	XXX_unrecognized     []byte   `json:"-" pg:"-"`
	XXX_sizecache        int32    `json:"-" pg:"-"`
}

func (m *HostsData) Reset()         { *m = HostsData{} }
func (m *HostsData) String() string { return proto.CompactTextString(m) }
func (*HostsData) ProtoMessage()    {}
func (*HostsData) Descriptor() ([]byte, []int) {
	return fileDescriptor_c704b5990190a69f, []int{5}
}
func (m *HostsData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostsData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostsData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostsData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostsData.Merge(m, src)
}
func (m *HostsData) XXX_Size() int {
	return m.Size()
}
func (m *HostsData) XXX_DiscardUnknown() {
	xxx_messageInfo_HostsData.DiscardUnknown(m)
}

var xxx_messageInfo_HostsData proto.InternalMessageInfo

func (m *HostsData) GetHosts() []*Host {
	if m != nil {
		return m.Hosts
	}
	return nil
}

func (*HostsData) XXX_MessageName() string {
	return "hub.HostsData"
}

type Host struct {
	NodeId                      string    `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty" pg:"node_id"`
	CreateTimestamp             time.Time `protobuf:"bytes,2,opt,name=create_timestamp,json=createTimestamp,proto3,stdtime" json:"create_timestamp" pg:"create_timestamp"`
	UpdateTimestamp             time.Time `protobuf:"bytes,3,opt,name=update_timestamp,json=updateTimestamp,proto3,stdtime" json:"update_timestamp" pg:"update_timestamp"`
	Region                      string    `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty" pg:"region"`
	BtfsVersion                 string    `protobuf:"bytes,5,opt,name=btfs_version,json=btfsVersion,proto3" json:"btfs_version,omitempty" pg:"btfs_version"`
	Score                       float32   `protobuf:"fixed32,6,opt,name=score,proto3" json:"score,omitempty" pg:"score"`
	HeartBeats                  uint64    `protobuf:"varint,7,opt,name=heart_beats,json=heartBeats,proto3" json:"heart_beats,omitempty" pg:"heart_beats"`
	Uptime                      float32   `protobuf:"fixed32,8,opt,name=uptime,proto3" json:"uptime,omitempty" pg:"uptime"`
	Age                         uint64    `protobuf:"varint,9,opt,name=age,proto3" json:"age,omitempty" pg:"age"`
	Reputation                  float32   `protobuf:"fixed32,10,opt,name=reputation,proto3" json:"reputation,omitempty" pg:"reputation"`
	UploadAverage               float32   `protobuf:"fixed32,11,opt,name=upload_average,json=uploadAverage,proto3" json:"upload_average,omitempty" pg:"upload_average"`
	UploadVariance              float32   `protobuf:"fixed32,12,opt,name=upload_variance,json=uploadVariance,proto3" json:"upload_variance,omitempty" pg:"upload_variance"`
	DownloadAverage             float32   `protobuf:"fixed32,13,opt,name=download_average,json=downloadAverage,proto3" json:"download_average,omitempty" pg:"download_average"`
	DownloadVariance            float32   `protobuf:"fixed32,14,opt,name=download_variance,json=downloadVariance,proto3" json:"download_variance,omitempty" pg:"download_variance"`
	Location                    Location  `protobuf:"bytes,15,opt,name=location,proto3" json:"location" pg:"location"`
	StorageVolumeCap            float32   `protobuf:"fixed32,16,opt,name=storage_volume_cap,json=storageVolumeCap,proto3" json:"storage_volume_cap,omitempty" pg:"storage_volume_cap"`
	StorageVolumeLeft           float32   `protobuf:"fixed32,17,opt,name=storage_volume_left,json=storageVolumeLeft,proto3" json:"storage_volume_left,omitempty" pg:"storage_volume_left"`
	StorageTimeMin              uint64    `protobuf:"varint,18,opt,name=storage_time_min,json=storageTimeMin,proto3" json:"storage_time_min,omitempty" pg:"storage_time_min"`
	StoragePriceAsk             uint64    `protobuf:"varint,19,opt,name=storage_price_ask,json=storagePriceAsk,proto3" json:"storage_price_ask,omitempty" pg:"storage_price_ask"`
	StoragePriceEst             uint64    `protobuf:"varint,20,opt,name=storage_price_est,json=storagePriceEst,proto3" json:"storage_price_est,omitempty" pg:"storage_price_est"`
	BandwidthLimit              float64   `protobuf:"fixed64,21,opt,name=bandwidth_limit,json=bandwidthLimit,proto3" json:"bandwidth_limit,omitempty" pg:"bandwidth_limit"`
	BandwidthPriceAsk           uint64    `protobuf:"varint,22,opt,name=bandwidth_price_ask,json=bandwidthPriceAsk,proto3" json:"bandwidth_price_ask,omitempty" pg:"bandwidth_price_ask"`
	BandwidthPriceEst           uint64    `protobuf:"varint,23,opt,name=bandwidth_price_est,json=bandwidthPriceEst,proto3" json:"bandwidth_price_est,omitempty" pg:"bandwidth_price_est"`
	CollateralStake             uint64    `protobuf:"varint,24,opt,name=collateral_stake,json=collateralStake,proto3" json:"collateral_stake,omitempty" pg:"collateral_stake"`
	CollateralLost              uint64    `protobuf:"varint,25,opt,name=collateral_lost,json=collateralLost,proto3" json:"collateral_lost,omitempty" pg:"collateral_lost"`
	CollateralBurn              uint64    `protobuf:"varint,26,opt,name=collateral_burn,json=collateralBurn,proto3" json:"collateral_burn,omitempty" pg:"collateral_burn"`
	CountryShort                string    `protobuf:"bytes,27,opt,name=country_short,json=countryShort,proto3" json:"country_short,omitempty" pg:"country_short"`
	node.Node_ExperimentalFlags `protobuf:"bytes,28,opt,name=flg,proto3,embedded=flg" json:"flg" pg:"flg"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-" pg:"-"`
	XXX_unrecognized            []byte   `json:"-" pg:"-"`
	XXX_sizecache               int32    `json:"-" pg:"-"`
}

func (m *Host) Reset()         { *m = Host{} }
func (m *Host) String() string { return proto.CompactTextString(m) }
func (*Host) ProtoMessage()    {}
func (*Host) Descriptor() ([]byte, []int) {
	return fileDescriptor_c704b5990190a69f, []int{6}
}
func (m *Host) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Host) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Host.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Host) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Host.Merge(m, src)
}
func (m *Host) XXX_Size() int {
	return m.Size()
}
func (m *Host) XXX_DiscardUnknown() {
	xxx_messageInfo_Host.DiscardUnknown(m)
}

var xxx_messageInfo_Host proto.InternalMessageInfo

func (m *Host) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *Host) GetCreateTimestamp() time.Time {
	if m != nil {
		return m.CreateTimestamp
	}
	return time.Time{}
}

func (m *Host) GetUpdateTimestamp() time.Time {
	if m != nil {
		return m.UpdateTimestamp
	}
	return time.Time{}
}

func (m *Host) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *Host) GetBtfsVersion() string {
	if m != nil {
		return m.BtfsVersion
	}
	return ""
}

func (m *Host) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *Host) GetHeartBeats() uint64 {
	if m != nil {
		return m.HeartBeats
	}
	return 0
}

func (m *Host) GetUptime() float32 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *Host) GetAge() uint64 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *Host) GetReputation() float32 {
	if m != nil {
		return m.Reputation
	}
	return 0
}

func (m *Host) GetUploadAverage() float32 {
	if m != nil {
		return m.UploadAverage
	}
	return 0
}

func (m *Host) GetUploadVariance() float32 {
	if m != nil {
		return m.UploadVariance
	}
	return 0
}

func (m *Host) GetDownloadAverage() float32 {
	if m != nil {
		return m.DownloadAverage
	}
	return 0
}

func (m *Host) GetDownloadVariance() float32 {
	if m != nil {
		return m.DownloadVariance
	}
	return 0
}

func (m *Host) GetLocation() Location {
	if m != nil {
		return m.Location
	}
	return Location{}
}

func (m *Host) GetStorageVolumeCap() float32 {
	if m != nil {
		return m.StorageVolumeCap
	}
	return 0
}

func (m *Host) GetStorageVolumeLeft() float32 {
	if m != nil {
		return m.StorageVolumeLeft
	}
	return 0
}

func (m *Host) GetStorageTimeMin() uint64 {
	if m != nil {
		return m.StorageTimeMin
	}
	return 0
}

func (m *Host) GetStoragePriceAsk() uint64 {
	if m != nil {
		return m.StoragePriceAsk
	}
	return 0
}

func (m *Host) GetStoragePriceEst() uint64 {
	if m != nil {
		return m.StoragePriceEst
	}
	return 0
}

func (m *Host) GetBandwidthLimit() float64 {
	if m != nil {
		return m.BandwidthLimit
	}
	return 0
}

func (m *Host) GetBandwidthPriceAsk() uint64 {
	if m != nil {
		return m.BandwidthPriceAsk
	}
	return 0
}

func (m *Host) GetBandwidthPriceEst() uint64 {
	if m != nil {
		return m.BandwidthPriceEst
	}
	return 0
}

func (m *Host) GetCollateralStake() uint64 {
	if m != nil {
		return m.CollateralStake
	}
	return 0
}

func (m *Host) GetCollateralLost() uint64 {
	if m != nil {
		return m.CollateralLost
	}
	return 0
}

func (m *Host) GetCollateralBurn() uint64 {
	if m != nil {
		return m.CollateralBurn
	}
	return 0
}

func (m *Host) GetCountryShort() string {
	if m != nil {
		return m.CountryShort
	}
	return ""
}

func (*Host) XXX_MessageName() string {
	return "hub.Host"
}

type Location struct {
	Lat                  float64  `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty" pg:"lat"`
	Lon                  float64  `protobuf:"fixed64,2,opt,name=lon,proto3" json:"lon,omitempty" pg:"lon"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" pg:"-"`
	XXX_unrecognized     []byte   `json:"-" pg:"-"`
	XXX_sizecache        int32    `json:"-" pg:"-"`
}

func (m *Location) Reset()         { *m = Location{} }
func (m *Location) String() string { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()    {}
func (*Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_c704b5990190a69f, []int{7}
}
func (m *Location) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Location.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location.Merge(m, src)
}
func (m *Location) XXX_Size() int {
	return m.Size()
}
func (m *Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Location.DiscardUnknown(m)
}

var xxx_messageInfo_Location proto.InternalMessageInfo

func (m *Location) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Location) GetLon() float64 {
	if m != nil {
		return m.Lon
	}
	return 0
}

func (*Location) XXX_MessageName() string {
	return "hub.Location"
}
func init() {
	proto.RegisterEnum("hub.ResponseCode", ResponseCode_name, ResponseCode_value)
	golang_proto.RegisterEnum("hub.ResponseCode", ResponseCode_name, ResponseCode_value)
	proto.RegisterType((*SettingsReq)(nil), "hub.SettingsReq")
	golang_proto.RegisterType((*SettingsReq)(nil), "hub.SettingsReq")
	proto.RegisterType((*SettingsResp)(nil), "hub.SettingsResp")
	golang_proto.RegisterType((*SettingsResp)(nil), "hub.SettingsResp")
	proto.RegisterType((*SettingsData)(nil), "hub.SettingsData")
	golang_proto.RegisterType((*SettingsData)(nil), "hub.SettingsData")
	proto.RegisterType((*HostsReq)(nil), "hub.HostsReq")
	golang_proto.RegisterType((*HostsReq)(nil), "hub.HostsReq")
	proto.RegisterType((*HostsResp)(nil), "hub.HostsResp")
	golang_proto.RegisterType((*HostsResp)(nil), "hub.HostsResp")
	proto.RegisterType((*HostsData)(nil), "hub.HostsData")
	golang_proto.RegisterType((*HostsData)(nil), "hub.HostsData")
	proto.RegisterType((*Host)(nil), "hub.Host")
	golang_proto.RegisterType((*Host)(nil), "hub.Host")
	proto.RegisterType((*Location)(nil), "hub.Location")
	golang_proto.RegisterType((*Location)(nil), "hub.Location")
}

func init() { proto.RegisterFile("protos/hub/hub.proto", fileDescriptor_c704b5990190a69f) }
func init() { golang_proto.RegisterFile("protos/hub/hub.proto", fileDescriptor_c704b5990190a69f) }

var fileDescriptor_c704b5990190a69f = []byte{
	// 1133 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x0e, 0x65, 0xd9, 0x96, 0x46, 0xff, 0x1b, 0x27, 0x61, 0x94, 0x40, 0x72, 0xd5, 0x06, 0x55,
	0xd2, 0x44, 0x2a, 0x5c, 0x20, 0x0d, 0x7a, 0xb3, 0x1c, 0xc5, 0x36, 0x60, 0xc7, 0x2e, 0x65, 0xfb,
	0xd0, 0x0b, 0xb1, 0x22, 0xd7, 0x14, 0x61, 0x8a, 0xcb, 0x70, 0x97, 0x4e, 0x93, 0xa7, 0xe8, 0xb1,
	0x40, 0x5f, 0xa6, 0x47, 0x1f, 0x83, 0x3e, 0x40, 0x5a, 0xd8, 0x97, 0x9e, 0xfa, 0x0c, 0xc5, 0x2c,
	0x49, 0xfd, 0xd8, 0x2a, 0xd0, 0x14, 0x3d, 0x48, 0xe0, 0x7c, 0xf3, 0xcd, 0xe8, 0x9b, 0xfd, 0xf9,
	0x28, 0x58, 0x0b, 0x42, 0x2e, 0xb9, 0xe8, 0x8e, 0xa2, 0x21, 0x7e, 0x3a, 0x2a, 0x24, 0x4b, 0xa3,
	0x68, 0x58, 0x7f, 0xe1, 0xb8, 0x12, 0x21, 0x8b, 0x8f, 0xbb, 0x32, 0xe4, 0xfe, 0xb3, 0x48, 0x74,
	0x1d, 0xfe, 0x6c, 0x28, 0x4f, 0xc5, 0x33, 0x8b, 0x8f, 0xc7, 0xdc, 0xef, 0x26, 0xc5, 0x3e, 0xb7,
	0x99, 0xfa, 0x8a, 0xcb, 0xeb, 0x5f, 0x2f, 0xa8, 0x54, 0x99, 0x61, 0x74, 0xda, 0x75, 0xb8, 0xc3,
	0x55, 0xa0, 0x9e, 0x92, 0x8a, 0xa6, 0xc3, 0xb9, 0xe3, 0xb1, 0x29, 0x4b, 0xba, 0x63, 0x26, 0x24,
	0x1d, 0x07, 0x31, 0xa1, 0xf5, 0x1d, 0x14, 0x06, 0x4c, 0x4a, 0xd7, 0x77, 0x84, 0xc1, 0xde, 0x90,
	0x32, 0x64, 0x5c, 0x5b, 0xd7, 0xd6, 0xb5, 0x76, 0xde, 0xc8, 0xb8, 0x36, 0x79, 0x00, 0xf9, 0x90,
	0x89, 0xc0, 0x14, 0xee, 0x7b, 0xa6, 0x67, 0xd6, 0xb5, 0xf6, 0xb2, 0x91, 0x43, 0x60, 0xe0, 0xbe,
	0x67, 0xad, 0xdf, 0x34, 0x28, 0x4e, 0x8b, 0x45, 0x40, 0x1e, 0x41, 0xd6, 0xe2, 0x36, 0x53, 0xf5,
	0xe5, 0x8d, 0x5a, 0x07, 0xb5, 0x62, 0x82, 0xfb, 0x82, 0x6d, 0x71, 0x9b, 0x19, 0x2a, 0x4d, 0x74,
	0x58, 0x1d, 0x33, 0x21, 0xa8, 0x13, 0xb7, 0xcc, 0x1b, 0x69, 0x48, 0x76, 0xa1, 0x14, 0x26, 0x7c,
	0x13, 0x95, 0xea, 0x4b, 0xeb, 0x5a, 0xbb, 0xb0, 0x51, 0xef, 0xc4, 0x63, 0x74, 0xd2, 0x31, 0x3a,
	0x47, 0xe9, 0x18, 0xbd, 0xdc, 0xc5, 0xc7, 0xe6, 0xad, 0x9f, 0x7e, 0x6f, 0x6a, 0x46, 0x31, 0x2d,
	0xc5, 0x24, 0x79, 0x0e, 0x25, 0x91, 0x68, 0x33, 0x6d, 0x2a, 0xa9, 0x9e, 0x55, 0xad, 0x62, 0x51,
	0xa9, 0xea, 0x97, 0x54, 0x52, 0xa3, 0x28, 0x66, 0xa2, 0xd6, 0x9f, 0x33, 0x43, 0x21, 0x40, 0x9e,
	0x40, 0x4d, 0x48, 0x1e, 0x52, 0x87, 0x99, 0x41, 0xe8, 0x5a, 0xcc, 0xa4, 0xe2, 0x4c, 0x4d, 0xa8,
	0x19, 0x95, 0x24, 0x71, 0x88, 0xf8, 0xa6, 0x38, 0x23, 0x1d, 0xb8, 0x3d, 0xa4, 0xbe, 0xfd, 0xd6,
	0xb5, 0xe5, 0x68, 0x86, 0x9d, 0x51, 0xec, 0xda, 0x24, 0x35, 0xe1, 0xb7, 0xa1, 0x9a, 0xf6, 0xc6,
	0x71, 0xcd, 0xb1, 0xeb, 0xab, 0x91, 0x35, 0xa3, 0x9c, 0xe0, 0x38, 0xcb, 0xbe, 0xeb, 0x93, 0x2f,
	0xa1, 0x32, 0xed, 0xec, 0xb9, 0x63, 0x57, 0xaa, 0x81, 0x34, 0xa3, 0x3c, 0x81, 0xf7, 0x10, 0x25,
	0x8f, 0xa1, 0x6a, 0x71, 0xcf, 0xa3, 0x92, 0x85, 0xd4, 0x33, 0x85, 0xa4, 0x67, 0x4c, 0x5f, 0x8e,
	0xd5, 0x4e, 0xf1, 0x01, 0xc2, 0xad, 0x6f, 0x21, 0xb7, 0xc3, 0x85, 0xfc, 0xf4, 0x8d, 0xff, 0x4b,
	0x83, 0x7c, 0x52, 0xf9, 0x7f, 0xec, 0xfa, 0x17, 0xb0, 0x3c, 0xc2, 0x6e, 0xc9, 0x6e, 0x97, 0x55,
	0x07, 0xd5, 0x5f, 0xed, 0x4f, 0x9c, 0x9c, 0x57, 0x94, 0x9d, 0x57, 0x44, 0x08, 0x64, 0xc7, 0xa8,
	0x61, 0x59, 0x75, 0x56, 0xcf, 0x37, 0x0f, 0xd3, 0xca, 0x7f, 0x3d, 0x4c, 0xad, 0xa7, 0xc9, 0xbc,
	0xea, 0x40, 0x34, 0x53, 0xb9, 0xda, 0xfa, 0x52, 0xbb, 0xb0, 0x91, 0x9f, 0xc8, 0x4d, 0x94, 0xb6,
	0x7e, 0xc9, 0x43, 0x16, 0x63, 0x72, 0x0f, 0x56, 0xf1, 0xf6, 0x9a, 0x93, 0x95, 0x5d, 0xc1, 0x70,
	0xd7, 0x26, 0x07, 0x50, 0xb5, 0x42, 0x46, 0x65, 0x2c, 0x4c, 0xfd, 0xb6, 0x5a, 0x94, 0x7f, 0xab,
	0xae, 0x12, 0x57, 0x4f, 0x52, 0xd8, 0x30, 0x0a, 0xec, 0xf9, 0x86, 0x9f, 0x72, 0x77, 0x2a, 0x71,
	0xf5, 0xb4, 0xe1, 0x5d, 0x58, 0x09, 0x99, 0xe3, 0x72, 0x5f, 0x2d, 0x75, 0xde, 0x48, 0x22, 0xf2,
	0x19, 0x14, 0xd1, 0xa8, 0xcc, 0x73, 0x16, 0x0a, 0xcc, 0xc6, 0x0b, 0x5e, 0x40, 0xec, 0x24, 0x86,
	0xc8, 0x1a, 0x2c, 0x0b, 0x8b, 0x87, 0xf1, 0x7a, 0x67, 0x8c, 0x38, 0x20, 0x4d, 0x28, 0x8c, 0x18,
	0x0d, 0xa5, 0x39, 0x64, 0x54, 0x0a, 0x7d, 0x75, 0x5d, 0x6b, 0x67, 0x0d, 0x50, 0x50, 0x0f, 0x11,
	0xfc, 0xc5, 0x28, 0x50, 0xfb, 0x94, 0x53, 0x75, 0x49, 0x44, 0xaa, 0xb0, 0x84, 0x67, 0x26, 0xaf,
	0x0a, 0xf0, 0x91, 0x34, 0x00, 0x42, 0x16, 0x44, 0x92, 0x4a, 0x54, 0x00, 0x8a, 0x3d, 0x83, 0x90,
	0x47, 0x50, 0x8e, 0x02, 0x8f, 0x53, 0xdb, 0xa4, 0xe7, 0x0c, 0x2f, 0x91, 0x5e, 0x50, 0x9c, 0x52,
	0x8c, 0x6e, 0xc6, 0x20, 0x5e, 0xa9, 0x84, 0x76, 0x4e, 0x43, 0x97, 0xfa, 0x16, 0xd3, 0x8b, 0x8a,
	0x97, 0x54, 0x9f, 0x24, 0x28, 0x5e, 0x29, 0x9b, 0xbf, 0xf5, 0xe7, 0x3a, 0x96, 0x14, 0xb3, 0x92,
	0xe2, 0x69, 0xcf, 0xaf, 0xa0, 0x36, 0xa1, 0x4e, 0xba, 0x96, 0x15, 0x77, 0xd2, 0x63, 0xd2, 0xb7,
	0x0b, 0x39, 0x8f, 0x5b, 0xf1, 0x14, 0x15, 0xb5, 0x59, 0x25, 0x75, 0x96, 0xf6, 0x12, 0xb0, 0x97,
	0xc5, 0xfd, 0x31, 0x26, 0x24, 0xf2, 0x14, 0x48, 0x6a, 0x17, 0xe7, 0xdc, 0x8b, 0xc6, 0xcc, 0xb4,
	0x68, 0xa0, 0x57, 0xe3, 0xf6, 0x49, 0xe6, 0x44, 0x25, 0xb6, 0x68, 0x80, 0x66, 0x74, 0x8d, 0xed,
	0xb1, 0x53, 0xa9, 0xd7, 0x14, 0xbd, 0x36, 0x47, 0xdf, 0x63, 0xa7, 0x72, 0xa1, 0x19, 0x11, 0xb5,
	0xea, 0xd7, 0xcd, 0x68, 0xa1, 0x25, 0xde, 0x56, 0xd4, 0x1b, 0x96, 0x78, 0x83, 0xcb, 0x84, 0xd4,
	0xd7, 0x6e, 0x72, 0xfb, 0x42, 0x2e, 0x32, 0xb9, 0x3b, 0x0b, 0x4d, 0xee, 0x1f, 0x7c, 0xf6, 0xae,
	0x6a, 0xbb, 0xc0, 0x67, 0x17, 0xf0, 0x51, 0xc6, 0xbd, 0x45, 0x7c, 0x14, 0xb2, 0xc8, 0x44, 0xf5,
	0x58, 0xf3, 0x35, 0x13, 0x45, 0xcd, 0x33, 0x54, 0x8f, 0x0b, 0xa9, 0xdf, 0x8f, 0x17, 0x6d, 0x0a,
	0xef, 0xf1, 0x78, 0xb8, 0x19, 0xe2, 0x30, 0x0a, 0x7d, 0xbd, 0x7e, 0x9d, 0xd8, 0x8b, 0x42, 0x9f,
	0x7c, 0x0e, 0x25, 0x8b, 0x47, 0xbe, 0x0c, 0xdf, 0x99, 0x62, 0xc4, 0x43, 0xa9, 0x3f, 0x50, 0x77,
	0xac, 0x98, 0x80, 0x03, 0xc4, 0xc8, 0x0b, 0x58, 0x3a, 0xf5, 0x1c, 0xfd, 0xa1, 0x3a, 0x36, 0x0f,
	0x3b, 0xea, 0x4f, 0xc2, 0x6b, 0xfc, 0xea, 0xff, 0x18, 0xb0, 0xd0, 0x1d, 0x33, 0x5f, 0x52, 0xef,
	0x95, 0x47, 0x1d, 0x11, 0xdf, 0xf2, 0x0f, 0x1f, 0x9b, 0x9a, 0x81, 0x25, 0xad, 0x0e, 0xe4, 0xd2,
	0x03, 0x86, 0x77, 0xcb, 0xa3, 0x32, 0x79, 0x9b, 0xe1, 0xa3, 0x42, 0xb8, 0x9f, 0xbc, 0xb1, 0xf0,
	0xf1, 0x89, 0x05, 0xc5, 0x59, 0x37, 0x27, 0x05, 0x58, 0x1d, 0x1c, 0x6f, 0x6d, 0xf5, 0x07, 0x83,
	0xea, 0x2d, 0x52, 0x87, 0xbb, 0x83, 0xdd, 0xed, 0xd7, 0x9b, 0x47, 0xc7, 0x46, 0xdf, 0x7c, 0x75,
	0x60, 0xec, 0x6f, 0x1e, 0x99, 0x7d, 0xc3, 0x38, 0x30, 0xaa, 0x1a, 0xb9, 0x0f, 0x77, 0xb6, 0x0e,
	0xf6, 0x0f, 0x8f, 0x8f, 0xfa, 0xe6, 0xe6, 0xcb, 0x97, 0x46, 0x7f, 0x30, 0x48, 0x52, 0x19, 0x52,
	0x81, 0xc2, 0xc1, 0xd1, 0x4e, 0xdf, 0x48, 0x80, 0xb5, 0x8d, 0x00, 0x2a, 0x3b, 0xd1, 0xf0, 0xfb,
	0x88, 0x85, 0xef, 0x06, 0x2c, 0x3c, 0x77, 0x2d, 0x46, 0x36, 0xa0, 0xb0, 0xcd, 0x64, 0xfa, 0x2a,
	0x26, 0xd5, 0xb9, 0x17, 0xb7, 0xc1, 0xde, 0xd4, 0x6b, 0xd7, 0x10, 0x11, 0x90, 0xc7, 0x90, 0xdb,
	0x66, 0x52, 0x59, 0x35, 0x29, 0x4d, 0x5f, 0x23, 0xc8, 0x2e, 0xcf, 0x86, 0x22, 0xe8, 0x3d, 0xbf,
	0xb8, 0x6c, 0x68, 0x1f, 0x2e, 0x1b, 0xda, 0x1f, 0x97, 0x0d, 0xed, 0xe7, 0xab, 0x86, 0xf6, 0xeb,
	0x55, 0x43, 0xbb, 0xb8, 0x6a, 0x68, 0x50, 0x70, 0x79, 0x07, 0xfd, 0x0c, 0x0b, 0x7a, 0xb9, 0x9d,
	0x68, 0x78, 0x88, 0xce, 0x79, 0xa8, 0xfd, 0x80, 0xff, 0xde, 0x86, 0x2b, 0xca, 0x47, 0xbf, 0xf9,
	0x3b, 0x00, 0x00, 0xff, 0xff, 0xe8, 0x20, 0xcb, 0x52, 0xe1, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HubQueryServiceClient is the client API for HubQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HubQueryServiceClient interface {
	GetSettings(ctx context.Context, in *SettingsReq, opts ...grpc.CallOption) (*SettingsResp, error)
	GetHosts(ctx context.Context, in *HostsReq, opts ...grpc.CallOption) (*HostsResp, error)
}

type hubQueryServiceClient struct {
	cc *grpc.ClientConn
}

func NewHubQueryServiceClient(cc *grpc.ClientConn) HubQueryServiceClient {
	return &hubQueryServiceClient{cc}
}

func (c *hubQueryServiceClient) GetSettings(ctx context.Context, in *SettingsReq, opts ...grpc.CallOption) (*SettingsResp, error) {
	out := new(SettingsResp)
	err := c.cc.Invoke(ctx, "/hub.HubQueryService/GetSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubQueryServiceClient) GetHosts(ctx context.Context, in *HostsReq, opts ...grpc.CallOption) (*HostsResp, error) {
	out := new(HostsResp)
	err := c.cc.Invoke(ctx, "/hub.HubQueryService/GetHosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HubQueryServiceServer is the server API for HubQueryService service.
type HubQueryServiceServer interface {
	GetSettings(context.Context, *SettingsReq) (*SettingsResp, error)
	GetHosts(context.Context, *HostsReq) (*HostsResp, error)
}

// UnimplementedHubQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHubQueryServiceServer struct {
}

func (*UnimplementedHubQueryServiceServer) GetSettings(ctx context.Context, req *SettingsReq) (*SettingsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettings not implemented")
}
func (*UnimplementedHubQueryServiceServer) GetHosts(ctx context.Context, req *HostsReq) (*HostsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHosts not implemented")
}

func RegisterHubQueryServiceServer(s *grpc.Server, srv HubQueryServiceServer) {
	s.RegisterService(&_HubQueryService_serviceDesc, srv)
}

func _HubQueryService_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubQueryServiceServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hub.HubQueryService/GetSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubQueryServiceServer).GetSettings(ctx, req.(*SettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubQueryService_GetHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubQueryServiceServer).GetHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hub.HubQueryService/GetHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubQueryServiceServer).GetHosts(ctx, req.(*HostsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _HubQueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hub.HubQueryService",
	HandlerType: (*HubQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSettings",
			Handler:    _HubQueryService_GetSettings_Handler,
		},
		{
			MethodName: "GetHosts",
			Handler:    _HubQueryService_GetHosts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/hub/hub.proto",
}

func (m *SettingsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SettingsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SettingsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RespSize != 0 {
		i = encodeVarintHub(dAtA, i, uint64(m.RespSize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintHub(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SettingsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SettingsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SettingsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SettingsData != nil {
		{
			size, err := m.SettingsData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHub(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	n2, err2 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.ResponseTime, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.ResponseTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintHub(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1a
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintHub(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintHub(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SettingsData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SettingsData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SettingsData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CollateralStake != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CollateralStake))))
		i--
		dAtA[i] = 0x29
	}
	if m.BandwidthLimit != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.BandwidthLimit))))
		i--
		dAtA[i] = 0x21
	}
	if m.StorageTimeMin != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.StorageTimeMin))))
		i--
		dAtA[i] = 0x19
	}
	if m.BandwidthPriceAsk != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.BandwidthPriceAsk))))
		i--
		dAtA[i] = 0x11
	}
	if m.StoragePriceAsk != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.StoragePriceAsk))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *HostsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RespSize != 0 {
		i = encodeVarintHub(dAtA, i, uint64(m.RespSize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintHub(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HostsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	n3, err3 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.ResponseTime, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.ResponseTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintHub(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x32
	if len(m.Mode) > 0 {
		i -= len(m.Mode)
		copy(dAtA[i:], m.Mode)
		i = encodeVarintHub(dAtA, i, uint64(len(m.Mode)))
		i--
		dAtA[i] = 0x2a
	}
	if m.RespSize != 0 {
		i = encodeVarintHub(dAtA, i, uint64(m.RespSize))
		i--
		dAtA[i] = 0x20
	}
	if m.Hosts != nil {
		{
			size, err := m.Hosts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHub(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintHub(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintHub(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HostsData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostsData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostsData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Hosts) > 0 {
		for iNdEx := len(m.Hosts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Hosts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHub(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Host) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Host) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Host) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.Node_ExperimentalFlags.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHub(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xe2
	if len(m.CountryShort) > 0 {
		i -= len(m.CountryShort)
		copy(dAtA[i:], m.CountryShort)
		i = encodeVarintHub(dAtA, i, uint64(len(m.CountryShort)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xda
	}
	if m.CollateralBurn != 0 {
		i = encodeVarintHub(dAtA, i, uint64(m.CollateralBurn))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.CollateralLost != 0 {
		i = encodeVarintHub(dAtA, i, uint64(m.CollateralLost))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.CollateralStake != 0 {
		i = encodeVarintHub(dAtA, i, uint64(m.CollateralStake))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.BandwidthPriceEst != 0 {
		i = encodeVarintHub(dAtA, i, uint64(m.BandwidthPriceEst))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.BandwidthPriceAsk != 0 {
		i = encodeVarintHub(dAtA, i, uint64(m.BandwidthPriceAsk))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.BandwidthLimit != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.BandwidthLimit))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa9
	}
	if m.StoragePriceEst != 0 {
		i = encodeVarintHub(dAtA, i, uint64(m.StoragePriceEst))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.StoragePriceAsk != 0 {
		i = encodeVarintHub(dAtA, i, uint64(m.StoragePriceAsk))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.StorageTimeMin != 0 {
		i = encodeVarintHub(dAtA, i, uint64(m.StorageTimeMin))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.StorageVolumeLeft != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.StorageVolumeLeft))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8d
	}
	if m.StorageVolumeCap != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.StorageVolumeCap))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x85
	}
	{
		size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintHub(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	if m.DownloadVariance != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.DownloadVariance))))
		i--
		dAtA[i] = 0x75
	}
	if m.DownloadAverage != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.DownloadAverage))))
		i--
		dAtA[i] = 0x6d
	}
	if m.UploadVariance != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.UploadVariance))))
		i--
		dAtA[i] = 0x65
	}
	if m.UploadAverage != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.UploadAverage))))
		i--
		dAtA[i] = 0x5d
	}
	if m.Reputation != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Reputation))))
		i--
		dAtA[i] = 0x55
	}
	if m.Age != 0 {
		i = encodeVarintHub(dAtA, i, uint64(m.Age))
		i--
		dAtA[i] = 0x48
	}
	if m.Uptime != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Uptime))))
		i--
		dAtA[i] = 0x45
	}
	if m.HeartBeats != 0 {
		i = encodeVarintHub(dAtA, i, uint64(m.HeartBeats))
		i--
		dAtA[i] = 0x38
	}
	if m.Score != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Score))))
		i--
		dAtA[i] = 0x35
	}
	if len(m.BtfsVersion) > 0 {
		i -= len(m.BtfsVersion)
		copy(dAtA[i:], m.BtfsVersion)
		i = encodeVarintHub(dAtA, i, uint64(len(m.BtfsVersion)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintHub(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x22
	}
	n7, err7 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.UpdateTimestamp, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.UpdateTimestamp):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintHub(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x1a
	n8, err8 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.CreateTimestamp, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.CreateTimestamp):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintHub(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0x12
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintHub(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Location) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Location) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Location) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Lon != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lon))))
		i--
		dAtA[i] = 0x11
	}
	if m.Lat != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lat))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func encodeVarintHub(dAtA []byte, offset int, v uint64) int {
	offset -= sovHub(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SettingsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovHub(uint64(l))
	}
	if m.RespSize != 0 {
		n += 1 + sovHub(uint64(m.RespSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SettingsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHub(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovHub(uint64(l))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.ResponseTime)
	n += 1 + l + sovHub(uint64(l))
	if m.SettingsData != nil {
		l = m.SettingsData.Size()
		n += 1 + l + sovHub(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SettingsData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StoragePriceAsk != 0 {
		n += 9
	}
	if m.BandwidthPriceAsk != 0 {
		n += 9
	}
	if m.StorageTimeMin != 0 {
		n += 9
	}
	if m.BandwidthLimit != 0 {
		n += 9
	}
	if m.CollateralStake != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HostsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovHub(uint64(l))
	}
	if m.RespSize != 0 {
		n += 1 + sovHub(uint64(m.RespSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HostsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHub(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovHub(uint64(l))
	}
	if m.Hosts != nil {
		l = m.Hosts.Size()
		n += 1 + l + sovHub(uint64(l))
	}
	if m.RespSize != 0 {
		n += 1 + sovHub(uint64(m.RespSize))
	}
	l = len(m.Mode)
	if l > 0 {
		n += 1 + l + sovHub(uint64(l))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.ResponseTime)
	n += 1 + l + sovHub(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HostsData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Hosts) > 0 {
		for _, e := range m.Hosts {
			l = e.Size()
			n += 1 + l + sovHub(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Host) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovHub(uint64(l))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.CreateTimestamp)
	n += 1 + l + sovHub(uint64(l))
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.UpdateTimestamp)
	n += 1 + l + sovHub(uint64(l))
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovHub(uint64(l))
	}
	l = len(m.BtfsVersion)
	if l > 0 {
		n += 1 + l + sovHub(uint64(l))
	}
	if m.Score != 0 {
		n += 5
	}
	if m.HeartBeats != 0 {
		n += 1 + sovHub(uint64(m.HeartBeats))
	}
	if m.Uptime != 0 {
		n += 5
	}
	if m.Age != 0 {
		n += 1 + sovHub(uint64(m.Age))
	}
	if m.Reputation != 0 {
		n += 5
	}
	if m.UploadAverage != 0 {
		n += 5
	}
	if m.UploadVariance != 0 {
		n += 5
	}
	if m.DownloadAverage != 0 {
		n += 5
	}
	if m.DownloadVariance != 0 {
		n += 5
	}
	l = m.Location.Size()
	n += 1 + l + sovHub(uint64(l))
	if m.StorageVolumeCap != 0 {
		n += 6
	}
	if m.StorageVolumeLeft != 0 {
		n += 6
	}
	if m.StorageTimeMin != 0 {
		n += 2 + sovHub(uint64(m.StorageTimeMin))
	}
	if m.StoragePriceAsk != 0 {
		n += 2 + sovHub(uint64(m.StoragePriceAsk))
	}
	if m.StoragePriceEst != 0 {
		n += 2 + sovHub(uint64(m.StoragePriceEst))
	}
	if m.BandwidthLimit != 0 {
		n += 10
	}
	if m.BandwidthPriceAsk != 0 {
		n += 2 + sovHub(uint64(m.BandwidthPriceAsk))
	}
	if m.BandwidthPriceEst != 0 {
		n += 2 + sovHub(uint64(m.BandwidthPriceEst))
	}
	if m.CollateralStake != 0 {
		n += 2 + sovHub(uint64(m.CollateralStake))
	}
	if m.CollateralLost != 0 {
		n += 2 + sovHub(uint64(m.CollateralLost))
	}
	if m.CollateralBurn != 0 {
		n += 2 + sovHub(uint64(m.CollateralBurn))
	}
	l = len(m.CountryShort)
	if l > 0 {
		n += 2 + l + sovHub(uint64(l))
	}
	l = m.Node_ExperimentalFlags.Size()
	n += 2 + l + sovHub(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Location) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lat != 0 {
		n += 9
	}
	if m.Lon != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovHub(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHub(x uint64) (n int) {
	return sovHub(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SettingsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SettingsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SettingsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespSize", wireType)
			}
			m.RespSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RespSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SettingsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SettingsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SettingsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ResponseCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.ResponseTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettingsData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SettingsData == nil {
				m.SettingsData = &SettingsData{}
			}
			if err := m.SettingsData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SettingsData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SettingsData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SettingsData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoragePriceAsk", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.StoragePriceAsk = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field BandwidthPriceAsk", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.BandwidthPriceAsk = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageTimeMin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.StorageTimeMin = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field BandwidthLimit", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.BandwidthLimit = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralStake", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CollateralStake = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipHub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespSize", wireType)
			}
			m.RespSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RespSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ResponseCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hosts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hosts == nil {
				m.Hosts = &HostsData{}
			}
			if err := m.Hosts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespSize", wireType)
			}
			m.RespSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RespSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.ResponseTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostsData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostsData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostsData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hosts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hosts = append(m.Hosts, &Host{})
			if err := m.Hosts[len(m.Hosts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Host) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Host: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Host: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.CreateTimestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.UpdateTimestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtfsVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtfsVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Score = float32(math.Float32frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartBeats", wireType)
			}
			m.HeartBeats = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeartBeats |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uptime", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Uptime = float32(math.Float32frombits(v))
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reputation", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Reputation = float32(math.Float32frombits(v))
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadAverage", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.UploadAverage = float32(math.Float32frombits(v))
		case 12:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadVariance", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.UploadVariance = float32(math.Float32frombits(v))
		case 13:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadAverage", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.DownloadAverage = float32(math.Float32frombits(v))
		case 14:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownloadVariance", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.DownloadVariance = float32(math.Float32frombits(v))
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageVolumeCap", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.StorageVolumeCap = float32(math.Float32frombits(v))
		case 17:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageVolumeLeft", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.StorageVolumeLeft = float32(math.Float32frombits(v))
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageTimeMin", wireType)
			}
			m.StorageTimeMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageTimeMin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoragePriceAsk", wireType)
			}
			m.StoragePriceAsk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoragePriceAsk |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoragePriceEst", wireType)
			}
			m.StoragePriceEst = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoragePriceEst |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field BandwidthLimit", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.BandwidthLimit = float64(math.Float64frombits(v))
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BandwidthPriceAsk", wireType)
			}
			m.BandwidthPriceAsk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BandwidthPriceAsk |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BandwidthPriceEst", wireType)
			}
			m.BandwidthPriceEst = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BandwidthPriceEst |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralStake", wireType)
			}
			m.CollateralStake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollateralStake |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralLost", wireType)
			}
			m.CollateralLost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollateralLost |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralBurn", wireType)
			}
			m.CollateralBurn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollateralBurn |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryShort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryShort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Node_ExperimentalFlags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Node_ExperimentalFlags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Location) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Location: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Location: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lat = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lon", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lon = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipHub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHub
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHub(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHub
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHub
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHub
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHub
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHub        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHub          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHub = fmt.Errorf("proto: unexpected end of group")
)
