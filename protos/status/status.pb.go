// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/status/status.proto

package statuspb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	node "protos/node"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Ip2Location struct {
	Ipv4                 string   `protobuf:"bytes,1,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	CountryShort         string   `protobuf:"bytes,2,opt,name=country_short,json=countryShort,proto3" json:"country_short,omitempty"`
	CountryLong          string   `protobuf:"bytes,3,opt,name=country_long,json=countryLong,proto3" json:"country_long,omitempty"`
	Region               string   `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	City                 string   `protobuf:"bytes,5,opt,name=city,proto3" json:"city,omitempty"`
	Latitude             float32  `protobuf:"fixed32,6,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude            float32  `protobuf:"fixed32,7,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Zipcode              string   `protobuf:"bytes,8,opt,name=zipcode,proto3" json:"zipcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ip2Location) Reset()         { *m = Ip2Location{} }
func (m *Ip2Location) String() string { return proto.CompactTextString(m) }
func (*Ip2Location) ProtoMessage()    {}
func (*Ip2Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9255cc60c5ca429, []int{0}
}

func (m *Ip2Location) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ip2Location.Unmarshal(m, b)
}
func (m *Ip2Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ip2Location.Marshal(b, m, deterministic)
}
func (m *Ip2Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ip2Location.Merge(m, src)
}
func (m *Ip2Location) XXX_Size() int {
	return xxx_messageInfo_Ip2Location.Size(m)
}
func (m *Ip2Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Ip2Location.DiscardUnknown(m)
}

var xxx_messageInfo_Ip2Location proto.InternalMessageInfo

func (m *Ip2Location) GetIpv4() string {
	if m != nil {
		return m.Ipv4
	}
	return ""
}

func (m *Ip2Location) GetCountryShort() string {
	if m != nil {
		return m.CountryShort
	}
	return ""
}

func (m *Ip2Location) GetCountryLong() string {
	if m != nil {
		return m.CountryLong
	}
	return ""
}

func (m *Ip2Location) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *Ip2Location) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Ip2Location) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Ip2Location) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *Ip2Location) GetZipcode() string {
	if m != nil {
		return m.Zipcode
	}
	return ""
}

type HealthData struct {
	NodeId               string               `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	BtfsVersion          string               `protobuf:"bytes,2,opt,name=btfs_version,json=btfsVersion,proto3" json:"btfs_version,omitempty"`
	FailurePoint         string               `protobuf:"bytes,3,opt,name=failure_point,json=failurePoint,proto3" json:"failure_point,omitempty"`
	TimeCreated          *timestamp.Timestamp `protobuf:"bytes,4,opt,name=time_created,json=timeCreated,proto3" json:"time_created,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *HealthData) Reset()         { *m = HealthData{} }
func (m *HealthData) String() string { return proto.CompactTextString(m) }
func (*HealthData) ProtoMessage()    {}
func (*HealthData) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9255cc60c5ca429, []int{1}
}

func (m *HealthData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthData.Unmarshal(m, b)
}
func (m *HealthData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthData.Marshal(b, m, deterministic)
}
func (m *HealthData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthData.Merge(m, src)
}
func (m *HealthData) XXX_Size() int {
	return xxx_messageInfo_HealthData.Size(m)
}
func (m *HealthData) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthData.DiscardUnknown(m)
}

var xxx_messageInfo_HealthData proto.InternalMessageInfo

func (m *HealthData) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *HealthData) GetBtfsVersion() string {
	if m != nil {
		return m.BtfsVersion
	}
	return ""
}

func (m *HealthData) GetFailurePoint() string {
	if m != nil {
		return m.FailurePoint
	}
	return ""
}

func (m *HealthData) GetTimeCreated() *timestamp.Timestamp {
	if m != nil {
		return m.TimeCreated
	}
	return nil
}

type TestError struct {
	HVal                 string               `protobuf:"bytes,1,opt,name=h_val,json=hVal,proto3" json:"h_val,omitempty"`
	PeerId               string               `protobuf:"bytes,2,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	ErrorStatus          string               `protobuf:"bytes,3,opt,name=error_status,json=errorStatus,proto3" json:"error_status,omitempty"`
	TimeCreated          *timestamp.Timestamp `protobuf:"bytes,4,opt,name=time_created,json=timeCreated,proto3" json:"time_created,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TestError) Reset()         { *m = TestError{} }
func (m *TestError) String() string { return proto.CompactTextString(m) }
func (*TestError) ProtoMessage()    {}
func (*TestError) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9255cc60c5ca429, []int{2}
}

func (m *TestError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestError.Unmarshal(m, b)
}
func (m *TestError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestError.Marshal(b, m, deterministic)
}
func (m *TestError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestError.Merge(m, src)
}
func (m *TestError) XXX_Size() int {
	return xxx_messageInfo_TestError.Size(m)
}
func (m *TestError) XXX_DiscardUnknown() {
	xxx_messageInfo_TestError.DiscardUnknown(m)
}

var xxx_messageInfo_TestError proto.InternalMessageInfo

func (m *TestError) GetHVal() string {
	if m != nil {
		return m.HVal
	}
	return ""
}

func (m *TestError) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

func (m *TestError) GetErrorStatus() string {
	if m != nil {
		return m.ErrorStatus
	}
	return ""
}

func (m *TestError) GetTimeCreated() *timestamp.Timestamp {
	if m != nil {
		return m.TimeCreated
	}
	return nil
}

type DataBag struct {
	PublicKey            []byte   `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Payload              []byte   `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataBag) Reset()         { *m = DataBag{} }
func (m *DataBag) String() string { return proto.CompactTextString(m) }
func (*DataBag) ProtoMessage()    {}
func (*DataBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9255cc60c5ca429, []int{3}
}

func (m *DataBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataBag.Unmarshal(m, b)
}
func (m *DataBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataBag.Marshal(b, m, deterministic)
}
func (m *DataBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataBag.Merge(m, src)
}
func (m *DataBag) XXX_Size() int {
	return xxx_messageInfo_DataBag.Size(m)
}
func (m *DataBag) XXX_DiscardUnknown() {
	xxx_messageInfo_DataBag.DiscardUnknown(m)
}

var xxx_messageInfo_DataBag proto.InternalMessageInfo

func (m *DataBag) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *DataBag) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *DataBag) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*Ip2Location)(nil), "status.Ip2Location")
	proto.RegisterType((*HealthData)(nil), "status.HealthData")
	proto.RegisterType((*TestError)(nil), "status.TestError")
	proto.RegisterType((*DataBag)(nil), "status.DataBag")
}

func init() { proto.RegisterFile("protos/status/status.proto", fileDescriptor_e9255cc60c5ca429) }

var fileDescriptor_e9255cc60c5ca429 = []byte{
	// 556 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xe5, 0xd2, 0x3a, 0xcd, 0xd8, 0x45, 0x62, 0x91, 0x8a, 0x65, 0x40, 0x94, 0x70, 0x29,
	0x17, 0x47, 0x4a, 0xb9, 0x20, 0xd4, 0x4b, 0x42, 0x25, 0x2a, 0x0a, 0x8a, 0xdc, 0xd2, 0x03, 0x17,
	0xb3, 0xb1, 0x27, 0xce, 0xaa, 0x8e, 0x77, 0xb5, 0x5e, 0x47, 0x32, 0xaf, 0xc2, 0x2b, 0xf0, 0x62,
	0xdc, 0x79, 0x00, 0xb4, 0x1f, 0x6e, 0x24, 0x50, 0x4e, 0x5c, 0x12, 0xcf, 0x6f, 0x66, 0x3c, 0x1f,
	0xff, 0x31, 0xc4, 0x42, 0x72, 0xc5, 0x9b, 0x71, 0xa3, 0xa8, 0x6a, 0xfb, 0xbf, 0xc4, 0x40, 0xe2,
	0x5b, 0x2b, 0x7e, 0x5a, 0x72, 0x5e, 0x56, 0x38, 0x36, 0x74, 0xd1, 0x2e, 0xc7, 0xb8, 0x16, 0xaa,
	0xb3, 0x41, 0xf1, 0x8b, 0xbf, 0x9d, 0x8a, 0xad, 0xb1, 0x51, 0x74, 0x2d, 0x5c, 0xc0, 0xb1, 0xab,
	0x50, 0xf3, 0x02, 0xcd, 0x8f, 0xe5, 0xa3, 0x5f, 0x1e, 0x04, 0x97, 0x62, 0x72, 0xc5, 0x73, 0xaa,
	0x18, 0xaf, 0x09, 0x81, 0x7d, 0x26, 0x36, 0x6f, 0x22, 0xef, 0xc4, 0x3b, 0x1d, 0xa6, 0xe6, 0x99,
	0xbc, 0x82, 0xa3, 0x9c, 0xb7, 0xb5, 0x92, 0x5d, 0xd6, 0xac, 0xb8, 0x54, 0xd1, 0x9e, 0x71, 0x86,
	0x0e, 0x5e, 0x6b, 0x46, 0x5e, 0x42, 0x6f, 0x67, 0x15, 0xaf, 0xcb, 0xe8, 0x81, 0x89, 0x09, 0x1c,
	0xbb, 0xe2, 0x75, 0x49, 0x8e, 0xc1, 0x97, 0x58, 0x32, 0x5e, 0x47, 0xfb, 0xc6, 0xe9, 0x2c, 0x5d,
	0x33, 0x67, 0xaa, 0x8b, 0x0e, 0x6c, 0x4d, 0xfd, 0x4c, 0x62, 0x38, 0xac, 0xa8, 0x62, 0xaa, 0x2d,
	0x30, 0xf2, 0x4f, 0xbc, 0xd3, 0xbd, 0xf4, 0xde, 0x26, 0xcf, 0x60, 0xa8, 0x4b, 0x58, 0xe7, 0xc0,
	0x38, 0xb7, 0x80, 0x44, 0x30, 0xf8, 0xce, 0x44, 0xce, 0x0b, 0x8c, 0x0e, 0xcd, 0x0b, 0x7b, 0x73,
	0xf4, 0xd3, 0x03, 0xf8, 0x80, 0xb4, 0x52, 0xab, 0xf7, 0x54, 0x51, 0xf2, 0x04, 0x06, 0x7a, 0x11,
	0x19, 0x2b, 0xdc, 0xb4, 0xbe, 0x36, 0x2f, 0x0b, 0x3d, 0xca, 0x42, 0x2d, 0x9b, 0x6c, 0x83, 0xb2,
	0xd1, 0xdd, 0xda, 0x71, 0x03, 0xcd, 0x6e, 0x2d, 0xd2, 0x2b, 0x59, 0x52, 0x56, 0xb5, 0x12, 0x33,
	0xc1, 0x59, 0xad, 0xdc, 0xb8, 0xa1, 0x83, 0x73, 0xcd, 0xc8, 0x39, 0x84, 0x5a, 0x86, 0x2c, 0x97,
	0x48, 0x15, 0x16, 0x66, 0xea, 0x60, 0x12, 0x27, 0x56, 0xab, 0xa4, 0xd7, 0x2a, 0xb9, 0xe9, 0xb5,
	0x4a, 0x03, 0x1d, 0x3f, 0xb3, 0xe1, 0xa3, 0x1f, 0x1e, 0x0c, 0x6f, 0xb0, 0x51, 0x17, 0x52, 0x72,
	0x49, 0x1e, 0xc3, 0xc1, 0x2a, 0xdb, 0xd0, 0xaa, 0x57, 0x66, 0x75, 0x4b, 0x2b, 0x3d, 0x82, 0x40,
	0x94, 0x7a, 0x04, 0xdb, 0xa4, 0xaf, 0x4d, 0x3b, 0x02, 0xea, 0xb4, 0xcc, 0x1e, 0x4f, 0xaf, 0x86,
	0x61, 0xd7, 0x06, 0xfd, 0x6f, 0x77, 0xdf, 0x60, 0xa0, 0xb7, 0x38, 0xa5, 0x25, 0x79, 0x0e, 0x20,
	0xda, 0x45, 0xc5, 0xf2, 0xec, 0x0e, 0x3b, 0xd3, 0x5f, 0x98, 0x0e, 0x2d, 0xf9, 0x88, 0x9d, 0x96,
	0xab, 0x61, 0x65, 0x4d, 0x55, 0x2b, 0xd1, 0xb4, 0x19, 0xa6, 0x5b, 0xa0, 0xe5, 0x12, 0xb4, 0xab,
	0x38, 0x2d, 0x4c, 0x93, 0x61, 0xda, 0x9b, 0x93, 0xdf, 0x1e, 0xf8, 0xae, 0xd7, 0x33, 0x38, 0xfa,
	0x22, 0x0a, 0xaa, 0xf0, 0x13, 0x2a, 0xc9, 0xf2, 0x86, 0x40, 0x62, 0x6e, 0xf8, 0x33, 0x2f, 0x30,
	0x3e, 0xfe, 0xa7, 0xe5, 0x0b, 0xfd, 0x65, 0x90, 0x77, 0x70, 0x34, 0xe3, 0x55, 0x85, 0xb9, 0xb2,
	0xa2, 0x13, 0x92, 0xb8, 0x0f, 0x6b, 0x7b, 0x04, 0x3b, 0x93, 0xdf, 0x42, 0xe8, 0x92, 0xed, 0xfa,
	0x1f, 0xf5, 0xb9, 0xf7, 0x8a, 0xec, 0x4c, 0x3d, 0x87, 0x60, 0xb6, 0xc2, 0xfc, 0xce, 0x55, 0xdd,
	0x11, 0xb6, 0x2b, 0x7d, 0xfa, 0x1a, 0x1e, 0x32, 0x9e, 0xe8, 0x63, 0x73, 0x25, 0xa7, 0x81, 0xdd,
	0xc2, 0x5c, 0xc7, 0xcd, 0xbd, 0xaf, 0x87, 0x16, 0x8b, 0xc5, 0xc2, 0x37, 0xa9, 0x67, 0x7f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x3b, 0x68, 0x12, 0x25, 0x3f, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StatusClient is the client API for Status service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StatusClient interface {
	// Sends a greeting
	UpdateMetrics(ctx context.Context, in *node.Node, opts ...grpc.CallOption) (*empty.Empty, error)
	CollectHealth(ctx context.Context, in *HealthData, opts ...grpc.CallOption) (*empty.Empty, error)
	CollectError(ctx context.Context, in *TestError, opts ...grpc.CallOption) (*empty.Empty, error)
	CheckHealth(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type statusClient struct {
	cc *grpc.ClientConn
}

func NewStatusClient(cc *grpc.ClientConn) StatusClient {
	return &statusClient{cc}
}

func (c *statusClient) UpdateMetrics(ctx context.Context, in *node.Node, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/status.Status/UpdateMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusClient) CollectHealth(ctx context.Context, in *HealthData, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/status.Status/CollectHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusClient) CollectError(ctx context.Context, in *TestError, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/status.Status/CollectError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusClient) CheckHealth(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/status.Status/CheckHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatusServer is the server API for Status service.
type StatusServer interface {
	// Sends a greeting
	UpdateMetrics(context.Context, *node.Node) (*empty.Empty, error)
	CollectHealth(context.Context, *HealthData) (*empty.Empty, error)
	CollectError(context.Context, *TestError) (*empty.Empty, error)
	CheckHealth(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedStatusServer can be embedded to have forward compatible implementations.
type UnimplementedStatusServer struct {
}

func (*UnimplementedStatusServer) UpdateMetrics(ctx context.Context, req *node.Node) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetrics not implemented")
}
func (*UnimplementedStatusServer) CollectHealth(ctx context.Context, req *HealthData) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectHealth not implemented")
}
func (*UnimplementedStatusServer) CollectError(ctx context.Context, req *TestError) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectError not implemented")
}
func (*UnimplementedStatusServer) CheckHealth(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}

func RegisterStatusServer(s *grpc.Server, srv StatusServer) {
	s.RegisterService(&_Status_serviceDesc, srv)
}

func _Status_UpdateMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(node.Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServer).UpdateMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.Status/UpdateMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServer).UpdateMetrics(ctx, req.(*node.Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Status_CollectHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServer).CollectHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.Status/CollectHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServer).CollectHealth(ctx, req.(*HealthData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Status_CollectError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestError)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServer).CollectError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.Status/CollectError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServer).CollectError(ctx, req.(*TestError))
	}
	return interceptor(ctx, in, info, handler)
}

func _Status_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.Status/CheckHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServer).CheckHealth(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Status_serviceDesc = grpc.ServiceDesc{
	ServiceName: "status.Status",
	HandlerType: (*StatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateMetrics",
			Handler:    _Status_UpdateMetrics_Handler,
		},
		{
			MethodName: "CollectHealth",
			Handler:    _Status_CollectHealth_Handler,
		},
		{
			MethodName: "CollectError",
			Handler:    _Status_CollectError_Handler,
		},
		{
			MethodName: "CheckHealth",
			Handler:    _Status_CheckHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/status/status.proto",
}
