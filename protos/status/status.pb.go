// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protos/status/status.proto

package status

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	node "github.com/tron-us/go-btfs-common/protos/node"
	_ "github.com/tron-us/protobuf/gogoproto"
	proto "github.com/tron-us/protobuf/proto"
	github_com_tron_us_protobuf_types "github.com/tron-us/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RewardType int32

const (
	RewardType_FILESIZE RewardType = 0
	RewardType_REPAIR   RewardType = 1
)

var RewardType_name = map[int32]string{
	0: "FILESIZE",
	1: "REPAIR",
}

var RewardType_value = map[string]int32{
	"FILESIZE": 0,
	"REPAIR":   1,
}

func (x RewardType) String() string {
	return proto.EnumName(RewardType_name, int32(x))
}

func (RewardType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e9255cc60c5ca429, []int{0}
}

type SignedMetrics struct {
	PublicKey            []byte   `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty" pg:"public_key"`
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty" pg:"signature"`
	Payload              []byte   `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty" pg:"payload"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" pg:"-"`
	XXX_unrecognized     []byte   `json:"-" pg:"-"`
	XXX_sizecache        int32    `json:"-" pg:"-"`
}

func (m *SignedMetrics) Reset()         { *m = SignedMetrics{} }
func (m *SignedMetrics) String() string { return proto.CompactTextString(m) }
func (*SignedMetrics) ProtoMessage()    {}
func (*SignedMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9255cc60c5ca429, []int{0}
}
func (m *SignedMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedMetrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedMetrics.Merge(m, src)
}
func (m *SignedMetrics) XXX_Size() int {
	return m.Size()
}
func (m *SignedMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_SignedMetrics proto.InternalMessageInfo

func (m *SignedMetrics) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *SignedMetrics) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SignedMetrics) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (*SignedMetrics) XXX_MessageName() string {
	return "status.SignedMetrics"
}

type NodeMetricsAggrReq struct {
	Source               string   `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty" pg:"source"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" pg:"-"`
	XXX_unrecognized     []byte   `json:"-" pg:"-"`
	XXX_sizecache        int32    `json:"-" pg:"-"`
}

func (m *NodeMetricsAggrReq) Reset()         { *m = NodeMetricsAggrReq{} }
func (m *NodeMetricsAggrReq) String() string { return proto.CompactTextString(m) }
func (*NodeMetricsAggrReq) ProtoMessage()    {}
func (*NodeMetricsAggrReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9255cc60c5ca429, []int{1}
}
func (m *NodeMetricsAggrReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeMetricsAggrReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeMetricsAggrReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeMetricsAggrReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeMetricsAggrReq.Merge(m, src)
}
func (m *NodeMetricsAggrReq) XXX_Size() int {
	return m.Size()
}
func (m *NodeMetricsAggrReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeMetricsAggrReq.DiscardUnknown(m)
}

var xxx_messageInfo_NodeMetricsAggrReq proto.InternalMessageInfo

func (m *NodeMetricsAggrReq) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (*NodeMetricsAggrReq) XXX_MessageName() string {
	return "status.NodeMetricsAggrReq"
}

type NodeDiscoveryAggrReq struct {
	Source               string   `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty" pg:"source"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" pg:"-"`
	XXX_unrecognized     []byte   `json:"-" pg:"-"`
	XXX_sizecache        int32    `json:"-" pg:"-"`
}

func (m *NodeDiscoveryAggrReq) Reset()         { *m = NodeDiscoveryAggrReq{} }
func (m *NodeDiscoveryAggrReq) String() string { return proto.CompactTextString(m) }
func (*NodeDiscoveryAggrReq) ProtoMessage()    {}
func (*NodeDiscoveryAggrReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9255cc60c5ca429, []int{2}
}
func (m *NodeDiscoveryAggrReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeDiscoveryAggrReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeDiscoveryAggrReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeDiscoveryAggrReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeDiscoveryAggrReq.Merge(m, src)
}
func (m *NodeDiscoveryAggrReq) XXX_Size() int {
	return m.Size()
}
func (m *NodeDiscoveryAggrReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeDiscoveryAggrReq.DiscardUnknown(m)
}

var xxx_messageInfo_NodeDiscoveryAggrReq proto.InternalMessageInfo

func (m *NodeDiscoveryAggrReq) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (*NodeDiscoveryAggrReq) XXX_MessageName() string {
	return "status.NodeDiscoveryAggrReq"
}

type BtfsScanAggrReq struct {
	tableName            string           `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty" pg:"table_name"`
	StorageVolumeLeft    float64          `protobuf:"fixed64,2,opt,name=storage_volume_left,json=storageVolumeLeft,proto3" json:"storage_volume_left,omitempty" pg:"storage_volume_left"`
	OnlineMinersNumber   uint32           `protobuf:"varint,3,opt,name=online_miners_number,json=onlineMinersNumber,proto3" json:"online_miners_number,omitempty" pg:"online_miners_number"`
	CountryDistribute    map[string]int32 `protobuf:"bytes,4,rep,name=country_distribute,json=countryDistribute,proto3" json:"country_distribute,omitempty" pg:"country_distribute" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ScoreDistribute      map[string]int32 `protobuf:"bytes,5,rep,name=score_distribute,json=scoreDistribute,proto3" json:"score_distribute,omitempty" pg:"score_distribute" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TimeCreated          time.Time        `protobuf:"bytes,6,opt,name=time_created,json=timeCreated,proto3,stdtime" json:"time_created" pg:"time_created"`
	StorageAlreadyUsed   float64          `protobuf:"fixed64,7,opt,name=storage_already_used,json=storageAlreadyUsed,proto3" json:"storage_already_used,omitempty" pg:"storage_already_used"`
	Price                float64          `protobuf:"fixed64,8,opt,name=price,proto3" json:"price,omitempty" pg:"price"`
	DateCreated          time.Time        `protobuf:"bytes,9,opt,name=date_created,json=dateCreated,proto3,stdtime" json:"date_created" pg:"date_created"`
	NewRank              string           `protobuf:"bytes,10,opt,name=new_rank,json=newRank,proto3" json:"new_rank,omitempty" pg:"new_rank"`
	TotalRank            string           `protobuf:"bytes,11,opt,name=total_rank,json=totalRank,proto3" json:"total_rank,omitempty" pg:"total_rank"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-" pg:"-"`
	XXX_unrecognized     []byte           `json:"-" pg:"-"`
	XXX_sizecache        int32            `json:"-" pg:"-"`
}

func (m *BtfsScanAggrReq) Reset()         { *m = BtfsScanAggrReq{} }
func (m *BtfsScanAggrReq) String() string { return proto.CompactTextString(m) }
func (*BtfsScanAggrReq) ProtoMessage()    {}
func (*BtfsScanAggrReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9255cc60c5ca429, []int{3}
}
func (m *BtfsScanAggrReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BtfsScanAggrReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BtfsScanAggrReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BtfsScanAggrReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BtfsScanAggrReq.Merge(m, src)
}
func (m *BtfsScanAggrReq) XXX_Size() int {
	return m.Size()
}
func (m *BtfsScanAggrReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BtfsScanAggrReq.DiscardUnknown(m)
}

var xxx_messageInfo_BtfsScanAggrReq proto.InternalMessageInfo

func (m *BtfsScanAggrReq) GettableName() string {
	if m != nil {
		return m.tableName
	}
	return ""
}

func (m *BtfsScanAggrReq) GetStorageVolumeLeft() float64 {
	if m != nil {
		return m.StorageVolumeLeft
	}
	return 0
}

func (m *BtfsScanAggrReq) GetOnlineMinersNumber() uint32 {
	if m != nil {
		return m.OnlineMinersNumber
	}
	return 0
}

func (m *BtfsScanAggrReq) GetCountryDistribute() map[string]int32 {
	if m != nil {
		return m.CountryDistribute
	}
	return nil
}

func (m *BtfsScanAggrReq) GetScoreDistribute() map[string]int32 {
	if m != nil {
		return m.ScoreDistribute
	}
	return nil
}

func (m *BtfsScanAggrReq) GetTimeCreated() time.Time {
	if m != nil {
		return m.TimeCreated
	}
	return time.Time{}
}

func (m *BtfsScanAggrReq) GetStorageAlreadyUsed() float64 {
	if m != nil {
		return m.StorageAlreadyUsed
	}
	return 0
}

func (m *BtfsScanAggrReq) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *BtfsScanAggrReq) GetDateCreated() time.Time {
	if m != nil {
		return m.DateCreated
	}
	return time.Time{}
}

func (m *BtfsScanAggrReq) GetNewRank() string {
	if m != nil {
		return m.NewRank
	}
	return ""
}

func (m *BtfsScanAggrReq) GetTotalRank() string {
	if m != nil {
		return m.TotalRank
	}
	return ""
}

func (*BtfsScanAggrReq) XXX_MessageName() string {
	return "status.BtfsScanAggrReq"
}

type ScoreHistoryReq struct {
	Scores               []*node.ScoreHistoryTab `protobuf:"bytes,1,rep,name=scores,proto3" json:"scores,omitempty" pg:"scores"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-" pg:"-"`
	XXX_unrecognized     []byte                  `json:"-" pg:"-"`
	XXX_sizecache        int32                   `json:"-" pg:"-"`
}

func (m *ScoreHistoryReq) Reset()         { *m = ScoreHistoryReq{} }
func (m *ScoreHistoryReq) String() string { return proto.CompactTextString(m) }
func (*ScoreHistoryReq) ProtoMessage()    {}
func (*ScoreHistoryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9255cc60c5ca429, []int{4}
}
func (m *ScoreHistoryReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ScoreHistoryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ScoreHistoryReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ScoreHistoryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScoreHistoryReq.Merge(m, src)
}
func (m *ScoreHistoryReq) XXX_Size() int {
	return m.Size()
}
func (m *ScoreHistoryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ScoreHistoryReq.DiscardUnknown(m)
}

var xxx_messageInfo_ScoreHistoryReq proto.InternalMessageInfo

func (m *ScoreHistoryReq) GetScores() []*node.ScoreHistoryTab {
	if m != nil {
		return m.Scores
	}
	return nil
}

func (*ScoreHistoryReq) XXX_MessageName() string {
	return "status.ScoreHistoryReq"
}

type RewardInfo struct {
	Type                 RewardType `protobuf:"varint,1,opt,name=type,proto3,enum=status.RewardType" json:"type,omitempty" pg:"type"`
	NodeId               string     `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty" pg:"node_id"`
	Reward               uint64     `protobuf:"varint,3,opt,name=reward,proto3" json:"reward,omitempty" pg:"reward"`
	IsSuspect            bool       `protobuf:"varint,4,opt,name=is_suspect,json=isSuspect,proto3" json:"is_suspect,omitempty" pg:"is_suspect"`
	Weight               uint32     `protobuf:"varint,5,opt,name=weight,proto3" json:"weight,omitempty" pg:"weight"`
	Stake                uint32     `protobuf:"varint,6,opt,name=stake,proto3" json:"stake,omitempty" pg:"stake"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-" pg:"-"`
	XXX_unrecognized     []byte     `json:"-" pg:"-"`
	XXX_sizecache        int32      `json:"-" pg:"-"`
}

func (m *RewardInfo) Reset()         { *m = RewardInfo{} }
func (m *RewardInfo) String() string { return proto.CompactTextString(m) }
func (*RewardInfo) ProtoMessage()    {}
func (*RewardInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9255cc60c5ca429, []int{5}
}
func (m *RewardInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardInfo.Merge(m, src)
}
func (m *RewardInfo) XXX_Size() int {
	return m.Size()
}
func (m *RewardInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RewardInfo proto.InternalMessageInfo

func (m *RewardInfo) GetType() RewardType {
	if m != nil {
		return m.Type
	}
	return RewardType_FILESIZE
}

func (m *RewardInfo) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *RewardInfo) GetReward() uint64 {
	if m != nil {
		return m.Reward
	}
	return 0
}

func (m *RewardInfo) GetIsSuspect() bool {
	if m != nil {
		return m.IsSuspect
	}
	return false
}

func (m *RewardInfo) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *RewardInfo) GetStake() uint32 {
	if m != nil {
		return m.Stake
	}
	return 0
}

func (*RewardInfo) XXX_MessageName() string {
	return "status.RewardInfo"
}

type AirdropRewardHistoryReq struct {
	Rewards              []*RewardInfo `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards,omitempty" pg:"rewards"`
	PageNum              uint32        `protobuf:"varint,2,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty" pg:"page_num"`
	Total                uint32        `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty" pg:"total"`
	DateCreated          time.Time     `protobuf:"bytes,4,opt,name=date_created,json=dateCreated,proto3,stdtime" json:"date_created" pg:"date_created"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-" pg:"-"`
	XXX_unrecognized     []byte        `json:"-" pg:"-"`
	XXX_sizecache        int32         `json:"-" pg:"-"`
}

func (m *AirdropRewardHistoryReq) Reset()         { *m = AirdropRewardHistoryReq{} }
func (m *AirdropRewardHistoryReq) String() string { return proto.CompactTextString(m) }
func (*AirdropRewardHistoryReq) ProtoMessage()    {}
func (*AirdropRewardHistoryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9255cc60c5ca429, []int{6}
}
func (m *AirdropRewardHistoryReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AirdropRewardHistoryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AirdropRewardHistoryReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AirdropRewardHistoryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AirdropRewardHistoryReq.Merge(m, src)
}
func (m *AirdropRewardHistoryReq) XXX_Size() int {
	return m.Size()
}
func (m *AirdropRewardHistoryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AirdropRewardHistoryReq.DiscardUnknown(m)
}

var xxx_messageInfo_AirdropRewardHistoryReq proto.InternalMessageInfo

func (m *AirdropRewardHistoryReq) GetRewards() []*RewardInfo {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *AirdropRewardHistoryReq) GetPageNum() uint32 {
	if m != nil {
		return m.PageNum
	}
	return 0
}

func (m *AirdropRewardHistoryReq) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *AirdropRewardHistoryReq) GetDateCreated() time.Time {
	if m != nil {
		return m.DateCreated
	}
	return time.Time{}
}

func (*AirdropRewardHistoryReq) XXX_MessageName() string {
	return "status.AirdropRewardHistoryReq"
}

type AirdropRewardHistoryResp struct {
	Code                 int32     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty" pg:"code"`
	Message              string    `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty" pg:"message"`
	ResponseTime         time.Time `protobuf:"bytes,3,opt,name=response_time,json=responseTime,proto3,stdtime" json:"response_time" pg:"response_time"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-" pg:"-"`
	XXX_unrecognized     []byte    `json:"-" pg:"-"`
	XXX_sizecache        int32     `json:"-" pg:"-"`
}

func (m *AirdropRewardHistoryResp) Reset()         { *m = AirdropRewardHistoryResp{} }
func (m *AirdropRewardHistoryResp) String() string { return proto.CompactTextString(m) }
func (*AirdropRewardHistoryResp) ProtoMessage()    {}
func (*AirdropRewardHistoryResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9255cc60c5ca429, []int{7}
}
func (m *AirdropRewardHistoryResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AirdropRewardHistoryResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AirdropRewardHistoryResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AirdropRewardHistoryResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AirdropRewardHistoryResp.Merge(m, src)
}
func (m *AirdropRewardHistoryResp) XXX_Size() int {
	return m.Size()
}
func (m *AirdropRewardHistoryResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AirdropRewardHistoryResp.DiscardUnknown(m)
}

var xxx_messageInfo_AirdropRewardHistoryResp proto.InternalMessageInfo

func (m *AirdropRewardHistoryResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AirdropRewardHistoryResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *AirdropRewardHistoryResp) GetResponseTime() time.Time {
	if m != nil {
		return m.ResponseTime
	}
	return time.Time{}
}

func (*AirdropRewardHistoryResp) XXX_MessageName() string {
	return "status.AirdropRewardHistoryResp"
}
func init() {
	proto.RegisterEnum("status.RewardType", RewardType_name, RewardType_value)
	golang_proto.RegisterEnum("status.RewardType", RewardType_name, RewardType_value)
	proto.RegisterType((*SignedMetrics)(nil), "status.SignedMetrics")
	golang_proto.RegisterType((*SignedMetrics)(nil), "status.SignedMetrics")
	proto.RegisterType((*NodeMetricsAggrReq)(nil), "status.NodeMetricsAggrReq")
	golang_proto.RegisterType((*NodeMetricsAggrReq)(nil), "status.NodeMetricsAggrReq")
	proto.RegisterType((*NodeDiscoveryAggrReq)(nil), "status.NodeDiscoveryAggrReq")
	golang_proto.RegisterType((*NodeDiscoveryAggrReq)(nil), "status.NodeDiscoveryAggrReq")
	proto.RegisterType((*BtfsScanAggrReq)(nil), "status.BtfsScanAggrReq")
	golang_proto.RegisterType((*BtfsScanAggrReq)(nil), "status.BtfsScanAggrReq")
	proto.RegisterMapType((map[string]int32)(nil), "status.BtfsScanAggrReq.CountryDistributeEntry")
	golang_proto.RegisterMapType((map[string]int32)(nil), "status.BtfsScanAggrReq.CountryDistributeEntry")
	proto.RegisterMapType((map[string]int32)(nil), "status.BtfsScanAggrReq.ScoreDistributeEntry")
	golang_proto.RegisterMapType((map[string]int32)(nil), "status.BtfsScanAggrReq.ScoreDistributeEntry")
	proto.RegisterType((*ScoreHistoryReq)(nil), "status.ScoreHistoryReq")
	golang_proto.RegisterType((*ScoreHistoryReq)(nil), "status.ScoreHistoryReq")
	proto.RegisterType((*RewardInfo)(nil), "status.RewardInfo")
	golang_proto.RegisterType((*RewardInfo)(nil), "status.RewardInfo")
	proto.RegisterType((*AirdropRewardHistoryReq)(nil), "status.AirdropRewardHistoryReq")
	golang_proto.RegisterType((*AirdropRewardHistoryReq)(nil), "status.AirdropRewardHistoryReq")
	proto.RegisterType((*AirdropRewardHistoryResp)(nil), "status.AirdropRewardHistoryResp")
	golang_proto.RegisterType((*AirdropRewardHistoryResp)(nil), "status.AirdropRewardHistoryResp")
}

func init() { proto.RegisterFile("protos/status/status.proto", fileDescriptor_e9255cc60c5ca429) }
func init() { golang_proto.RegisterFile("protos/status/status.proto", fileDescriptor_e9255cc60c5ca429) }

var fileDescriptor_e9255cc60c5ca429 = []byte{
	// 1048 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xd1, 0x4e, 0x1b, 0x47,
	0x17, 0xce, 0x06, 0xdb, 0xe0, 0x03, 0x0e, 0x64, 0x7e, 0x02, 0x1b, 0xff, 0x89, 0x41, 0xbe, 0x88,
	0x50, 0x05, 0x4b, 0x44, 0x6f, 0xa2, 0x5e, 0xb4, 0x85, 0xe0, 0xb6, 0x6e, 0x13, 0x84, 0xc6, 0xa4,
	0x95, 0x22, 0x55, 0xab, 0xf1, 0xee, 0xf1, 0x66, 0x85, 0x77, 0x67, 0x3b, 0x33, 0x0b, 0xf2, 0x5b,
	0x54, 0xea, 0x4d, 0x9f, 0xa2, 0x17, 0x7d, 0x82, 0xf6, 0x8e, 0xcb, 0x3e, 0x41, 0x5b, 0xc1, 0x4d,
	0x1f, 0xa3, 0x9a, 0x99, 0x5d, 0x30, 0x06, 0x37, 0xa5, 0x37, 0xb0, 0x67, 0xbe, 0x73, 0xbe, 0x39,
	0xe7, 0xcc, 0x77, 0x66, 0x0c, 0xcd, 0x4c, 0x70, 0xc5, 0xe5, 0xb6, 0x54, 0x4c, 0xe5, 0xe5, 0x3f,
	0xcf, 0x2c, 0x92, 0x9a, 0xb5, 0x9a, 0x2f, 0xa2, 0x58, 0xbd, 0xcb, 0xfb, 0x5e, 0xc0, 0x93, 0x6d,
	0x25, 0x78, 0xba, 0x95, 0xcb, 0xed, 0x88, 0x6f, 0xf5, 0xd5, 0x40, 0x6e, 0x05, 0x3c, 0x49, 0x78,
	0xba, 0x5d, 0xb0, 0xa4, 0x3c, 0x44, 0xf3, 0xc7, 0x32, 0x34, 0x9f, 0xdf, 0x12, 0x69, 0x90, 0x7e,
	0x3e, 0xd8, 0x8e, 0x78, 0xc4, 0x8d, 0x61, 0xbe, 0x8a, 0x88, 0xff, 0x47, 0x9c, 0x47, 0x43, 0xbc,
	0xf2, 0xc2, 0x24, 0x53, 0xa3, 0x02, 0x5c, 0x9b, 0x04, 0x55, 0x9c, 0xa0, 0x54, 0x2c, 0xc9, 0xac,
	0x43, 0x7b, 0x00, 0x8d, 0x5e, 0x1c, 0xa5, 0x18, 0xbe, 0x46, 0x25, 0xe2, 0x40, 0x92, 0xa7, 0x00,
	0x59, 0xde, 0x1f, 0xc6, 0x81, 0x7f, 0x8c, 0x23, 0xd7, 0x59, 0x77, 0x36, 0x16, 0x68, 0xdd, 0xae,
	0x7c, 0x85, 0x23, 0xf2, 0x04, 0xea, 0x32, 0x8e, 0x52, 0xa6, 0x72, 0x81, 0xee, 0x7d, 0x8b, 0x5e,
	0x2e, 0x10, 0x17, 0x66, 0x33, 0x36, 0x1a, 0x72, 0x16, 0xba, 0x33, 0x06, 0x2b, 0xcd, 0xf6, 0x26,
	0x90, 0x03, 0x1e, 0x62, 0xb1, 0xcb, 0x6e, 0x14, 0x09, 0x8a, 0xdf, 0x91, 0x15, 0xa8, 0x49, 0x9e,
	0x8b, 0x00, 0xcd, 0x46, 0x75, 0x5a, 0x58, 0x6d, 0x0f, 0x96, 0xb5, 0xf7, 0x7e, 0x2c, 0x03, 0x7e,
	0x82, 0x62, 0xf4, 0x3e, 0xff, 0xbf, 0xaa, 0xb0, 0xb8, 0xa7, 0x06, 0xb2, 0x17, 0xb0, 0xb4, 0xf4,
	0x7d, 0x0a, 0xa0, 0x58, 0x7f, 0x88, 0x7e, 0xca, 0x92, 0xd2, 0xbf, 0x6e, 0x56, 0x0e, 0x58, 0x82,
	0xc4, 0x83, 0xff, 0x49, 0xc5, 0x05, 0x8b, 0xd0, 0x3f, 0xe1, 0xc3, 0x3c, 0x41, 0x7f, 0x88, 0x03,
	0x65, 0x4a, 0x72, 0xe8, 0xc3, 0x02, 0xfa, 0xda, 0x20, 0xaf, 0x70, 0xa0, 0xc8, 0x73, 0x58, 0xe6,
	0xe9, 0x30, 0x4e, 0xd1, 0x4f, 0xe2, 0x14, 0x85, 0xf4, 0xd3, 0x3c, 0xe9, 0xa3, 0x30, 0x75, 0x36,
	0x28, 0xb1, 0xd8, 0x6b, 0x03, 0x1d, 0x18, 0x84, 0x7c, 0x0b, 0x24, 0xe0, 0x79, 0xaa, 0xc4, 0xc8,
	0x0f, 0x63, 0xa9, 0x44, 0xdc, 0xcf, 0x15, 0xba, 0x95, 0xf5, 0x99, 0x8d, 0xf9, 0x1d, 0xcf, 0x2b,
	0x74, 0x33, 0x91, 0xb5, 0xf7, 0xd2, 0x46, 0xec, 0x5f, 0x06, 0x74, 0xb4, 0x49, 0x1f, 0x06, 0x93,
	0xeb, 0xe4, 0x1b, 0x58, 0x92, 0x01, 0x17, 0x38, 0x4e, 0x5e, 0x35, 0xe4, 0x9b, 0xd3, 0xc8, 0x7b,
	0xda, 0x7f, 0x92, 0x7a, 0x51, 0x5e, 0x5f, 0x25, 0x9f, 0xc3, 0x82, 0x56, 0x89, 0x1f, 0x08, 0x64,
	0x0a, 0x43, 0xb7, 0xb6, 0xee, 0x6c, 0xcc, 0xef, 0x34, 0x3d, 0x2b, 0x25, 0xaf, 0x94, 0x92, 0x77,
	0x54, 0x4a, 0x69, 0x6f, 0xee, 0xec, 0xf7, 0xb5, 0x7b, 0xdf, 0xff, 0xb1, 0xe6, 0xd0, 0x79, 0x1d,
	0xf9, 0xd2, 0x06, 0xea, 0x96, 0x95, 0x2d, 0x66, 0x43, 0x81, 0x2c, 0x1c, 0xf9, 0xb9, 0xc4, 0xd0,
	0x9d, 0x35, 0x3d, 0x26, 0x05, 0xb6, 0x6b, 0xa1, 0x37, 0x12, 0x43, 0xb2, 0x0c, 0xd5, 0x4c, 0xc4,
	0x01, 0xba, 0x73, 0xc6, 0xc5, 0x1a, 0x3a, 0xa1, 0x90, 0xa9, 0xab, 0x84, 0xea, 0x77, 0x49, 0x48,
	0x47, 0x96, 0x09, 0x3d, 0x86, 0xb9, 0x14, 0x4f, 0x7d, 0xc1, 0xd2, 0x63, 0x17, 0x8c, 0x20, 0x66,
	0x53, 0x3c, 0xa5, 0x2c, 0x3d, 0x36, 0x6a, 0xe1, 0x8a, 0x0d, 0x2d, 0x38, 0x5f, 0xa8, 0x45, 0xaf,
	0x68, 0xb8, 0xb9, 0x0f, 0x2b, 0xb7, 0x9f, 0x0c, 0x59, 0x82, 0x99, 0x72, 0x50, 0xea, 0x54, 0x7f,
	0xea, 0x22, 0x4e, 0xd8, 0x30, 0xb7, 0xe3, 0x51, 0xa5, 0xd6, 0xf8, 0xe8, 0xfe, 0x0b, 0xa7, 0xb9,
	0x07, 0xcb, 0xb7, 0x1d, 0xc1, 0x5d, 0x38, 0xda, 0x9f, 0xc2, 0xa2, 0xe1, 0xf8, 0x22, 0xd6, 0xfd,
	0x1b, 0x69, 0xa5, 0x6f, 0x41, 0xcd, 0x9c, 0xa1, 0x74, 0x1d, 0x73, 0xfe, 0x8f, 0x3c, 0x73, 0xa1,
	0x8c, 0xbb, 0x1d, 0xb1, 0x3e, 0x2d, 0x9c, 0xda, 0x3f, 0x3b, 0x00, 0x14, 0x4f, 0x99, 0x08, 0xbb,
	0xe9, 0x80, 0x93, 0x67, 0x50, 0x51, 0xa3, 0xcc, 0x4e, 0xc8, 0x83, 0x1d, 0x52, 0x6a, 0xc7, 0x7a,
	0x1c, 0x8d, 0x32, 0xa4, 0x06, 0x27, 0xab, 0x30, 0xab, 0x69, 0xfd, 0x38, 0x34, 0x49, 0xd5, 0x69,
	0x4d, 0x9b, 0xdd, 0x50, 0x0f, 0xa5, 0x30, 0xce, 0x66, 0x16, 0x2a, 0xb4, 0xb0, 0x74, 0x4b, 0x63,
	0xe9, 0xcb, 0x5c, 0x66, 0x18, 0x28, 0xb7, 0xb2, 0xee, 0x6c, 0xcc, 0xd1, 0x7a, 0x2c, 0x7b, 0x76,
	0x41, 0x87, 0x9d, 0x62, 0x1c, 0xbd, 0x53, 0x6e, 0xd5, 0x8c, 0x50, 0x61, 0xe9, 0xd2, 0xa5, 0x62,
	0xc7, 0x68, 0x74, 0xd7, 0xa0, 0xd6, 0x68, 0xff, 0xea, 0xc0, 0xea, 0x6e, 0x2c, 0x42, 0xc1, 0x33,
	0x9b, 0xd9, 0x58, 0xfd, 0x9b, 0x30, 0x6b, 0xb7, 0x2c, 0x1b, 0x30, 0x51, 0x84, 0x2e, 0x93, 0x96,
	0x2e, 0x5a, 0x04, 0x99, 0x96, 0x64, 0x9a, 0x27, 0xa6, 0x90, 0x86, 0xbe, 0xa4, 0x22, 0x3c, 0xc8,
	0x13, 0xbd, 0xb5, 0x39, 0xf2, 0x62, 0xa8, 0xad, 0x71, 0x43, 0x7e, 0x95, 0xff, 0x28, 0xbf, 0xf6,
	0x0f, 0x0e, 0xb8, 0xb7, 0xd7, 0x20, 0x33, 0x42, 0xa0, 0x12, 0xf0, 0xd0, 0x1e, 0x43, 0x95, 0x9a,
	0x6f, 0x7d, 0x9d, 0x26, 0x28, 0x25, 0x8b, 0xb0, 0x68, 0x79, 0x69, 0x92, 0x2e, 0x34, 0x04, 0xca,
	0x8c, 0xa7, 0x12, 0x7d, 0x3d, 0x72, 0x26, 0xe3, 0x7f, 0x9b, 0xd4, 0x42, 0x19, 0xaa, 0xc1, 0x0f,
	0x9e, 0x95, 0x6a, 0xd0, 0x67, 0x4d, 0x16, 0x60, 0xee, 0xb3, 0xee, 0xab, 0x4e, 0xaf, 0xfb, 0xb6,
	0xb3, 0x74, 0x8f, 0x00, 0xd4, 0x68, 0xe7, 0x70, 0xb7, 0x4b, 0x97, 0x9c, 0x9d, 0x9f, 0x2a, 0xd0,
	0xe8, 0x99, 0xb6, 0xf6, 0x50, 0x9c, 0xe8, 0xb9, 0xfc, 0x18, 0x1a, 0x6f, 0x32, 0x5d, 0x60, 0xf9,
	0x76, 0x3c, 0x2a, 0xfb, 0x7e, 0xed, 0x49, 0x69, 0xae, 0xdc, 0xc8, 0xaa, 0xa3, 0x9f, 0x28, 0xf2,
	0x25, 0x3c, 0xbe, 0x16, 0xbf, 0x9b, 0x86, 0x97, 0x37, 0xfe, 0x5d, 0xb9, 0x0e, 0xc0, 0xbd, 0xce,
	0x15, 0x45, 0x02, 0x23, 0xa6, 0x62, 0x9e, 0x92, 0x66, 0x49, 0x75, 0xf3, 0x05, 0x9a, 0xca, 0x47,
	0xa1, 0x69, 0xf9, 0xae, 0xbd, 0x41, 0x25, 0xe3, 0x93, 0x71, 0xc6, 0xc9, 0x57, 0x6a, 0x2a, 0x67,
	0x07, 0x88, 0xe5, 0x1c, 0xbf, 0x97, 0xc9, 0xea, 0x94, 0xdb, 0xfa, 0xfd, 0x34, 0xe3, 0x03, 0x7e,
	0x45, 0x33, 0x71, 0x3b, 0x4c, 0xa5, 0xf1, 0xcb, 0x0a, 0x6f, 0x93, 0x24, 0x59, 0x2b, 0xe9, 0xa6,
	0x0c, 0x5d, 0x73, 0xfd, 0x9f, 0x1d, 0x64, 0xb6, 0xf7, 0xc9, 0xd9, 0x79, 0xcb, 0xf9, 0xed, 0xbc,
	0xe5, 0xfc, 0x79, 0xde, 0x72, 0x7e, 0xbc, 0x68, 0x39, 0xbf, 0x5c, 0xb4, 0x9c, 0xb3, 0x8b, 0x96,
	0x03, 0x0f, 0x62, 0xee, 0xe9, 0xdf, 0x42, 0x05, 0xc5, 0xde, 0xbc, 0xd5, 0xd5, 0xa1, 0x4e, 0xf0,
	0xd0, 0x79, 0x5b, 0xfc, 0x8a, 0xea, 0xd7, 0x4c, 0xc6, 0x1f, 0xfe, 0x1d, 0x00, 0x00, 0xff, 0xff,
	0x76, 0xe6, 0x2e, 0x7e, 0x72, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StatusServiceClient is the client API for StatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StatusServiceClient interface {
	UpdateMetrics(ctx context.Context, in *SignedMetrics, opts ...grpc.CallOption) (*types.Empty, error)
	UpdateMetricsAndDiscovery(ctx context.Context, in *SignedMetrics, opts ...grpc.CallOption) (*types.Empty, error)
	UpdateMetricsAggregation(ctx context.Context, in *NodeMetricsAggrReq, opts ...grpc.CallOption) (*types.Empty, error)
	UpdateDiscoveryAggregation(ctx context.Context, in *NodeDiscoveryAggrReq, opts ...grpc.CallOption) (*types.Empty, error)
	UpdateBtfsScanAggr(ctx context.Context, in *BtfsScanAggrReq, opts ...grpc.CallOption) (*types.Empty, error)
	UpdateScoreHistory(ctx context.Context, in *ScoreHistoryReq, opts ...grpc.CallOption) (*types.Empty, error)
	UpdateAirdropRewardHistory(ctx context.Context, in *AirdropRewardHistoryReq, opts ...grpc.CallOption) (*AirdropRewardHistoryResp, error)
}

type statusServiceClient struct {
	cc *grpc.ClientConn
}

func NewStatusServiceClient(cc *grpc.ClientConn) StatusServiceClient {
	return &statusServiceClient{cc}
}

func (c *statusServiceClient) UpdateMetrics(ctx context.Context, in *SignedMetrics, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/status.StatusService/UpdateMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusServiceClient) UpdateMetricsAndDiscovery(ctx context.Context, in *SignedMetrics, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/status.StatusService/UpdateMetricsAndDiscovery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusServiceClient) UpdateMetricsAggregation(ctx context.Context, in *NodeMetricsAggrReq, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/status.StatusService/UpdateMetricsAggregation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusServiceClient) UpdateDiscoveryAggregation(ctx context.Context, in *NodeDiscoveryAggrReq, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/status.StatusService/UpdateDiscoveryAggregation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusServiceClient) UpdateBtfsScanAggr(ctx context.Context, in *BtfsScanAggrReq, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/status.StatusService/UpdateBtfsScanAggr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusServiceClient) UpdateScoreHistory(ctx context.Context, in *ScoreHistoryReq, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/status.StatusService/UpdateScoreHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusServiceClient) UpdateAirdropRewardHistory(ctx context.Context, in *AirdropRewardHistoryReq, opts ...grpc.CallOption) (*AirdropRewardHistoryResp, error) {
	out := new(AirdropRewardHistoryResp)
	err := c.cc.Invoke(ctx, "/status.StatusService/UpdateAirdropRewardHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatusServiceServer is the server API for StatusService service.
type StatusServiceServer interface {
	UpdateMetrics(context.Context, *SignedMetrics) (*types.Empty, error)
	UpdateMetricsAndDiscovery(context.Context, *SignedMetrics) (*types.Empty, error)
	UpdateMetricsAggregation(context.Context, *NodeMetricsAggrReq) (*types.Empty, error)
	UpdateDiscoveryAggregation(context.Context, *NodeDiscoveryAggrReq) (*types.Empty, error)
	UpdateBtfsScanAggr(context.Context, *BtfsScanAggrReq) (*types.Empty, error)
	UpdateScoreHistory(context.Context, *ScoreHistoryReq) (*types.Empty, error)
	UpdateAirdropRewardHistory(context.Context, *AirdropRewardHistoryReq) (*AirdropRewardHistoryResp, error)
}

// UnimplementedStatusServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStatusServiceServer struct {
}

func (*UnimplementedStatusServiceServer) UpdateMetrics(ctx context.Context, req *SignedMetrics) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetrics not implemented")
}
func (*UnimplementedStatusServiceServer) UpdateMetricsAndDiscovery(ctx context.Context, req *SignedMetrics) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetricsAndDiscovery not implemented")
}
func (*UnimplementedStatusServiceServer) UpdateMetricsAggregation(ctx context.Context, req *NodeMetricsAggrReq) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetricsAggregation not implemented")
}
func (*UnimplementedStatusServiceServer) UpdateDiscoveryAggregation(ctx context.Context, req *NodeDiscoveryAggrReq) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDiscoveryAggregation not implemented")
}
func (*UnimplementedStatusServiceServer) UpdateBtfsScanAggr(ctx context.Context, req *BtfsScanAggrReq) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBtfsScanAggr not implemented")
}
func (*UnimplementedStatusServiceServer) UpdateScoreHistory(ctx context.Context, req *ScoreHistoryReq) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScoreHistory not implemented")
}
func (*UnimplementedStatusServiceServer) UpdateAirdropRewardHistory(ctx context.Context, req *AirdropRewardHistoryReq) (*AirdropRewardHistoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAirdropRewardHistory not implemented")
}

func RegisterStatusServiceServer(s *grpc.Server, srv StatusServiceServer) {
	s.RegisterService(&_StatusService_serviceDesc, srv)
}

func _StatusService_UpdateMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedMetrics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).UpdateMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.StatusService/UpdateMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).UpdateMetrics(ctx, req.(*SignedMetrics))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusService_UpdateMetricsAndDiscovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignedMetrics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).UpdateMetricsAndDiscovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.StatusService/UpdateMetricsAndDiscovery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).UpdateMetricsAndDiscovery(ctx, req.(*SignedMetrics))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusService_UpdateMetricsAggregation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMetricsAggrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).UpdateMetricsAggregation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.StatusService/UpdateMetricsAggregation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).UpdateMetricsAggregation(ctx, req.(*NodeMetricsAggrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusService_UpdateDiscoveryAggregation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeDiscoveryAggrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).UpdateDiscoveryAggregation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.StatusService/UpdateDiscoveryAggregation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).UpdateDiscoveryAggregation(ctx, req.(*NodeDiscoveryAggrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusService_UpdateBtfsScanAggr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BtfsScanAggrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).UpdateBtfsScanAggr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.StatusService/UpdateBtfsScanAggr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).UpdateBtfsScanAggr(ctx, req.(*BtfsScanAggrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusService_UpdateScoreHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScoreHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).UpdateScoreHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.StatusService/UpdateScoreHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).UpdateScoreHistory(ctx, req.(*ScoreHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatusService_UpdateAirdropRewardHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirdropRewardHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).UpdateAirdropRewardHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.StatusService/UpdateAirdropRewardHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).UpdateAirdropRewardHistory(ctx, req.(*AirdropRewardHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _StatusService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "status.StatusService",
	HandlerType: (*StatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateMetrics",
			Handler:    _StatusService_UpdateMetrics_Handler,
		},
		{
			MethodName: "UpdateMetricsAndDiscovery",
			Handler:    _StatusService_UpdateMetricsAndDiscovery_Handler,
		},
		{
			MethodName: "UpdateMetricsAggregation",
			Handler:    _StatusService_UpdateMetricsAggregation_Handler,
		},
		{
			MethodName: "UpdateDiscoveryAggregation",
			Handler:    _StatusService_UpdateDiscoveryAggregation_Handler,
		},
		{
			MethodName: "UpdateBtfsScanAggr",
			Handler:    _StatusService_UpdateBtfsScanAggr_Handler,
		},
		{
			MethodName: "UpdateScoreHistory",
			Handler:    _StatusService_UpdateScoreHistory_Handler,
		},
		{
			MethodName: "UpdateAirdropRewardHistory",
			Handler:    _StatusService_UpdateAirdropRewardHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/status/status.proto",
}

func (m *SignedMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeMetricsAggrReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeMetricsAggrReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeMetricsAggrReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeDiscoveryAggrReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeDiscoveryAggrReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeDiscoveryAggrReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BtfsScanAggrReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BtfsScanAggrReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BtfsScanAggrReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TotalRank) > 0 {
		i -= len(m.TotalRank)
		copy(dAtA[i:], m.TotalRank)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.TotalRank)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.NewRank) > 0 {
		i -= len(m.NewRank)
		copy(dAtA[i:], m.NewRank)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.NewRank)))
		i--
		dAtA[i] = 0x52
	}
	n1, err1 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.DateCreated, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.DateCreated):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintStatus(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x4a
	if m.Price != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Price))))
		i--
		dAtA[i] = 0x41
	}
	if m.StorageAlreadyUsed != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.StorageAlreadyUsed))))
		i--
		dAtA[i] = 0x39
	}
	n2, err2 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.TimeCreated, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.TimeCreated):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintStatus(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x32
	if len(m.ScoreDistribute) > 0 {
		for k := range m.ScoreDistribute {
			v := m.ScoreDistribute[k]
			baseI := i
			i = encodeVarintStatus(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintStatus(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintStatus(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.CountryDistribute) > 0 {
		for k := range m.CountryDistribute {
			v := m.CountryDistribute[k]
			baseI := i
			i = encodeVarintStatus(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintStatus(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintStatus(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.OnlineMinersNumber != 0 {
		i = encodeVarintStatus(dAtA, i, uint64(m.OnlineMinersNumber))
		i--
		dAtA[i] = 0x18
	}
	if m.StorageVolumeLeft != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.StorageVolumeLeft))))
		i--
		dAtA[i] = 0x11
	}
	if len(m.tableName) > 0 {
		i -= len(m.tableName)
		copy(dAtA[i:], m.tableName)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.tableName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ScoreHistoryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScoreHistoryReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ScoreHistoryReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Scores) > 0 {
		for iNdEx := len(m.Scores) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Scores[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStatus(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RewardInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Stake != 0 {
		i = encodeVarintStatus(dAtA, i, uint64(m.Stake))
		i--
		dAtA[i] = 0x30
	}
	if m.Weight != 0 {
		i = encodeVarintStatus(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x28
	}
	if m.IsSuspect {
		i--
		if m.IsSuspect {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Reward != 0 {
		i = encodeVarintStatus(dAtA, i, uint64(m.Reward))
		i--
		dAtA[i] = 0x18
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintStatus(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AirdropRewardHistoryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AirdropRewardHistoryReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AirdropRewardHistoryReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	n3, err3 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.DateCreated, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.DateCreated):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintStatus(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x22
	if m.Total != 0 {
		i = encodeVarintStatus(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x18
	}
	if m.PageNum != 0 {
		i = encodeVarintStatus(dAtA, i, uint64(m.PageNum))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStatus(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AirdropRewardHistoryResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AirdropRewardHistoryResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AirdropRewardHistoryResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	n4, err4 := github_com_tron_us_protobuf_types.StdTimeMarshalTo(m.ResponseTime, dAtA[i-github_com_tron_us_protobuf_types.SizeOfStdTime(m.ResponseTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintStatus(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x1a
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintStatus(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintStatus(dAtA []byte, offset int, v uint64) int {
	offset -= sovStatus(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SignedMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeMetricsAggrReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeDiscoveryAggrReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BtfsScanAggrReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.tableName)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	if m.StorageVolumeLeft != 0 {
		n += 9
	}
	if m.OnlineMinersNumber != 0 {
		n += 1 + sovStatus(uint64(m.OnlineMinersNumber))
	}
	if len(m.CountryDistribute) > 0 {
		for k, v := range m.CountryDistribute {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovStatus(uint64(len(k))) + 1 + sovStatus(uint64(v))
			n += mapEntrySize + 1 + sovStatus(uint64(mapEntrySize))
		}
	}
	if len(m.ScoreDistribute) > 0 {
		for k, v := range m.ScoreDistribute {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovStatus(uint64(len(k))) + 1 + sovStatus(uint64(v))
			n += mapEntrySize + 1 + sovStatus(uint64(mapEntrySize))
		}
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.TimeCreated)
	n += 1 + l + sovStatus(uint64(l))
	if m.StorageAlreadyUsed != 0 {
		n += 9
	}
	if m.Price != 0 {
		n += 9
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.DateCreated)
	n += 1 + l + sovStatus(uint64(l))
	l = len(m.NewRank)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	l = len(m.TotalRank)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ScoreHistoryReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Scores) > 0 {
		for _, e := range m.Scores {
			l = e.Size()
			n += 1 + l + sovStatus(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RewardInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovStatus(uint64(m.Type))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	if m.Reward != 0 {
		n += 1 + sovStatus(uint64(m.Reward))
	}
	if m.IsSuspect {
		n += 2
	}
	if m.Weight != 0 {
		n += 1 + sovStatus(uint64(m.Weight))
	}
	if m.Stake != 0 {
		n += 1 + sovStatus(uint64(m.Stake))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AirdropRewardHistoryReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovStatus(uint64(l))
		}
	}
	if m.PageNum != 0 {
		n += 1 + sovStatus(uint64(m.PageNum))
	}
	if m.Total != 0 {
		n += 1 + sovStatus(uint64(m.Total))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.DateCreated)
	n += 1 + l + sovStatus(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AirdropRewardHistoryResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovStatus(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	l = github_com_tron_us_protobuf_types.SizeOfStdTime(m.ResponseTime)
	n += 1 + l + sovStatus(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovStatus(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStatus(x uint64) (n int) {
	return sovStatus(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SignedMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeMetricsAggrReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeMetricsAggrReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeMetricsAggrReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeDiscoveryAggrReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeDiscoveryAggrReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeDiscoveryAggrReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BtfsScanAggrReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BtfsScanAggrReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BtfsScanAggrReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field tableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.tableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageVolumeLeft", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.StorageVolumeLeft = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineMinersNumber", wireType)
			}
			m.OnlineMinersNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnlineMinersNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryDistribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CountryDistribute == nil {
				m.CountryDistribute = make(map[string]int32)
			}
			var mapkey string
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStatus
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStatus
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthStatus
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthStatus
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStatus
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipStatus(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthStatus
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CountryDistribute[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreDistribute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScoreDistribute == nil {
				m.ScoreDistribute = make(map[string]int32)
			}
			var mapkey string
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStatus
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStatus
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthStatus
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthStatus
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStatus
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipStatus(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthStatus
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ScoreDistribute[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeCreated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.TimeCreated, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageAlreadyUsed", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.StorageAlreadyUsed = float64(math.Float64frombits(v))
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Price = float64(math.Float64frombits(v))
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateCreated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.DateCreated, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewRank", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewRank = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRank", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalRank = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScoreHistoryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScoreHistoryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScoreHistoryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scores = append(m.Scores, &node.ScoreHistoryTab{})
			if err := m.Scores[len(m.Scores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= RewardType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			m.Reward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reward |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSuspect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSuspect = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			m.Stake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stake |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AirdropRewardHistoryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AirdropRewardHistoryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AirdropRewardHistoryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, &RewardInfo{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			m.PageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateCreated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.DateCreated, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AirdropRewardHistoryResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AirdropRewardHistoryResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AirdropRewardHistoryResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_tron_us_protobuf_types.StdTimeUnmarshal(&m.ResponseTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStatus(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStatus
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStatus
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStatus
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStatus        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStatus          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStatus = fmt.Errorf("proto: unexpected end of group")
)
