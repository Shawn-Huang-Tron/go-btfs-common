// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protos/status/status.proto

package status

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	node "github.com/tron-us/go-btfs-common/protos/node"
	shared "github.com/tron-us/go-btfs-common/protos/shared"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protobuf "google/protobuf"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Ip2Location struct {
	Ipv4                 string   `protobuf:"bytes,1,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	CountryShort         string   `protobuf:"bytes,2,opt,name=country_short,json=countryShort,proto3" json:"country_short,omitempty"`
	CountryLong          string   `protobuf:"bytes,3,opt,name=country_long,json=countryLong,proto3" json:"country_long,omitempty"`
	Region               string   `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	City                 string   `protobuf:"bytes,5,opt,name=city,proto3" json:"city,omitempty"`
	Latitude             float32  `protobuf:"fixed32,6,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude            float32  `protobuf:"fixed32,7,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Zipcode              string   `protobuf:"bytes,8,opt,name=zipcode,proto3" json:"zipcode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ip2Location) Reset()         { *m = Ip2Location{} }
func (m *Ip2Location) String() string { return proto.CompactTextString(m) }
func (*Ip2Location) ProtoMessage()    {}
func (*Ip2Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9255cc60c5ca429, []int{0}
}
func (m *Ip2Location) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ip2Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ip2Location.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ip2Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ip2Location.Merge(m, src)
}
func (m *Ip2Location) XXX_Size() int {
	return m.Size()
}
func (m *Ip2Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Ip2Location.DiscardUnknown(m)
}

var xxx_messageInfo_Ip2Location proto.InternalMessageInfo

func (m *Ip2Location) GetIpv4() string {
	if m != nil {
		return m.Ipv4
	}
	return ""
}

func (m *Ip2Location) GetCountryShort() string {
	if m != nil {
		return m.CountryShort
	}
	return ""
}

func (m *Ip2Location) GetCountryLong() string {
	if m != nil {
		return m.CountryLong
	}
	return ""
}

func (m *Ip2Location) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *Ip2Location) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Ip2Location) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Ip2Location) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *Ip2Location) GetZipcode() string {
	if m != nil {
		return m.Zipcode
	}
	return ""
}

type HealthData struct {
	NodeId               string              `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	BtfsVersion          string              `protobuf:"bytes,2,opt,name=btfs_version,json=btfsVersion,proto3" json:"btfs_version,omitempty"`
	FailurePoint         string              `protobuf:"bytes,3,opt,name=failure_point,json=failurePoint,proto3" json:"failure_point,omitempty"`
	TimeCreated          *protobuf.Timestamp `protobuf:"bytes,4,opt,name=time_created,json=timeCreated,proto3" json:"time_created,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *HealthData) Reset()         { *m = HealthData{} }
func (m *HealthData) String() string { return proto.CompactTextString(m) }
func (*HealthData) ProtoMessage()    {}
func (*HealthData) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9255cc60c5ca429, []int{1}
}
func (m *HealthData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HealthData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HealthData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HealthData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthData.Merge(m, src)
}
func (m *HealthData) XXX_Size() int {
	return m.Size()
}
func (m *HealthData) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthData.DiscardUnknown(m)
}

var xxx_messageInfo_HealthData proto.InternalMessageInfo

func (m *HealthData) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *HealthData) GetBtfsVersion() string {
	if m != nil {
		return m.BtfsVersion
	}
	return ""
}

func (m *HealthData) GetFailurePoint() string {
	if m != nil {
		return m.FailurePoint
	}
	return ""
}

func (m *HealthData) GetTimeCreated() *protobuf.Timestamp {
	if m != nil {
		return m.TimeCreated
	}
	return nil
}

type TestError struct {
	HVal                 string              `protobuf:"bytes,1,opt,name=h_val,json=hVal,proto3" json:"h_val,omitempty"`
	PeerId               string              `protobuf:"bytes,2,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	ErrorStatus          string              `protobuf:"bytes,3,opt,name=error_status,json=errorStatus,proto3" json:"error_status,omitempty"`
	TimeCreated          *protobuf.Timestamp `protobuf:"bytes,4,opt,name=time_created,json=timeCreated,proto3" json:"time_created,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TestError) Reset()         { *m = TestError{} }
func (m *TestError) String() string { return proto.CompactTextString(m) }
func (*TestError) ProtoMessage()    {}
func (*TestError) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9255cc60c5ca429, []int{2}
}
func (m *TestError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestError.Merge(m, src)
}
func (m *TestError) XXX_Size() int {
	return m.Size()
}
func (m *TestError) XXX_DiscardUnknown() {
	xxx_messageInfo_TestError.DiscardUnknown(m)
}

var xxx_messageInfo_TestError proto.InternalMessageInfo

func (m *TestError) GetHVal() string {
	if m != nil {
		return m.HVal
	}
	return ""
}

func (m *TestError) GetPeerId() string {
	if m != nil {
		return m.PeerId
	}
	return ""
}

func (m *TestError) GetErrorStatus() string {
	if m != nil {
		return m.ErrorStatus
	}
	return ""
}

func (m *TestError) GetTimeCreated() *protobuf.Timestamp {
	if m != nil {
		return m.TimeCreated
	}
	return nil
}

type SignedMetrics struct {
	PublicKey            []byte   `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Payload              []byte   `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignedMetrics) Reset()         { *m = SignedMetrics{} }
func (m *SignedMetrics) String() string { return proto.CompactTextString(m) }
func (*SignedMetrics) ProtoMessage()    {}
func (*SignedMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9255cc60c5ca429, []int{3}
}
func (m *SignedMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedMetrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignedMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedMetrics.Merge(m, src)
}
func (m *SignedMetrics) XXX_Size() int {
	return m.Size()
}
func (m *SignedMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_SignedMetrics proto.InternalMessageInfo

func (m *SignedMetrics) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *SignedMetrics) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SignedMetrics) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*Ip2Location)(nil), "status.Ip2Location")
	proto.RegisterType((*HealthData)(nil), "status.HealthData")
	proto.RegisterType((*TestError)(nil), "status.TestError")
	proto.RegisterType((*SignedMetrics)(nil), "status.SignedMetrics")
}

func init() { proto.RegisterFile("protos/status/status.proto", fileDescriptor_e9255cc60c5ca429) }

var fileDescriptor_e9255cc60c5ca429 = []byte{
	// 633 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xbd, 0x6e, 0xd4, 0x40,
	0x10, 0xc6, 0x21, 0x71, 0x72, 0x7b, 0x3e, 0x24, 0x16, 0x29, 0x18, 0x03, 0x47, 0x08, 0x4d, 0x9a,
	0xd8, 0x52, 0x42, 0x83, 0x10, 0x4d, 0x42, 0x24, 0x22, 0x02, 0x8a, 0x9c, 0x90, 0x82, 0xc6, 0xec,
	0xd9, 0x73, 0xf6, 0x2a, 0xbe, 0x5d, 0xb3, 0x1e, 0x47, 0x3a, 0x9e, 0x04, 0x89, 0x57, 0xe0, 0x41,
	0x28, 0x79, 0x04, 0x14, 0x2a, 0xde, 0x81, 0x02, 0xed, 0x8f, 0x13, 0xf1, 0x93, 0x8a, 0xe6, 0xec,
	0xef, 0x9b, 0x99, 0x9b, 0x6f, 0xf6, 0x9b, 0x35, 0x89, 0x1a, 0x25, 0x51, 0xb6, 0x49, 0x8b, 0x0c,
	0xbb, 0xfe, 0x11, 0x1b, 0x92, 0xfa, 0x16, 0x45, 0x77, 0x4b, 0x29, 0xcb, 0x1a, 0x12, 0xc3, 0x4e,
	0xba, 0x69, 0x02, 0xb3, 0x06, 0xe7, 0x36, 0x29, 0x7a, 0xf0, 0x67, 0x10, 0xf9, 0x0c, 0x5a, 0x64,
	0xb3, 0xc6, 0x25, 0xac, 0xba, 0x0e, 0x42, 0x16, 0x60, 0x7e, 0x1c, 0x7f, 0xd1, 0xb9, 0x62, 0x0a,
	0x0a, 0xf7, 0xb0, 0xb1, 0xf5, 0x1f, 0x1e, 0x19, 0xee, 0x37, 0x5b, 0x07, 0x32, 0x67, 0xc8, 0xa5,
	0xa0, 0x94, 0x2c, 0xf2, 0xe6, 0xec, 0x71, 0xe8, 0xad, 0x79, 0x1b, 0x83, 0xd4, 0xbc, 0xd3, 0x47,
	0x64, 0x94, 0xcb, 0x4e, 0xa0, 0x9a, 0x67, 0x6d, 0x25, 0x15, 0x86, 0x0b, 0x26, 0x18, 0x38, 0xf2,
	0x48, 0x73, 0xf4, 0x21, 0xe9, 0x71, 0x56, 0x4b, 0x51, 0x86, 0xd7, 0x4d, 0xce, 0xd0, 0x71, 0x07,
	0x52, 0x94, 0x74, 0x95, 0xf8, 0x0a, 0x4a, 0x2e, 0x45, 0xb8, 0x68, 0x82, 0x0e, 0xe9, 0x9e, 0x39,
	0xc7, 0x79, 0xb8, 0x64, 0x7b, 0xea, 0x77, 0x1a, 0x91, 0x95, 0x9a, 0x21, 0xc7, 0xae, 0x80, 0xd0,
	0x5f, 0xf3, 0x36, 0x16, 0xd2, 0x0b, 0x4c, 0xef, 0x91, 0x81, 0x6e, 0x61, 0x83, 0xcb, 0x26, 0x78,
	0x49, 0xd0, 0x90, 0x2c, 0x7f, 0xe0, 0x4d, 0x2e, 0x0b, 0x08, 0x57, 0xcc, 0x1f, 0xf6, 0x70, 0xfd,
	0xb3, 0x47, 0xc8, 0x0b, 0x60, 0x35, 0x56, 0xcf, 0x19, 0x32, 0x7a, 0x9b, 0x2c, 0xeb, 0x43, 0xca,
	0x78, 0xe1, 0xa6, 0xf5, 0x35, 0xdc, 0x2f, 0xf4, 0x28, 0x13, 0x9c, 0xb6, 0xd9, 0x19, 0xa8, 0x56,
	0xab, 0xb5, 0xe3, 0x0e, 0x35, 0x77, 0x62, 0x29, 0x7d, 0x24, 0x53, 0xc6, 0xeb, 0x4e, 0x41, 0xd6,
	0x48, 0x2e, 0xd0, 0x8d, 0x1b, 0x38, 0xf2, 0x50, 0x73, 0xf4, 0x19, 0x09, 0xb4, 0x45, 0x59, 0xae,
	0x80, 0x21, 0x14, 0x66, 0xea, 0xe1, 0x56, 0x14, 0x5b, 0x1f, 0xe3, 0xde, 0xc7, 0xf8, 0xb8, 0xf7,
	0x31, 0x1d, 0xea, 0xfc, 0x5d, 0x9b, 0xbe, 0xfe, 0xc9, 0x23, 0x83, 0x63, 0x68, 0x71, 0x4f, 0x29,
	0xa9, 0xe8, 0x2d, 0xb2, 0x54, 0x65, 0x67, 0xac, 0xee, 0x9d, 0xa9, 0x4e, 0x58, 0xad, 0x47, 0x68,
	0x00, 0x94, 0x1e, 0xc1, 0x8a, 0xf4, 0x35, 0xb4, 0x23, 0x80, 0x2e, 0xcb, 0xec, 0x62, 0xf5, 0x6e,
	0x18, 0xee, 0xc8, 0x50, 0xff, 0xab, 0x6e, 0x4a, 0x46, 0x47, 0xbc, 0x14, 0x50, 0xbc, 0x02, 0x54,
	0x3c, 0x6f, 0xe9, 0x7d, 0x42, 0x9a, 0x6e, 0x52, 0xf3, 0x3c, 0x3b, 0x85, 0xb9, 0x51, 0x19, 0xa4,
	0x03, 0xcb, 0xbc, 0x84, 0xb9, 0x36, 0xad, 0xe5, 0xa5, 0x60, 0xd8, 0x29, 0x30, 0x62, 0x83, 0xf4,
	0x92, 0xd0, 0xa6, 0x35, 0x6c, 0x5e, 0x4b, 0x56, 0x18, 0xa9, 0x41, 0xda, 0xc3, 0xad, 0x9f, 0x1e,
	0xf1, 0x9d, 0xe2, 0x6d, 0x32, 0x7a, 0xd3, 0x14, 0x0c, 0xa1, 0x6f, 0x49, 0x62, 0xb3, 0xe5, 0xaf,
	0x65, 0x01, 0xd1, 0xea, 0x5f, 0xc2, 0xf7, 0xf4, 0xdd, 0xa1, 0x4f, 0xc9, 0x68, 0x57, 0xd6, 0x35,
	0xe4, 0x68, 0xad, 0xa7, 0x34, 0x76, 0x57, 0xef, 0x72, 0x15, 0xae, 0x2c, 0x7e, 0x42, 0x02, 0x57,
	0x6c, 0x4d, 0xb8, 0xd9, 0xd7, 0x5e, 0xf8, 0x72, 0x65, 0xe9, 0x1e, 0x09, 0x76, 0x2b, 0xc8, 0x4f,
	0xd3, 0x4e, 0xe8, 0x63, 0xa3, 0x51, 0xec, 0xee, 0x9d, 0x23, 0xf6, 0xc5, 0x54, 0xa6, 0xf0, 0xbe,
	0x83, 0x16, 0xa3, 0x3b, 0xff, 0x8c, 0x35, 0x52, 0xe1, 0xce, 0xbb, 0x2f, 0xe7, 0x63, 0xef, 0xeb,
	0xf9, 0xd8, 0xfb, 0x76, 0x3e, 0xf6, 0x3e, 0x7e, 0x1f, 0x5f, 0x23, 0x37, 0xb8, 0x8c, 0xf5, 0x2a,
	0x3a, 0x29, 0x3b, 0x43, 0x7b, 0x3a, 0x87, 0xba, 0xfd, 0xa1, 0xf7, 0x36, 0x29, 0x39, 0x56, 0xdd,
	0x24, 0xce, 0xe5, 0x2c, 0x41, 0x25, 0xc5, 0x66, 0xd7, 0x26, 0xa5, 0xdc, 0xd4, 0x15, 0x9b, 0xb9,
	0x9c, 0xcd, 0xa4, 0x48, 0x7e, 0xfb, 0x10, 0x4d, 0x7c, 0x03, 0xb7, 0x7f, 0x05, 0x00, 0x00, 0xff,
	0xff, 0x70, 0x61, 0x0e, 0x74, 0xa0, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StatusClient is the client API for Status service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StatusClient interface {
	UpdateMetrics(ctx context.Context, in *node.Node, opts ...grpc.CallOption) (*protobuf.Empty, error)
	CollectHealth(ctx context.Context, in *HealthData, opts ...grpc.CallOption) (*protobuf.Empty, error)
	CollectError(ctx context.Context, in *TestError, opts ...grpc.CallOption) (*protobuf.Empty, error)
	CheckRuntime(ctx context.Context, in *shared.RuntimeInfoRequest, opts ...grpc.CallOption) (*shared.RuntimeInfoReport, error)
}

type statusClient struct {
	cc *grpc.ClientConn
}

func NewStatusClient(cc *grpc.ClientConn) StatusClient {
	return &statusClient{cc}
}

func (c *statusClient) UpdateMetrics(ctx context.Context, in *node.Node, opts ...grpc.CallOption) (*protobuf.Empty, error) {
	out := new(protobuf.Empty)
	err := c.cc.Invoke(ctx, "/status.Status/UpdateMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusClient) CollectHealth(ctx context.Context, in *HealthData, opts ...grpc.CallOption) (*protobuf.Empty, error) {
	out := new(protobuf.Empty)
	err := c.cc.Invoke(ctx, "/status.Status/CollectHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusClient) CollectError(ctx context.Context, in *TestError, opts ...grpc.CallOption) (*protobuf.Empty, error) {
	out := new(protobuf.Empty)
	err := c.cc.Invoke(ctx, "/status.Status/CollectError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statusClient) CheckRuntime(ctx context.Context, in *shared.RuntimeInfoRequest, opts ...grpc.CallOption) (*shared.RuntimeInfoReport, error) {
	out := new(shared.RuntimeInfoReport)
	err := c.cc.Invoke(ctx, "/status.Status/CheckRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatusServer is the server API for Status service.
type StatusServer interface {
	UpdateMetrics(context.Context, *node.Node) (*protobuf.Empty, error)
	CollectHealth(context.Context, *HealthData) (*protobuf.Empty, error)
	CollectError(context.Context, *TestError) (*protobuf.Empty, error)
	CheckRuntime(context.Context, *shared.RuntimeInfoRequest) (*shared.RuntimeInfoReport, error)
}

// UnimplementedStatusServer can be embedded to have forward compatible implementations.
type UnimplementedStatusServer struct {
}

func (*UnimplementedStatusServer) UpdateMetrics(ctx context.Context, req *node.Node) (*protobuf.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetrics not implemented")
}
func (*UnimplementedStatusServer) CollectHealth(ctx context.Context, req *HealthData) (*protobuf.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectHealth not implemented")
}
func (*UnimplementedStatusServer) CollectError(ctx context.Context, req *TestError) (*protobuf.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectError not implemented")
}
func (*UnimplementedStatusServer) CheckRuntime(ctx context.Context, req *shared.RuntimeInfoRequest) (*shared.RuntimeInfoReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRuntime not implemented")
}

func RegisterStatusServer(s *grpc.Server, srv StatusServer) {
	s.RegisterService(&_Status_serviceDesc, srv)
}

func _Status_UpdateMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(node.Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServer).UpdateMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.Status/UpdateMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServer).UpdateMetrics(ctx, req.(*node.Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Status_CollectHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServer).CollectHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.Status/CollectHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServer).CollectHealth(ctx, req.(*HealthData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Status_CollectError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestError)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServer).CollectError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.Status/CollectError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServer).CollectError(ctx, req.(*TestError))
	}
	return interceptor(ctx, in, info, handler)
}

func _Status_CheckRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(shared.RuntimeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServer).CheckRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/status.Status/CheckRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServer).CheckRuntime(ctx, req.(*shared.RuntimeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Status_serviceDesc = grpc.ServiceDesc{
	ServiceName: "status.Status",
	HandlerType: (*StatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateMetrics",
			Handler:    _Status_UpdateMetrics_Handler,
		},
		{
			MethodName: "CollectHealth",
			Handler:    _Status_CollectHealth_Handler,
		},
		{
			MethodName: "CollectError",
			Handler:    _Status_CollectError_Handler,
		},
		{
			MethodName: "CheckRuntime",
			Handler:    _Status_CheckRuntime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/status/status.proto",
}

func (m *Ip2Location) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ip2Location) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ip2Location) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Zipcode) > 0 {
		i -= len(m.Zipcode)
		copy(dAtA[i:], m.Zipcode)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.Zipcode)))
		i--
		dAtA[i] = 0x42
	}
	if m.Longitude != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Longitude))))
		i--
		dAtA[i] = 0x3d
	}
	if m.Latitude != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Latitude))))
		i--
		dAtA[i] = 0x35
	}
	if len(m.City) > 0 {
		i -= len(m.City)
		copy(dAtA[i:], m.City)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.City)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CountryLong) > 0 {
		i -= len(m.CountryLong)
		copy(dAtA[i:], m.CountryLong)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.CountryLong)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CountryShort) > 0 {
		i -= len(m.CountryShort)
		copy(dAtA[i:], m.CountryShort)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.CountryShort)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ipv4) > 0 {
		i -= len(m.Ipv4)
		copy(dAtA[i:], m.Ipv4)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.Ipv4)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HealthData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HealthData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TimeCreated != nil {
		{
			size, err := m.TimeCreated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStatus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.FailurePoint) > 0 {
		i -= len(m.FailurePoint)
		copy(dAtA[i:], m.FailurePoint)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.FailurePoint)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BtfsVersion) > 0 {
		i -= len(m.BtfsVersion)
		copy(dAtA[i:], m.BtfsVersion)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.BtfsVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TimeCreated != nil {
		{
			size, err := m.TimeCreated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStatus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ErrorStatus) > 0 {
		i -= len(m.ErrorStatus)
		copy(dAtA[i:], m.ErrorStatus)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.ErrorStatus)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PeerId) > 0 {
		i -= len(m.PeerId)
		copy(dAtA[i:], m.PeerId)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.PeerId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.HVal) > 0 {
		i -= len(m.HVal)
		copy(dAtA[i:], m.HVal)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.HVal)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignedMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignedMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintStatus(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStatus(dAtA []byte, offset int, v uint64) int {
	offset -= sovStatus(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Ip2Location) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ipv4)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	l = len(m.CountryShort)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	l = len(m.CountryLong)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	if m.Latitude != 0 {
		n += 5
	}
	if m.Longitude != 0 {
		n += 5
	}
	l = len(m.Zipcode)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HealthData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	l = len(m.BtfsVersion)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	l = len(m.FailurePoint)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	if m.TimeCreated != nil {
		l = m.TimeCreated.Size()
		n += 1 + l + sovStatus(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TestError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HVal)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	l = len(m.PeerId)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	l = len(m.ErrorStatus)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	if m.TimeCreated != nil {
		l = m.TimeCreated.Size()
		n += 1 + l + sovStatus(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovStatus(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovStatus(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStatus(x uint64) (n int) {
	return sovStatus(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Ip2Location) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ip2Location: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ip2Location: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipv4", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipv4 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryShort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryShort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryLong", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryLong = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Latitude = float32(math.Float32frombits(v))
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Longitude", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Longitude = float32(math.Float32frombits(v))
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zipcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zipcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtfsVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BtfsVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailurePoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailurePoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeCreated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeCreated == nil {
				m.TimeCreated = &protobuf.Timestamp{}
			}
			if err := m.TimeCreated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HVal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HVal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeCreated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeCreated == nil {
				m.TimeCreated = &protobuf.Timestamp{}
			}
			if err := m.TimeCreated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignedMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignedMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStatus
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStatus(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStatus
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStatus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStatus
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStatus
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStatus
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStatus        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStatus          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStatus = fmt.Errorf("proto: unexpected end of group")
)
